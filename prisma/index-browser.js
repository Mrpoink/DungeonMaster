
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "393aa359c9ad4a4bb28630fb5613f9c281cde053"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.MonsterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  size: 'size',
  type: 'type',
  alignment: 'alignment',
  habitat: 'habitat',
  mainHabitat: 'mainHabitat',
  otherHabitat: 'otherHabitat',
  treasure: 'treasure',
  ac: 'ac',
  hp: 'hp',
  initiative: 'initiative',
  walk: 'walk',
  burrow: 'burrow',
  climb: 'climb',
  fly: 'fly',
  hover: 'hover',
  swim: 'swim',
  strMod: 'strMod',
  intMod: 'intMod',
  dexMod: 'dexMod',
  wisMod: 'wisMod',
  conMod: 'conMod',
  chaMod: 'chaMod',
  strSave: 'strSave',
  intSave: 'intSave',
  dexSave: 'dexSave',
  wisSave: 'wisSave',
  conSave: 'conSave',
  chaSave: 'chaSave',
  proficient: 'proficient',
  expertise: 'expertise',
  vulnerabilities: 'vulnerabilities',
  slashing: 'slashing',
  immunitiesConditions: 'immunitiesConditions',
  immunitiesDamage: 'immunitiesDamage',
  blindsight: 'blindsight',
  darkvision: 'darkvision',
  truesight: 'truesight',
  tremorsense: 'tremorsense',
  passivePerception: 'passivePerception',
  languages: 'languages',
  cr: 'cr',
  xpVal: 'xpVal',
  pb: 'pb',
  traits: 'traits',
  legendaryResistanceCount: 'legendaryResistanceCount',
  numberOfAtk: 'numberOfAtk',
  atk1Type: 'atk1Type',
  atk1Mod: 'atk1Mod',
  atk1Range: 'atk1Range',
  atk1RangeShort: 'atk1RangeShort',
  atk1Dam: 'atk1Dam',
  atk1DamageType: 'atk1DamageType',
  atk2Type: 'atk2Type',
  atk2Mod: 'atk2Mod',
  atk2Range: 'atk2Range',
  atk2RangeShort: 'atk2RangeShort',
  atk2Dam: 'atk2Dam',
  atk2DamageType: 'atk2DamageType',
  atk3Type: 'atk3Type',
  atk3Mod: 'atk3Mod',
  atk3Range: 'atk3Range',
  atk3RangeShort: 'atk3RangeShort',
  atk3Dam: 'atk3Dam',
  atk3DamageType: 'atk3DamageType',
  atk4Type: 'atk4Type',
  atk4Mod: 'atk4Mod',
  atk4Range: 'atk4Range',
  atk4RangeShort: 'atk4RangeShort',
  atk4Dam: 'atk4Dam',
  atk4DamageType: 'atk4DamageType',
  saveDC: 'saveDC',
  savingThrow: 'savingThrow',
  actionNotes: 'actionNotes',
  ability: 'ability',
  spellSaveDC: 'spellSaveDC',
  spellSavingThrows: 'spellSavingThrows',
  spellAttack: 'spellAttack',
  atWillSpells: 'atWillSpells',
  threePerDaySpells: 'threePerDaySpells',
  twoPerDaySpells: 'twoPerDaySpells',
  onePerDaySpells: 'onePerDaySpells',
  bonusAction: 'bonusAction',
  reaction: 'reaction',
  amount: 'amount',
  legendaryActionSaveDC: 'legendaryActionSaveDC',
  legendaryActionSavingThrow: 'legendaryActionSavingThrow',
  legendaryActions: 'legendaryActions',
  lair: 'lair',
  xpLair: 'xpLair',
  legendaryResistance: 'legendaryResistance',
  legendaryActionsLair: 'legendaryActionsLair',
  lairSaveDC: 'lairSaveDC',
  lairSavingThrows: 'lairSavingThrows',
  other: 'other',
  align: 'align',
  speeds: 'speeds',
  strScore: 'strScore',
  dexScore: 'dexScore',
  conScore: 'conScore',
  intScore: 'intScore',
  wisScore: 'wisScore',
  chaScore: 'chaScore',
  savThrows: 'savThrows',
  skills: 'skills',
  wri: 'wri',
  senses: 'senses',
  additional: 'additional',
  font: 'font',
  additionalInfo: 'additionalInfo',
  author: 'author'
};

exports.Prisma.RaceScalarFieldEnum = {
  id: 'id',
  race: 'race',
  str: 'str',
  dex: 'dex',
  con: 'con',
  int: 'int',
  wis: 'wis',
  cha: 'cha',
  special: 'special',
  source: 'source',
  notes: 'notes'
};

exports.Prisma.SpellScalarFieldEnum = {
  id: 'id',
  name: 'name',
  level: 'level',
  school: 'school',
  castingTime: 'castingTime',
  duration: 'duration',
  range: 'range',
  area: 'area',
  attack: 'attack',
  save: 'save',
  damageEffect: 'damageEffect',
  ritual: 'ritual',
  concentration: 'concentration',
  verbal: 'verbal',
  somatic: 'somatic',
  material: 'material',
  materialDetails: 'materialDetails',
  source: 'source',
  details: 'details',
  link: 'link'
};

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  class: 'class',
  subclass: 'subclass',
  source: 'source',
  notes: 'notes',
  features: 'features',
  level: 'level',
  description: 'description'
};

exports.Prisma.MagicItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  rarity: 'rarity',
  attunement: 'attunement',
  costGp: 'costGp',
  note: 'note',
  armorCost: 'armorCost',
  rareMaterial: 'rareMaterial',
  acBonus: 'acBonus',
  saveBonus: 'saveBonus',
  setScoreModifier: 'setScoreModifier',
  plusTwoBonusToScore: 'plusTwoBonusToScore',
  weaponBonus: 'weaponBonus',
  spellLevel: 'spellLevel',
  unlimitedCharges: 'unlimitedCharges',
  chargesPerDay: 'chargesPerDay',
  chargesPerItem: 'chargesPerItem',
  spellsShareCharges: 'spellsShareCharges',
  condition: 'condition',
  consumableDamageAvg: 'consumableDamageAvg',
  consumableSave: 'consumableSave',
  semiPermanentDamageAvg: 'semiPermanentDamageAvg',
  semiPermSave: 'semiPermSave',
  durationMinutes: 'durationMinutes',
  permanentDamageAvg: 'permanentDamageAvg',
  permSave: 'permSave',
  specificSituations: 'specificSituations',
  restoreHpAvg: 'restoreHpAvg',
  miscCosts: 'miscCosts',
  secondSpellLevel: 'secondSpellLevel',
  secondUnlimitedCharges: 'secondUnlimitedCharges',
  secondChargesPerDay: 'secondChargesPerDay',
  thirdSpellLevel: 'thirdSpellLevel',
  thirdUnlimitedCharges: 'thirdUnlimitedCharges',
  thirdChargesPerDay: 'thirdChargesPerDay',
  matCost: 'matCost',
  acCost: 'acCost',
  saveCost: 'saveCost',
  setScoreCost: 'setScoreCost',
  bonusScoreCost: 'bonusScoreCost',
  weaponCost: 'weaponCost',
  consumSpellCost: 'consumSpellCost',
  permChargesCost: 'permChargesCost',
  chargesDestroyed: 'chargesDestroyed',
  spellShareChargesCost: 'spellShareChargesCost',
  conditionCost: 'conditionCost',
  consDMGCost: 'consDMGCost',
  smPrDMGCost: 'smPrDMGCost',
  perDMGCost: 'perDMGCost',
  avgHPCost: 'avgHPCost',
  miscCost: 'miscCost',
  secondConsumSpellCost: 'secondConsumSpellCost',
  secondPermChargesCost: 'secondPermChargesCost',
  thirdConsumSpellCost: 'thirdConsumSpellCost',
  thirdPermChargesCost: 'thirdPermChargesCost'
};

exports.Prisma.GeneralEquipmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  cost: 'cost',
  weightLbs: 'weightLbs'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Monster: 'Monster',
  Race: 'Race',
  Spell: 'Spell',
  Class: 'Class',
  MagicItem: 'MagicItem',
  GeneralEquipment: 'GeneralEquipment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
