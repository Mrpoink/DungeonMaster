# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
import os
import logging
import inspect
import warnings
from collections import OrderedDict

from pydantic import BaseModel, Field

from . import types, enums, errors, fields, bases
from ._types import FuncType
from ._compat import model_rebuild, field_validator
from ._builder import serialize_base64
from .generator import partial_models_ctx, PartialModelField


log: logging.Logger = logging.getLogger(__name__)
_created_partial_types: Set[str] = set()

class Monster(bases.BaseMonster):
    """Represents a Monster record"""

    id: _str
    name: _str
    size: Optional[_str] = None
    type: Optional[_str] = None
    alignment: Optional[_str] = None
    habitat: Optional[_str] = None
    mainHabitat: Optional[_str] = None
    otherHabitat: Optional[_str] = None
    treasure: Optional[_str] = None
    ac: Optional[_str] = None
    hp: Optional[_str] = None
    initiative: Optional[_str] = None
    walk: Optional[_str] = None
    burrow: Optional[_str] = None
    climb: Optional[_str] = None
    fly: Optional[_str] = None
    hover: Optional[_str] = None
    swim: Optional[_str] = None
    strMod: Optional[_str] = None
    intMod: Optional[_str] = None
    dexMod: Optional[_str] = None
    wisMod: Optional[_str] = None
    conMod: Optional[_str] = None
    chaMod: Optional[_str] = None
    strSave: Optional[_str] = None
    intSave: Optional[_str] = None
    dexSave: Optional[_str] = None
    wisSave: Optional[_str] = None
    conSave: Optional[_str] = None
    chaSave: Optional[_str] = None
    proficient: Optional[_str] = None
    expertise: Optional[_str] = None
    vulnerabilities: Optional[_str] = None
    slashing: Optional[_str] = None
    immunitiesConditions: Optional[_str] = None
    immunitiesDamage: Optional[_str] = None
    blindsight: Optional[_str] = None
    darkvision: Optional[_str] = None
    truesight: Optional[_str] = None
    tremorsense: Optional[_str] = None
    passivePerception: Optional[_str] = None
    languages: Optional[_str] = None
    cr: Optional[_str] = None
    xpVal: Optional[_str] = None
    pb: Optional[_str] = None
    traits: Optional[_str] = None
    legendaryResistanceCount: Optional[_str] = None
    numberOfAtk: Optional[_str] = None
    atk1Type: Optional[_str] = None
    atk1Mod: Optional[_str] = None
    atk1Range: Optional[_str] = None
    atk1RangeShort: Optional[_str] = None
    atk1Dam: Optional[_str] = None
    atk1DamageType: Optional[_str] = None
    atk2Type: Optional[_str] = None
    atk2Mod: Optional[_str] = None
    atk2Range: Optional[_str] = None
    atk2RangeShort: Optional[_str] = None
    atk2Dam: Optional[_str] = None
    atk2DamageType: Optional[_str] = None
    atk3Type: Optional[_str] = None
    atk3Mod: Optional[_str] = None
    atk3Range: Optional[_str] = None
    atk3RangeShort: Optional[_str] = None
    atk3Dam: Optional[_str] = None
    atk3DamageType: Optional[_str] = None
    atk4Type: Optional[_str] = None
    atk4Mod: Optional[_str] = None
    atk4Range: Optional[_str] = None
    atk4RangeShort: Optional[_str] = None
    atk4Dam: Optional[_str] = None
    atk4DamageType: Optional[_str] = None
    saveDC: Optional[_str] = None
    savingThrow: Optional[_str] = None
    actionNotes: Optional[_str] = None
    ability: Optional[_str] = None
    spellSaveDC: Optional[_str] = None
    spellSavingThrows: Optional[_str] = None
    spellAttack: Optional[_str] = None
    atWillSpells: Optional[_str] = None
    threePerDaySpells: Optional[_str] = None
    twoPerDaySpells: Optional[_str] = None
    onePerDaySpells: Optional[_str] = None
    bonusAction: Optional[_str] = None
    reaction: Optional[_str] = None
    amount: Optional[_str] = None
    legendaryActionSaveDC: Optional[_str] = None
    legendaryActionSavingThrow: Optional[_str] = None
    legendaryActions: Optional[_str] = None
    lair: Optional[_str] = None
    xpLair: Optional[_str] = None
    legendaryResistance: Optional[_str] = None
    legendaryActionsLair: Optional[_str] = None
    lairSaveDC: Optional[_str] = None
    lairSavingThrows: Optional[_str] = None
    other: Optional[_str] = None
    align: Optional[_str] = None
    speeds: Optional[_str] = None
    strScore: Optional[_str] = None
    dexScore: Optional[_str] = None
    conScore: Optional[_str] = None
    intScore: Optional[_str] = None
    wisScore: Optional[_str] = None
    chaScore: Optional[_str] = None
    savThrows: Optional[_str] = None
    skills: Optional[_str] = None
    wri: Optional[_str] = None
    senses: Optional[_str] = None
    additional: Optional[_str] = None
    font: Optional[_str] = None
    additionalInfo: Optional[_str] = None
    author: Optional[_str] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.MonsterKeys']] = None,
        exclude: Optional[Iterable['types.MonsterKeys']] = None,
        required: Optional[Iterable['types.MonsterKeys']] = None,
        optional: Optional[Iterable['types.MonsterKeys']] = None,
        relations: Optional[Mapping['types.MonsterRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.MonsterKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Monster_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Monster_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Monster_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Monster_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "Monster" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Monster / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Monster',
            }
        )
        _created_partial_types.add(name)


class Race(bases.BaseRace):
    """Represents a Race record"""

    id: _int
    race: _str
    str: Optional[_str] = None
    dex: Optional[_str] = None
    con: Optional[_str] = None
    int: Optional[_str] = None
    wis: Optional[_str] = None
    cha: Optional[_str] = None
    special: Optional[_str] = None
    source: _str
    notes: Optional[_str] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.RaceKeys']] = None,
        exclude: Optional[Iterable['types.RaceKeys']] = None,
        required: Optional[Iterable['types.RaceKeys']] = None,
        optional: Optional[Iterable['types.RaceKeys']] = None,
        relations: Optional[Mapping['types.RaceRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.RaceKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Race_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Race_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Race_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Race_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "Race" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Race / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Race',
            }
        )
        _created_partial_types.add(name)


class Spell(bases.BaseSpell):
    """Represents a Spell record"""

    id: _int
    name: _str
    level: _str
    school: _str
    castingTime: _str
    duration: _str
    range: _str
    area: Optional[_str] = None
    attack: Optional[_str] = None
    save: Optional[_str] = None
    damageEffect: _str
    ritual: Optional[_str] = None
    concentration: Optional[_str] = None
    verbal: Optional[_str] = None
    somatic: Optional[_str] = None
    material: Optional[_str] = None
    materialDetails: Optional[_str] = None
    source: _str
    details: _str
    link: _str

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.SpellKeys']] = None,
        exclude: Optional[Iterable['types.SpellKeys']] = None,
        required: Optional[Iterable['types.SpellKeys']] = None,
        optional: Optional[Iterable['types.SpellKeys']] = None,
        relations: Optional[Mapping['types.SpellRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.SpellKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Spell_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Spell_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Spell_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Spell_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "Spell" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Spell / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Spell',
            }
        )
        _created_partial_types.add(name)


class PlayerClass(bases.BasePlayerClass):
    """Represents a PlayerClass record"""

    id: _int
    Playerclass: _str
    subclass: _str
    source: Optional[_str] = None
    notes: Optional[_str] = None
    features: Optional[_str] = None
    level: Optional[_str] = None
    description: Optional[_str] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.PlayerClassKeys']] = None,
        exclude: Optional[Iterable['types.PlayerClassKeys']] = None,
        required: Optional[Iterable['types.PlayerClassKeys']] = None,
        optional: Optional[Iterable['types.PlayerClassKeys']] = None,
        relations: Optional[Mapping['types.PlayerClassRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.PlayerClassKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _PlayerClass_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _PlayerClass_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _PlayerClass_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _PlayerClass_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "PlayerClass" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid PlayerClass / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'PlayerClass',
            }
        )
        _created_partial_types.add(name)


class MagicItem(bases.BaseMagicItem):
    """Represents a MagicItem record"""

    id: _int
    name: _str
    rarity: Optional[_str] = None
    attunement: Optional[_str] = None
    costGp: Optional[_int] = None
    note: Optional[_str] = None
    armorCost: Optional[_int] = None
    rareMaterial: Optional[_str] = None
    acBonus: Optional[_int] = None
    saveBonus: Optional[_int] = None
    setScoreModifier: Optional[_int] = None
    plusTwoBonusToScore: Optional[_str] = None
    weaponBonus: Optional[_int] = None
    spellLevel: Optional[_int] = None
    unlimitedCharges: Optional[_str] = None
    chargesPerDay: Optional[_int] = None
    chargesPerItem: Optional[_int] = None
    spellsShareCharges: Optional[_int] = None
    condition: Optional[_str] = None
    consumableDamageAvg: Optional[_int] = None
    consumableSave: Optional[_str] = None
    semiPermanentDamageAvg: Optional[_int] = None
    semiPermSave: Optional[_str] = None
    durationMinutes: Optional[_int] = None
    permanentDamageAvg: Optional[_int] = None
    permSave: Optional[_str] = None
    specificSituations: Optional[_str] = None
    restoreHpAvg: Optional[_int] = None
    miscCosts: Optional[_int] = None
    secondSpellLevel: Optional[_int] = None
    secondUnlimitedCharges: Optional[_str] = None
    secondChargesPerDay: Optional[_int] = None
    thirdSpellLevel: Optional[_int] = None
    thirdUnlimitedCharges: Optional[_str] = None
    thirdChargesPerDay: Optional[_int] = None
    matCost: Optional[_int] = None
    acCost: Optional[_int] = None
    saveCost: Optional[_int] = None
    setScoreCost: Optional[_int] = None
    bonusScoreCost: Optional[_int] = None
    weaponCost: Optional[_int] = None
    consumSpellCost: Optional[_int] = None
    permChargesCost: Optional[_int] = None
    chargesDestroyed: Optional[_int] = None
    spellShareChargesCost: Optional[_int] = None
    conditionCost: Optional[_int] = None
    consDMGCost: Optional[_int] = None
    smPrDMGCost: Optional[_int] = None
    perDMGCost: Optional[_int] = None
    avgHPCost: Optional[_int] = None
    miscCost: Optional[_int] = None
    secondConsumSpellCost: Optional[_int] = None
    secondPermChargesCost: Optional[_int] = None
    thirdConsumSpellCost: Optional[_int] = None
    thirdPermChargesCost: Optional[_int] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.MagicItemKeys']] = None,
        exclude: Optional[Iterable['types.MagicItemKeys']] = None,
        required: Optional[Iterable['types.MagicItemKeys']] = None,
        optional: Optional[Iterable['types.MagicItemKeys']] = None,
        relations: Optional[Mapping['types.MagicItemRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.MagicItemKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _MagicItem_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _MagicItem_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _MagicItem_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _MagicItem_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "MagicItem" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid MagicItem / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'MagicItem',
            }
        )
        _created_partial_types.add(name)


class GeneralEquipment(bases.BaseGeneralEquipment):
    """Represents a GeneralEquipment record"""

    id: _int
    name: _str
    cost: _str
    weightLbs: Optional[_str] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.GeneralEquipmentKeys']] = None,
        exclude: Optional[Iterable['types.GeneralEquipmentKeys']] = None,
        required: Optional[Iterable['types.GeneralEquipmentKeys']] = None,
        optional: Optional[Iterable['types.GeneralEquipmentKeys']] = None,
        relations: Optional[Mapping['types.GeneralEquipmentRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.GeneralEquipmentKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _GeneralEquipment_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _GeneralEquipment_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _GeneralEquipment_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _GeneralEquipment_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "GeneralEquipment" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid GeneralEquipment / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'GeneralEquipment',
            }
        )
        _created_partial_types.add(name)



_Monster_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_Monster_fields: Dict['types.MonsterKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('size', {
            'name': 'size',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('type', {
            'name': 'type',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('alignment', {
            'name': 'alignment',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('habitat', {
            'name': 'habitat',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('mainHabitat', {
            'name': 'mainHabitat',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('otherHabitat', {
            'name': 'otherHabitat',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('treasure', {
            'name': 'treasure',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('ac', {
            'name': 'ac',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('hp', {
            'name': 'hp',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('initiative', {
            'name': 'initiative',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('walk', {
            'name': 'walk',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('burrow', {
            'name': 'burrow',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('climb', {
            'name': 'climb',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('fly', {
            'name': 'fly',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('hover', {
            'name': 'hover',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('swim', {
            'name': 'swim',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('strMod', {
            'name': 'strMod',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('intMod', {
            'name': 'intMod',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('dexMod', {
            'name': 'dexMod',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('wisMod', {
            'name': 'wisMod',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('conMod', {
            'name': 'conMod',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('chaMod', {
            'name': 'chaMod',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('strSave', {
            'name': 'strSave',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('intSave', {
            'name': 'intSave',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('dexSave', {
            'name': 'dexSave',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('wisSave', {
            'name': 'wisSave',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('conSave', {
            'name': 'conSave',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('chaSave', {
            'name': 'chaSave',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('proficient', {
            'name': 'proficient',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('expertise', {
            'name': 'expertise',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('vulnerabilities', {
            'name': 'vulnerabilities',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('slashing', {
            'name': 'slashing',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('immunitiesConditions', {
            'name': 'immunitiesConditions',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('immunitiesDamage', {
            'name': 'immunitiesDamage',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('blindsight', {
            'name': 'blindsight',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('darkvision', {
            'name': 'darkvision',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('truesight', {
            'name': 'truesight',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('tremorsense', {
            'name': 'tremorsense',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('passivePerception', {
            'name': 'passivePerception',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('languages', {
            'name': 'languages',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('cr', {
            'name': 'cr',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('xpVal', {
            'name': 'xpVal',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('pb', {
            'name': 'pb',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('traits', {
            'name': 'traits',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('legendaryResistanceCount', {
            'name': 'legendaryResistanceCount',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('numberOfAtk', {
            'name': 'numberOfAtk',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk1Type', {
            'name': 'atk1Type',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk1Mod', {
            'name': 'atk1Mod',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk1Range', {
            'name': 'atk1Range',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk1RangeShort', {
            'name': 'atk1RangeShort',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk1Dam', {
            'name': 'atk1Dam',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk1DamageType', {
            'name': 'atk1DamageType',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk2Type', {
            'name': 'atk2Type',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk2Mod', {
            'name': 'atk2Mod',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk2Range', {
            'name': 'atk2Range',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk2RangeShort', {
            'name': 'atk2RangeShort',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk2Dam', {
            'name': 'atk2Dam',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk2DamageType', {
            'name': 'atk2DamageType',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk3Type', {
            'name': 'atk3Type',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk3Mod', {
            'name': 'atk3Mod',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk3Range', {
            'name': 'atk3Range',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk3RangeShort', {
            'name': 'atk3RangeShort',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk3Dam', {
            'name': 'atk3Dam',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk3DamageType', {
            'name': 'atk3DamageType',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk4Type', {
            'name': 'atk4Type',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk4Mod', {
            'name': 'atk4Mod',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk4Range', {
            'name': 'atk4Range',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk4RangeShort', {
            'name': 'atk4RangeShort',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk4Dam', {
            'name': 'atk4Dam',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atk4DamageType', {
            'name': 'atk4DamageType',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('saveDC', {
            'name': 'saveDC',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('savingThrow', {
            'name': 'savingThrow',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('actionNotes', {
            'name': 'actionNotes',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('ability', {
            'name': 'ability',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('spellSaveDC', {
            'name': 'spellSaveDC',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('spellSavingThrows', {
            'name': 'spellSavingThrows',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('spellAttack', {
            'name': 'spellAttack',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('atWillSpells', {
            'name': 'atWillSpells',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('threePerDaySpells', {
            'name': 'threePerDaySpells',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('twoPerDaySpells', {
            'name': 'twoPerDaySpells',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('onePerDaySpells', {
            'name': 'onePerDaySpells',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('bonusAction', {
            'name': 'bonusAction',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('reaction', {
            'name': 'reaction',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('amount', {
            'name': 'amount',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('legendaryActionSaveDC', {
            'name': 'legendaryActionSaveDC',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('legendaryActionSavingThrow', {
            'name': 'legendaryActionSavingThrow',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('legendaryActions', {
            'name': 'legendaryActions',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('lair', {
            'name': 'lair',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('xpLair', {
            'name': 'xpLair',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('legendaryResistance', {
            'name': 'legendaryResistance',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('legendaryActionsLair', {
            'name': 'legendaryActionsLair',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('lairSaveDC', {
            'name': 'lairSaveDC',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('lairSavingThrows', {
            'name': 'lairSavingThrows',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('other', {
            'name': 'other',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('align', {
            'name': 'align',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('speeds', {
            'name': 'speeds',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('strScore', {
            'name': 'strScore',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('dexScore', {
            'name': 'dexScore',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('conScore', {
            'name': 'conScore',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('intScore', {
            'name': 'intScore',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('wisScore', {
            'name': 'wisScore',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('chaScore', {
            'name': 'chaScore',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('savThrows', {
            'name': 'savThrows',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('skills', {
            'name': 'skills',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('wri', {
            'name': 'wri',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('senses', {
            'name': 'senses',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('additional', {
            'name': 'additional',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('font', {
            'name': 'font',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('additionalInfo', {
            'name': 'additionalInfo',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('author', {
            'name': 'author',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Race_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_Race_fields: Dict['types.RaceKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('race', {
            'name': 'race',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('str', {
            'name': 'str',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('dex', {
            'name': 'dex',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('con', {
            'name': 'con',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('int', {
            'name': 'int',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('wis', {
            'name': 'wis',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('cha', {
            'name': 'cha',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('special', {
            'name': 'special',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('source', {
            'name': 'source',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('notes', {
            'name': 'notes',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Spell_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_Spell_fields: Dict['types.SpellKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('level', {
            'name': 'level',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('school', {
            'name': 'school',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('castingTime', {
            'name': 'castingTime',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('duration', {
            'name': 'duration',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('range', {
            'name': 'range',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('area', {
            'name': 'area',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('attack', {
            'name': 'attack',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('save', {
            'name': 'save',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('damageEffect', {
            'name': 'damageEffect',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('ritual', {
            'name': 'ritual',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('concentration', {
            'name': 'concentration',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('verbal', {
            'name': 'verbal',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('somatic', {
            'name': 'somatic',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('material', {
            'name': 'material',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('materialDetails', {
            'name': 'materialDetails',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('source', {
            'name': 'source',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('details', {
            'name': 'details',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('link', {
            'name': 'link',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_PlayerClass_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_PlayerClass_fields: Dict['types.PlayerClassKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('Playerclass', {
            'name': 'Playerclass',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('subclass', {
            'name': 'subclass',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('source', {
            'name': 'source',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('notes', {
            'name': 'notes',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('features', {
            'name': 'features',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('level', {
            'name': 'level',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_MagicItem_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_MagicItem_fields: Dict['types.MagicItemKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('rarity', {
            'name': 'rarity',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('attunement', {
            'name': 'attunement',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('costGp', {
            'name': 'costGp',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('note', {
            'name': 'note',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('armorCost', {
            'name': 'armorCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('rareMaterial', {
            'name': 'rareMaterial',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('acBonus', {
            'name': 'acBonus',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('saveBonus', {
            'name': 'saveBonus',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('setScoreModifier', {
            'name': 'setScoreModifier',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('plusTwoBonusToScore', {
            'name': 'plusTwoBonusToScore',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('weaponBonus', {
            'name': 'weaponBonus',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('spellLevel', {
            'name': 'spellLevel',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('unlimitedCharges', {
            'name': 'unlimitedCharges',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('chargesPerDay', {
            'name': 'chargesPerDay',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('chargesPerItem', {
            'name': 'chargesPerItem',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('spellsShareCharges', {
            'name': 'spellsShareCharges',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('condition', {
            'name': 'condition',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('consumableDamageAvg', {
            'name': 'consumableDamageAvg',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('consumableSave', {
            'name': 'consumableSave',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('semiPermanentDamageAvg', {
            'name': 'semiPermanentDamageAvg',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('semiPermSave', {
            'name': 'semiPermSave',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('durationMinutes', {
            'name': 'durationMinutes',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('permanentDamageAvg', {
            'name': 'permanentDamageAvg',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('permSave', {
            'name': 'permSave',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('specificSituations', {
            'name': 'specificSituations',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('restoreHpAvg', {
            'name': 'restoreHpAvg',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('miscCosts', {
            'name': 'miscCosts',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('secondSpellLevel', {
            'name': 'secondSpellLevel',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('secondUnlimitedCharges', {
            'name': 'secondUnlimitedCharges',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('secondChargesPerDay', {
            'name': 'secondChargesPerDay',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('thirdSpellLevel', {
            'name': 'thirdSpellLevel',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('thirdUnlimitedCharges', {
            'name': 'thirdUnlimitedCharges',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('thirdChargesPerDay', {
            'name': 'thirdChargesPerDay',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('matCost', {
            'name': 'matCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('acCost', {
            'name': 'acCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('saveCost', {
            'name': 'saveCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('setScoreCost', {
            'name': 'setScoreCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('bonusScoreCost', {
            'name': 'bonusScoreCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('weaponCost', {
            'name': 'weaponCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('consumSpellCost', {
            'name': 'consumSpellCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('permChargesCost', {
            'name': 'permChargesCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('chargesDestroyed', {
            'name': 'chargesDestroyed',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('spellShareChargesCost', {
            'name': 'spellShareChargesCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('conditionCost', {
            'name': 'conditionCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('consDMGCost', {
            'name': 'consDMGCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('smPrDMGCost', {
            'name': 'smPrDMGCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('perDMGCost', {
            'name': 'perDMGCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('avgHPCost', {
            'name': 'avgHPCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('miscCost', {
            'name': 'miscCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('secondConsumSpellCost', {
            'name': 'secondConsumSpellCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('secondPermChargesCost', {
            'name': 'secondPermChargesCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('thirdConsumSpellCost', {
            'name': 'thirdConsumSpellCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('thirdPermChargesCost', {
            'name': 'thirdPermChargesCost',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_GeneralEquipment_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_GeneralEquipment_fields: Dict['types.GeneralEquipmentKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('cost', {
            'name': 'cost',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('weightLbs', {
            'name': 'weightLbs',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)



# we have to import ourselves as relation types are namespaced to models
# e.g. models.Post
from . import models, actions

# required to support relationships between models
model_rebuild(Monster)
model_rebuild(Race)
model_rebuild(Spell)
model_rebuild(PlayerClass)
model_rebuild(MagicItem)
model_rebuild(GeneralEquipment)
