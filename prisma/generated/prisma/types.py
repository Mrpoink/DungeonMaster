# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# CHARACTERVECTOR types

class CHARACTERVECTOROptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the CHARACTERVECTOR create method"""
    id: _int


class CHARACTERVECTORCreateInput(CHARACTERVECTOROptionalCreateInput):
    """Required arguments to the CHARACTERVECTOR create method"""
    text: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CHARACTERVECTOROptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the CHARACTERVECTOR create method, without relations"""
    id: _int


class CHARACTERVECTORCreateWithoutRelationsInput(CHARACTERVECTOROptionalCreateWithoutRelationsInput):
    """Required arguments to the CHARACTERVECTOR create method, without relations"""
    text: _str

class CHARACTERVECTORConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CHARACTERVECTORCreateWithoutRelationsInput'
    where: 'CHARACTERVECTORWhereUniqueInput'

class CHARACTERVECTORCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CHARACTERVECTORCreateWithoutRelationsInput'
    connect: 'CHARACTERVECTORWhereUniqueInput'
    connect_or_create: 'CHARACTERVECTORConnectOrCreateWithoutRelationsInput'


class CHARACTERVECTORCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CHARACTERVECTORCreateWithoutRelationsInput', List['CHARACTERVECTORCreateWithoutRelationsInput']]
    connect: Union['CHARACTERVECTORWhereUniqueInput', List['CHARACTERVECTORWhereUniqueInput']]
    connect_or_create: Union['CHARACTERVECTORConnectOrCreateWithoutRelationsInput', List['CHARACTERVECTORConnectOrCreateWithoutRelationsInput']]

_CHARACTERVECTORWhereUnique_id_Input = TypedDict(
    '_CHARACTERVECTORWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

CHARACTERVECTORWhereUniqueInput = _CHARACTERVECTORWhereUnique_id_Input


class CHARACTERVECTORUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    text: _str


class CHARACTERVECTORUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    text: _str


class CHARACTERVECTORUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CHARACTERVECTORCreateWithoutRelationsInput']
    connect: List['CHARACTERVECTORWhereUniqueInput']
    connect_or_create: List['CHARACTERVECTORConnectOrCreateWithoutRelationsInput']
    set: List['CHARACTERVECTORWhereUniqueInput']
    disconnect: List['CHARACTERVECTORWhereUniqueInput']
    delete: List['CHARACTERVECTORWhereUniqueInput']

    # TODO
    # update: List['CHARACTERVECTORUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CHARACTERVECTORUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CHARACTERVECTORScalarWhereInput']
    # upsert: List['CHARACTERVECTORUpserteWithWhereUniqueWithoutRelationsInput']


class CHARACTERVECTORUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CHARACTERVECTORCreateWithoutRelationsInput'
    connect: 'CHARACTERVECTORWhereUniqueInput'
    connect_or_create: 'CHARACTERVECTORConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CHARACTERVECTORUpdateInput'
    # upsert: 'CHARACTERVECTORUpsertWithoutRelationsInput'


class CHARACTERVECTORUpsertInput(TypedDict):
    create: 'CHARACTERVECTORCreateInput'
    update: 'CHARACTERVECTORUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_CHARACTERVECTOR_id_OrderByInput = TypedDict(
    '_CHARACTERVECTOR_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_CHARACTERVECTOR_text_OrderByInput = TypedDict(
    '_CHARACTERVECTOR_text_OrderByInput',
    {
        'text': 'SortOrder',
    },
    total=True
)

_CHARACTERVECTOR_RelevanceInner = TypedDict(
    '_CHARACTERVECTOR_RelevanceInner',
    {
        'fields': 'List[CHARACTERVECTORScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_CHARACTERVECTOR_RelevanceOrderByInput = TypedDict(
    '_CHARACTERVECTOR_RelevanceOrderByInput',
    {
        '_relevance': '_CHARACTERVECTOR_RelevanceInner',
    },
    total=True
)

CHARACTERVECTOROrderByInput = Union[
    '_CHARACTERVECTOR_id_OrderByInput',
    '_CHARACTERVECTOR_text_OrderByInput',
    '_CHARACTERVECTOR_RelevanceOrderByInput',
]



# recursive CHARACTERVECTOR types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CHARACTERVECTORRelationFilter = TypedDict(
    'CHARACTERVECTORRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CHARACTERVECTORListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CHARACTERVECTORInclude(TypedDict, total=False):
    """CHARACTERVECTOR relational arguments"""


    

class CHARACTERVECTORIncludeFromCHARACTERVECTOR(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""

    

class CHARACTERVECTORArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class CHARACTERVECTORArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class CHARACTERVECTORArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class CHARACTERVECTORArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class CHARACTERVECTORArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    
    

class FindManyCHARACTERVECTORArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class FindManyCHARACTERVECTORArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class FindManyCHARACTERVECTORArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class FindManyCHARACTERVECTORArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class FindManyCHARACTERVECTORArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    
    

class ClassesIncludeFromCHARACTERVECTOR(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class ClassesIncludeFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class ClassesIncludeFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class ClassesIncludeFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class ClassesIncludeFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""

    

class ClassesArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive1'


class ClassesArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive2'


class ClassesArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive3'


class ClassesArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive4'


class ClassesArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    
    

class FindManyClassesArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive1'


class FindManyClassesArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive2'


class FindManyClassesArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive3'


class FindManyClassesArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive4'


class FindManyClassesArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    
    

class GeneralEquipmentIncludeFromCHARACTERVECTOR(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class GeneralEquipmentIncludeFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class GeneralEquipmentIncludeFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class GeneralEquipmentIncludeFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class GeneralEquipmentIncludeFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""

    

class GeneralEquipmentArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class GeneralEquipmentArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class GeneralEquipmentArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class GeneralEquipmentArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class GeneralEquipmentArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    
    

class FindManyGeneralEquipmentArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class FindManyGeneralEquipmentArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class FindManyGeneralEquipmentArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class FindManyGeneralEquipmentArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class FindManyGeneralEquipmentArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    
    

class ITEMSVECTORIncludeFromCHARACTERVECTOR(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class ITEMSVECTORIncludeFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class ITEMSVECTORIncludeFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class ITEMSVECTORIncludeFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class ITEMSVECTORIncludeFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""

    

class ITEMSVECTORArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class ITEMSVECTORArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class ITEMSVECTORArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class ITEMSVECTORArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class ITEMSVECTORArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    
    

class FindManyITEMSVECTORArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class FindManyITEMSVECTORArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class FindManyITEMSVECTORArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class FindManyITEMSVECTORArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class FindManyITEMSVECTORArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    
    

class MONSTERVECTORIncludeFromCHARACTERVECTOR(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class MONSTERVECTORIncludeFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class MONSTERVECTORIncludeFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class MONSTERVECTORIncludeFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class MONSTERVECTORIncludeFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""

    

class MONSTERVECTORArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class MONSTERVECTORArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class MONSTERVECTORArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class MONSTERVECTORArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class MONSTERVECTORArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    
    

class FindManyMONSTERVECTORArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class FindManyMONSTERVECTORArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class FindManyMONSTERVECTORArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class FindManyMONSTERVECTORArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class FindManyMONSTERVECTORArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    
    

class MagicItemIncludeFromCHARACTERVECTOR(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class MagicItemIncludeFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class MagicItemIncludeFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class MagicItemIncludeFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class MagicItemIncludeFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""

    

class MagicItemArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class MagicItemArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class MagicItemArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class MagicItemArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class MagicItemArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    
    

class FindManyMagicItemArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class FindManyMagicItemArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class FindManyMagicItemArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class FindManyMagicItemArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class FindManyMagicItemArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    
    

class MonsterIncludeFromCHARACTERVECTOR(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class MonsterIncludeFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class MonsterIncludeFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class MonsterIncludeFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class MonsterIncludeFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""

    

class MonsterArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive1'


class MonsterArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive2'


class MonsterArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive3'


class MonsterArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive4'


class MonsterArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    
    

class FindManyMonsterArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive1'


class FindManyMonsterArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive2'


class FindManyMonsterArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive3'


class FindManyMonsterArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive4'


class FindManyMonsterArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    
    

class RaceIncludeFromCHARACTERVECTOR(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class RaceIncludeFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class RaceIncludeFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class RaceIncludeFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class RaceIncludeFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""

    

class RaceArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'RaceIncludeFromRaceRecursive1'


class RaceArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'RaceIncludeFromRaceRecursive2'


class RaceArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'RaceIncludeFromRaceRecursive3'


class RaceArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'RaceIncludeFromRaceRecursive4'


class RaceArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    
    

class FindManyRaceArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive1'


class FindManyRaceArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive2'


class FindManyRaceArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive3'


class FindManyRaceArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive4'


class FindManyRaceArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    
    

class SESSIONIncludeFromCHARACTERVECTOR(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class SESSIONIncludeFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class SESSIONIncludeFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class SESSIONIncludeFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class SESSIONIncludeFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""

    

class SESSIONArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class SESSIONArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class SESSIONArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class SESSIONArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class SESSIONArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    
    

class FindManySESSIONArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class FindManySESSIONArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class FindManySESSIONArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class FindManySESSIONArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class FindManySESSIONArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    
    

class SPELLSVECTORIncludeFromCHARACTERVECTOR(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class SPELLSVECTORIncludeFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class SPELLSVECTORIncludeFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class SPELLSVECTORIncludeFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class SPELLSVECTORIncludeFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""

    

class SPELLSVECTORArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class SPELLSVECTORArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class SPELLSVECTORArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class SPELLSVECTORArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class SPELLSVECTORArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    
    

class FindManySPELLSVECTORArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class FindManySPELLSVECTORArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class FindManySPELLSVECTORArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class FindManySPELLSVECTORArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class FindManySPELLSVECTORArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    
    

class SpellIncludeFromCHARACTERVECTOR(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class SpellIncludeFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class SpellIncludeFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class SpellIncludeFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class SpellIncludeFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""

    

class SpellArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'SpellIncludeFromSpellRecursive1'


class SpellArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'SpellIncludeFromSpellRecursive2'


class SpellArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'SpellIncludeFromSpellRecursive3'


class SpellArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'SpellIncludeFromSpellRecursive4'


class SpellArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    
    

class FindManySpellArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive1'


class FindManySpellArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive2'


class FindManySpellArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive3'


class FindManySpellArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive4'


class FindManySpellArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    
    

class USERDATAIncludeFromCHARACTERVECTOR(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class USERDATAIncludeFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class USERDATAIncludeFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class USERDATAIncludeFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class USERDATAIncludeFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""

    

class USERDATAArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class USERDATAArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class USERDATAArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class USERDATAArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class USERDATAArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    
    

class FindManyUSERDATAArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class FindManyUSERDATAArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class FindManyUSERDATAArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class FindManyUSERDATAArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class FindManyUSERDATAArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    
    

class STORYVECTORIncludeFromCHARACTERVECTOR(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class STORYVECTORIncludeFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class STORYVECTORIncludeFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class STORYVECTORIncludeFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""


class STORYVECTORIncludeFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for CHARACTERVECTOR"""

    

class STORYVECTORArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class STORYVECTORArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class STORYVECTORArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class STORYVECTORArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class STORYVECTORArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    
    

class FindManySTORYVECTORArgsFromCHARACTERVECTOR(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class FindManySTORYVECTORArgsFromCHARACTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class FindManySTORYVECTORArgsFromCHARACTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class FindManySTORYVECTORArgsFromCHARACTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class FindManySTORYVECTORArgsFromCHARACTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for CHARACTERVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    


FindManyCHARACTERVECTORArgs = FindManyCHARACTERVECTORArgsFromCHARACTERVECTOR
FindFirstCHARACTERVECTORArgs = FindManyCHARACTERVECTORArgsFromCHARACTERVECTOR


    

class CHARACTERVECTORWhereInput(TypedDict, total=False):
    """CHARACTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['CHARACTERVECTORWhereInputRecursive1', List['CHARACTERVECTORWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CHARACTERVECTORWhereInputRecursive1']
    OR: List['CHARACTERVECTORWhereInputRecursive1']
    NOT: List['CHARACTERVECTORWhereInputRecursive1']


class CHARACTERVECTORWhereInputRecursive1(TypedDict, total=False):
    """CHARACTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['CHARACTERVECTORWhereInputRecursive2', List['CHARACTERVECTORWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CHARACTERVECTORWhereInputRecursive2']
    OR: List['CHARACTERVECTORWhereInputRecursive2']
    NOT: List['CHARACTERVECTORWhereInputRecursive2']


class CHARACTERVECTORWhereInputRecursive2(TypedDict, total=False):
    """CHARACTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['CHARACTERVECTORWhereInputRecursive3', List['CHARACTERVECTORWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CHARACTERVECTORWhereInputRecursive3']
    OR: List['CHARACTERVECTORWhereInputRecursive3']
    NOT: List['CHARACTERVECTORWhereInputRecursive3']


class CHARACTERVECTORWhereInputRecursive3(TypedDict, total=False):
    """CHARACTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['CHARACTERVECTORWhereInputRecursive4', List['CHARACTERVECTORWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CHARACTERVECTORWhereInputRecursive4']
    OR: List['CHARACTERVECTORWhereInputRecursive4']
    NOT: List['CHARACTERVECTORWhereInputRecursive4']


class CHARACTERVECTORWhereInputRecursive4(TypedDict, total=False):
    """CHARACTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']



# aggregate CHARACTERVECTOR types


    

class CHARACTERVECTORScalarWhereWithAggregatesInput(TypedDict, total=False):
    """CHARACTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CHARACTERVECTORScalarWhereWithAggregatesInputRecursive1']
    OR: List['CHARACTERVECTORScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CHARACTERVECTORScalarWhereWithAggregatesInputRecursive1']


class CHARACTERVECTORScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """CHARACTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CHARACTERVECTORScalarWhereWithAggregatesInputRecursive2']
    OR: List['CHARACTERVECTORScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CHARACTERVECTORScalarWhereWithAggregatesInputRecursive2']


class CHARACTERVECTORScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """CHARACTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CHARACTERVECTORScalarWhereWithAggregatesInputRecursive3']
    OR: List['CHARACTERVECTORScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CHARACTERVECTORScalarWhereWithAggregatesInputRecursive3']


class CHARACTERVECTORScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """CHARACTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CHARACTERVECTORScalarWhereWithAggregatesInputRecursive4']
    OR: List['CHARACTERVECTORScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CHARACTERVECTORScalarWhereWithAggregatesInputRecursive4']


class CHARACTERVECTORScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """CHARACTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']



class CHARACTERVECTORGroupByOutput(TypedDict, total=False):
    id: _int
    text: _str
    _sum: 'CHARACTERVECTORSumAggregateOutput'
    _avg: 'CHARACTERVECTORAvgAggregateOutput'
    _min: 'CHARACTERVECTORMinAggregateOutput'
    _max: 'CHARACTERVECTORMaxAggregateOutput'
    _count: 'CHARACTERVECTORCountAggregateOutput'


class CHARACTERVECTORAvgAggregateOutput(TypedDict, total=False):
    """CHARACTERVECTOR output for aggregating averages"""
    id: float


class CHARACTERVECTORSumAggregateOutput(TypedDict, total=False):
    """CHARACTERVECTOR output for aggregating sums"""
    id: _int


class CHARACTERVECTORScalarAggregateOutput(TypedDict, total=False):
    """CHARACTERVECTOR output including scalar fields"""
    id: _int
    text: _str


CHARACTERVECTORMinAggregateOutput = CHARACTERVECTORScalarAggregateOutput
CHARACTERVECTORMaxAggregateOutput = CHARACTERVECTORScalarAggregateOutput


class CHARACTERVECTORMaxAggregateInput(TypedDict, total=False):
    """CHARACTERVECTOR input for aggregating by max"""
    id: bool
    text: bool


class CHARACTERVECTORMinAggregateInput(TypedDict, total=False):
    """CHARACTERVECTOR input for aggregating by min"""
    id: bool
    text: bool


class CHARACTERVECTORNumberAggregateInput(TypedDict, total=False):
    """CHARACTERVECTOR input for aggregating numbers"""
    id: bool


CHARACTERVECTORAvgAggregateInput = CHARACTERVECTORNumberAggregateInput
CHARACTERVECTORSumAggregateInput = CHARACTERVECTORNumberAggregateInput


CHARACTERVECTORCountAggregateInput = TypedDict(
    'CHARACTERVECTORCountAggregateInput',
    {
        'id': bool,
        'text': bool,
        '_all': bool,
    },
    total=False,
)

CHARACTERVECTORCountAggregateOutput = TypedDict(
    'CHARACTERVECTORCountAggregateOutput',
    {
        'id': int,
        'text': int,
        '_all': int,
    },
    total=False,
)


CHARACTERVECTORKeys = Literal[
    'id',
    'text',
]
CHARACTERVECTORScalarFieldKeys = Literal[
    'id',
    'text',
]
CHARACTERVECTORScalarFieldKeysT = TypeVar('CHARACTERVECTORScalarFieldKeysT', bound=CHARACTERVECTORScalarFieldKeys)

CHARACTERVECTORRelationalFieldKeys = _NoneType

# Classes types

class ClassesOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Classes create method"""
    id: _int
    source: Optional[_str]
    notes: Optional[_str]
    features: Optional[_str]
    level: Optional[_str]
    description: Optional[_str]


class ClassesCreateInput(ClassesOptionalCreateInput):
    """Required arguments to the Classes create method"""
    reg_class: _str
    subclass: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ClassesOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Classes create method, without relations"""
    id: _int
    source: Optional[_str]
    notes: Optional[_str]
    features: Optional[_str]
    level: Optional[_str]
    description: Optional[_str]


class ClassesCreateWithoutRelationsInput(ClassesOptionalCreateWithoutRelationsInput):
    """Required arguments to the Classes create method, without relations"""
    reg_class: _str
    subclass: _str

class ClassesConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ClassesCreateWithoutRelationsInput'
    where: 'ClassesWhereUniqueInput'

class ClassesCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ClassesCreateWithoutRelationsInput'
    connect: 'ClassesWhereUniqueInput'
    connect_or_create: 'ClassesConnectOrCreateWithoutRelationsInput'


class ClassesCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ClassesCreateWithoutRelationsInput', List['ClassesCreateWithoutRelationsInput']]
    connect: Union['ClassesWhereUniqueInput', List['ClassesWhereUniqueInput']]
    connect_or_create: Union['ClassesConnectOrCreateWithoutRelationsInput', List['ClassesConnectOrCreateWithoutRelationsInput']]

_ClassesWhereUnique_id_Input = TypedDict(
    '_ClassesWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ClassesWhereUniqueInput = _ClassesWhereUnique_id_Input


class ClassesUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    reg_class: _str
    subclass: _str
    source: Optional[_str]
    notes: Optional[_str]
    features: Optional[_str]
    level: Optional[_str]
    description: Optional[_str]


class ClassesUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    reg_class: _str
    subclass: _str
    source: Optional[_str]
    notes: Optional[_str]
    features: Optional[_str]
    level: Optional[_str]
    description: Optional[_str]


class ClassesUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ClassesCreateWithoutRelationsInput']
    connect: List['ClassesWhereUniqueInput']
    connect_or_create: List['ClassesConnectOrCreateWithoutRelationsInput']
    set: List['ClassesWhereUniqueInput']
    disconnect: List['ClassesWhereUniqueInput']
    delete: List['ClassesWhereUniqueInput']

    # TODO
    # update: List['ClassesUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ClassesUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ClassesScalarWhereInput']
    # upsert: List['ClassesUpserteWithWhereUniqueWithoutRelationsInput']


class ClassesUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ClassesCreateWithoutRelationsInput'
    connect: 'ClassesWhereUniqueInput'
    connect_or_create: 'ClassesConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ClassesUpdateInput'
    # upsert: 'ClassesUpsertWithoutRelationsInput'


class ClassesUpsertInput(TypedDict):
    create: 'ClassesCreateInput'
    update: 'ClassesUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Classes_id_OrderByInput = TypedDict(
    '_Classes_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Classes_reg_class_OrderByInput = TypedDict(
    '_Classes_reg_class_OrderByInput',
    {
        'reg_class': 'SortOrder',
    },
    total=True
)

_Classes_subclass_OrderByInput = TypedDict(
    '_Classes_subclass_OrderByInput',
    {
        'subclass': 'SortOrder',
    },
    total=True
)

_Classes_source_OrderByInput = TypedDict(
    '_Classes_source_OrderByInput',
    {
        'source': 'SortOrder',
    },
    total=True
)

_Classes_notes_OrderByInput = TypedDict(
    '_Classes_notes_OrderByInput',
    {
        'notes': 'SortOrder',
    },
    total=True
)

_Classes_features_OrderByInput = TypedDict(
    '_Classes_features_OrderByInput',
    {
        'features': 'SortOrder',
    },
    total=True
)

_Classes_level_OrderByInput = TypedDict(
    '_Classes_level_OrderByInput',
    {
        'level': 'SortOrder',
    },
    total=True
)

_Classes_description_OrderByInput = TypedDict(
    '_Classes_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Classes_RelevanceInner = TypedDict(
    '_Classes_RelevanceInner',
    {
        'fields': 'List[ClassesScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Classes_RelevanceOrderByInput = TypedDict(
    '_Classes_RelevanceOrderByInput',
    {
        '_relevance': '_Classes_RelevanceInner',
    },
    total=True
)

ClassesOrderByInput = Union[
    '_Classes_id_OrderByInput',
    '_Classes_reg_class_OrderByInput',
    '_Classes_subclass_OrderByInput',
    '_Classes_source_OrderByInput',
    '_Classes_notes_OrderByInput',
    '_Classes_features_OrderByInput',
    '_Classes_level_OrderByInput',
    '_Classes_description_OrderByInput',
    '_Classes_RelevanceOrderByInput',
]



# recursive Classes types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ClassesRelationFilter = TypedDict(
    'ClassesRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ClassesListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ClassesInclude(TypedDict, total=False):
    """Classes relational arguments"""


    

class CHARACTERVECTORIncludeFromClasses(TypedDict, total=False):
    """Relational arguments for Classes"""


class CHARACTERVECTORIncludeFromClassesRecursive1(TypedDict, total=False):
    """Relational arguments for Classes"""


class CHARACTERVECTORIncludeFromClassesRecursive2(TypedDict, total=False):
    """Relational arguments for Classes"""


class CHARACTERVECTORIncludeFromClassesRecursive3(TypedDict, total=False):
    """Relational arguments for Classes"""


class CHARACTERVECTORIncludeFromClassesRecursive4(TypedDict, total=False):
    """Relational arguments for Classes"""

    

class CHARACTERVECTORArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class CHARACTERVECTORArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class CHARACTERVECTORArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class CHARACTERVECTORArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class CHARACTERVECTORArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    
    

class FindManyCHARACTERVECTORArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class FindManyCHARACTERVECTORArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class FindManyCHARACTERVECTORArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class FindManyCHARACTERVECTORArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class FindManyCHARACTERVECTORArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    
    

class ClassesIncludeFromClasses(TypedDict, total=False):
    """Relational arguments for Classes"""


class ClassesIncludeFromClassesRecursive1(TypedDict, total=False):
    """Relational arguments for Classes"""


class ClassesIncludeFromClassesRecursive2(TypedDict, total=False):
    """Relational arguments for Classes"""


class ClassesIncludeFromClassesRecursive3(TypedDict, total=False):
    """Relational arguments for Classes"""


class ClassesIncludeFromClassesRecursive4(TypedDict, total=False):
    """Relational arguments for Classes"""

    

class ClassesArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'ClassesIncludeFromClassesRecursive1'


class ClassesArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'ClassesIncludeFromClassesRecursive2'


class ClassesArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'ClassesIncludeFromClassesRecursive3'


class ClassesArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'ClassesIncludeFromClassesRecursive4'


class ClassesArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    
    

class FindManyClassesArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive1'


class FindManyClassesArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive2'


class FindManyClassesArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive3'


class FindManyClassesArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive4'


class FindManyClassesArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    
    

class GeneralEquipmentIncludeFromClasses(TypedDict, total=False):
    """Relational arguments for Classes"""


class GeneralEquipmentIncludeFromClassesRecursive1(TypedDict, total=False):
    """Relational arguments for Classes"""


class GeneralEquipmentIncludeFromClassesRecursive2(TypedDict, total=False):
    """Relational arguments for Classes"""


class GeneralEquipmentIncludeFromClassesRecursive3(TypedDict, total=False):
    """Relational arguments for Classes"""


class GeneralEquipmentIncludeFromClassesRecursive4(TypedDict, total=False):
    """Relational arguments for Classes"""

    

class GeneralEquipmentArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class GeneralEquipmentArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class GeneralEquipmentArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class GeneralEquipmentArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class GeneralEquipmentArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    
    

class FindManyGeneralEquipmentArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class FindManyGeneralEquipmentArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class FindManyGeneralEquipmentArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class FindManyGeneralEquipmentArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class FindManyGeneralEquipmentArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    
    

class ITEMSVECTORIncludeFromClasses(TypedDict, total=False):
    """Relational arguments for Classes"""


class ITEMSVECTORIncludeFromClassesRecursive1(TypedDict, total=False):
    """Relational arguments for Classes"""


class ITEMSVECTORIncludeFromClassesRecursive2(TypedDict, total=False):
    """Relational arguments for Classes"""


class ITEMSVECTORIncludeFromClassesRecursive3(TypedDict, total=False):
    """Relational arguments for Classes"""


class ITEMSVECTORIncludeFromClassesRecursive4(TypedDict, total=False):
    """Relational arguments for Classes"""

    

class ITEMSVECTORArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class ITEMSVECTORArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class ITEMSVECTORArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class ITEMSVECTORArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class ITEMSVECTORArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    
    

class FindManyITEMSVECTORArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class FindManyITEMSVECTORArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class FindManyITEMSVECTORArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class FindManyITEMSVECTORArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class FindManyITEMSVECTORArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    
    

class MONSTERVECTORIncludeFromClasses(TypedDict, total=False):
    """Relational arguments for Classes"""


class MONSTERVECTORIncludeFromClassesRecursive1(TypedDict, total=False):
    """Relational arguments for Classes"""


class MONSTERVECTORIncludeFromClassesRecursive2(TypedDict, total=False):
    """Relational arguments for Classes"""


class MONSTERVECTORIncludeFromClassesRecursive3(TypedDict, total=False):
    """Relational arguments for Classes"""


class MONSTERVECTORIncludeFromClassesRecursive4(TypedDict, total=False):
    """Relational arguments for Classes"""

    

class MONSTERVECTORArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class MONSTERVECTORArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class MONSTERVECTORArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class MONSTERVECTORArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class MONSTERVECTORArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    
    

class FindManyMONSTERVECTORArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class FindManyMONSTERVECTORArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class FindManyMONSTERVECTORArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class FindManyMONSTERVECTORArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class FindManyMONSTERVECTORArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    
    

class MagicItemIncludeFromClasses(TypedDict, total=False):
    """Relational arguments for Classes"""


class MagicItemIncludeFromClassesRecursive1(TypedDict, total=False):
    """Relational arguments for Classes"""


class MagicItemIncludeFromClassesRecursive2(TypedDict, total=False):
    """Relational arguments for Classes"""


class MagicItemIncludeFromClassesRecursive3(TypedDict, total=False):
    """Relational arguments for Classes"""


class MagicItemIncludeFromClassesRecursive4(TypedDict, total=False):
    """Relational arguments for Classes"""

    

class MagicItemArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class MagicItemArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class MagicItemArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class MagicItemArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class MagicItemArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    
    

class FindManyMagicItemArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class FindManyMagicItemArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class FindManyMagicItemArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class FindManyMagicItemArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class FindManyMagicItemArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    
    

class MonsterIncludeFromClasses(TypedDict, total=False):
    """Relational arguments for Classes"""


class MonsterIncludeFromClassesRecursive1(TypedDict, total=False):
    """Relational arguments for Classes"""


class MonsterIncludeFromClassesRecursive2(TypedDict, total=False):
    """Relational arguments for Classes"""


class MonsterIncludeFromClassesRecursive3(TypedDict, total=False):
    """Relational arguments for Classes"""


class MonsterIncludeFromClassesRecursive4(TypedDict, total=False):
    """Relational arguments for Classes"""

    

class MonsterArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'MonsterIncludeFromMonsterRecursive1'


class MonsterArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'MonsterIncludeFromMonsterRecursive2'


class MonsterArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'MonsterIncludeFromMonsterRecursive3'


class MonsterArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'MonsterIncludeFromMonsterRecursive4'


class MonsterArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    
    

class FindManyMonsterArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive1'


class FindManyMonsterArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive2'


class FindManyMonsterArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive3'


class FindManyMonsterArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive4'


class FindManyMonsterArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    
    

class RaceIncludeFromClasses(TypedDict, total=False):
    """Relational arguments for Classes"""


class RaceIncludeFromClassesRecursive1(TypedDict, total=False):
    """Relational arguments for Classes"""


class RaceIncludeFromClassesRecursive2(TypedDict, total=False):
    """Relational arguments for Classes"""


class RaceIncludeFromClassesRecursive3(TypedDict, total=False):
    """Relational arguments for Classes"""


class RaceIncludeFromClassesRecursive4(TypedDict, total=False):
    """Relational arguments for Classes"""

    

class RaceArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'RaceIncludeFromRaceRecursive1'


class RaceArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'RaceIncludeFromRaceRecursive2'


class RaceArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'RaceIncludeFromRaceRecursive3'


class RaceArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'RaceIncludeFromRaceRecursive4'


class RaceArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    
    

class FindManyRaceArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive1'


class FindManyRaceArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive2'


class FindManyRaceArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive3'


class FindManyRaceArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive4'


class FindManyRaceArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    
    

class SESSIONIncludeFromClasses(TypedDict, total=False):
    """Relational arguments for Classes"""


class SESSIONIncludeFromClassesRecursive1(TypedDict, total=False):
    """Relational arguments for Classes"""


class SESSIONIncludeFromClassesRecursive2(TypedDict, total=False):
    """Relational arguments for Classes"""


class SESSIONIncludeFromClassesRecursive3(TypedDict, total=False):
    """Relational arguments for Classes"""


class SESSIONIncludeFromClassesRecursive4(TypedDict, total=False):
    """Relational arguments for Classes"""

    

class SESSIONArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class SESSIONArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class SESSIONArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class SESSIONArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class SESSIONArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    
    

class FindManySESSIONArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class FindManySESSIONArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class FindManySESSIONArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class FindManySESSIONArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class FindManySESSIONArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    
    

class SPELLSVECTORIncludeFromClasses(TypedDict, total=False):
    """Relational arguments for Classes"""


class SPELLSVECTORIncludeFromClassesRecursive1(TypedDict, total=False):
    """Relational arguments for Classes"""


class SPELLSVECTORIncludeFromClassesRecursive2(TypedDict, total=False):
    """Relational arguments for Classes"""


class SPELLSVECTORIncludeFromClassesRecursive3(TypedDict, total=False):
    """Relational arguments for Classes"""


class SPELLSVECTORIncludeFromClassesRecursive4(TypedDict, total=False):
    """Relational arguments for Classes"""

    

class SPELLSVECTORArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class SPELLSVECTORArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class SPELLSVECTORArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class SPELLSVECTORArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class SPELLSVECTORArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    
    

class FindManySPELLSVECTORArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class FindManySPELLSVECTORArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class FindManySPELLSVECTORArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class FindManySPELLSVECTORArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class FindManySPELLSVECTORArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    
    

class SpellIncludeFromClasses(TypedDict, total=False):
    """Relational arguments for Classes"""


class SpellIncludeFromClassesRecursive1(TypedDict, total=False):
    """Relational arguments for Classes"""


class SpellIncludeFromClassesRecursive2(TypedDict, total=False):
    """Relational arguments for Classes"""


class SpellIncludeFromClassesRecursive3(TypedDict, total=False):
    """Relational arguments for Classes"""


class SpellIncludeFromClassesRecursive4(TypedDict, total=False):
    """Relational arguments for Classes"""

    

class SpellArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'SpellIncludeFromSpellRecursive1'


class SpellArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'SpellIncludeFromSpellRecursive2'


class SpellArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'SpellIncludeFromSpellRecursive3'


class SpellArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'SpellIncludeFromSpellRecursive4'


class SpellArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    
    

class FindManySpellArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive1'


class FindManySpellArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive2'


class FindManySpellArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive3'


class FindManySpellArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive4'


class FindManySpellArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    
    

class USERDATAIncludeFromClasses(TypedDict, total=False):
    """Relational arguments for Classes"""


class USERDATAIncludeFromClassesRecursive1(TypedDict, total=False):
    """Relational arguments for Classes"""


class USERDATAIncludeFromClassesRecursive2(TypedDict, total=False):
    """Relational arguments for Classes"""


class USERDATAIncludeFromClassesRecursive3(TypedDict, total=False):
    """Relational arguments for Classes"""


class USERDATAIncludeFromClassesRecursive4(TypedDict, total=False):
    """Relational arguments for Classes"""

    

class USERDATAArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class USERDATAArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class USERDATAArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class USERDATAArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class USERDATAArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    
    

class FindManyUSERDATAArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class FindManyUSERDATAArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class FindManyUSERDATAArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class FindManyUSERDATAArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class FindManyUSERDATAArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    
    

class STORYVECTORIncludeFromClasses(TypedDict, total=False):
    """Relational arguments for Classes"""


class STORYVECTORIncludeFromClassesRecursive1(TypedDict, total=False):
    """Relational arguments for Classes"""


class STORYVECTORIncludeFromClassesRecursive2(TypedDict, total=False):
    """Relational arguments for Classes"""


class STORYVECTORIncludeFromClassesRecursive3(TypedDict, total=False):
    """Relational arguments for Classes"""


class STORYVECTORIncludeFromClassesRecursive4(TypedDict, total=False):
    """Relational arguments for Classes"""

    

class STORYVECTORArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class STORYVECTORArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class STORYVECTORArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class STORYVECTORArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class STORYVECTORArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    
    

class FindManySTORYVECTORArgsFromClasses(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class FindManySTORYVECTORArgsFromClassesRecursive1(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class FindManySTORYVECTORArgsFromClassesRecursive2(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class FindManySTORYVECTORArgsFromClassesRecursive3(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class FindManySTORYVECTORArgsFromClassesRecursive4(TypedDict, total=False):
    """Arguments for Classes"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    


FindManyClassesArgs = FindManyClassesArgsFromClasses
FindFirstClassesArgs = FindManyClassesArgsFromClasses


    

class ClassesWhereInput(TypedDict, total=False):
    """Classes arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    reg_class: Union[_str, 'types.StringFilter']
    subclass: Union[_str, 'types.StringFilter']
    source: Union[None, _str, 'types.StringFilter']
    notes: Union[None, _str, 'types.StringFilter']
    features: Union[None, _str, 'types.StringFilter']
    level: Union[None, _str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ClassesWhereInputRecursive1', List['ClassesWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ClassesWhereInputRecursive1']
    OR: List['ClassesWhereInputRecursive1']
    NOT: List['ClassesWhereInputRecursive1']


class ClassesWhereInputRecursive1(TypedDict, total=False):
    """Classes arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    reg_class: Union[_str, 'types.StringFilter']
    subclass: Union[_str, 'types.StringFilter']
    source: Union[None, _str, 'types.StringFilter']
    notes: Union[None, _str, 'types.StringFilter']
    features: Union[None, _str, 'types.StringFilter']
    level: Union[None, _str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ClassesWhereInputRecursive2', List['ClassesWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ClassesWhereInputRecursive2']
    OR: List['ClassesWhereInputRecursive2']
    NOT: List['ClassesWhereInputRecursive2']


class ClassesWhereInputRecursive2(TypedDict, total=False):
    """Classes arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    reg_class: Union[_str, 'types.StringFilter']
    subclass: Union[_str, 'types.StringFilter']
    source: Union[None, _str, 'types.StringFilter']
    notes: Union[None, _str, 'types.StringFilter']
    features: Union[None, _str, 'types.StringFilter']
    level: Union[None, _str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ClassesWhereInputRecursive3', List['ClassesWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ClassesWhereInputRecursive3']
    OR: List['ClassesWhereInputRecursive3']
    NOT: List['ClassesWhereInputRecursive3']


class ClassesWhereInputRecursive3(TypedDict, total=False):
    """Classes arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    reg_class: Union[_str, 'types.StringFilter']
    subclass: Union[_str, 'types.StringFilter']
    source: Union[None, _str, 'types.StringFilter']
    notes: Union[None, _str, 'types.StringFilter']
    features: Union[None, _str, 'types.StringFilter']
    level: Union[None, _str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ClassesWhereInputRecursive4', List['ClassesWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ClassesWhereInputRecursive4']
    OR: List['ClassesWhereInputRecursive4']
    NOT: List['ClassesWhereInputRecursive4']


class ClassesWhereInputRecursive4(TypedDict, total=False):
    """Classes arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    reg_class: Union[_str, 'types.StringFilter']
    subclass: Union[_str, 'types.StringFilter']
    source: Union[None, _str, 'types.StringFilter']
    notes: Union[None, _str, 'types.StringFilter']
    features: Union[None, _str, 'types.StringFilter']
    level: Union[None, _str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']



# aggregate Classes types


    

class ClassesScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Classes arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    reg_class: Union[_str, 'types.StringWithAggregatesFilter']
    subclass: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    features: Union[_str, 'types.StringWithAggregatesFilter']
    level: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ClassesScalarWhereWithAggregatesInputRecursive1']
    OR: List['ClassesScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ClassesScalarWhereWithAggregatesInputRecursive1']


class ClassesScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Classes arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    reg_class: Union[_str, 'types.StringWithAggregatesFilter']
    subclass: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    features: Union[_str, 'types.StringWithAggregatesFilter']
    level: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ClassesScalarWhereWithAggregatesInputRecursive2']
    OR: List['ClassesScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ClassesScalarWhereWithAggregatesInputRecursive2']


class ClassesScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Classes arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    reg_class: Union[_str, 'types.StringWithAggregatesFilter']
    subclass: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    features: Union[_str, 'types.StringWithAggregatesFilter']
    level: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ClassesScalarWhereWithAggregatesInputRecursive3']
    OR: List['ClassesScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ClassesScalarWhereWithAggregatesInputRecursive3']


class ClassesScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Classes arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    reg_class: Union[_str, 'types.StringWithAggregatesFilter']
    subclass: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    features: Union[_str, 'types.StringWithAggregatesFilter']
    level: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ClassesScalarWhereWithAggregatesInputRecursive4']
    OR: List['ClassesScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ClassesScalarWhereWithAggregatesInputRecursive4']


class ClassesScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Classes arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    reg_class: Union[_str, 'types.StringWithAggregatesFilter']
    subclass: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    features: Union[_str, 'types.StringWithAggregatesFilter']
    level: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']



class ClassesGroupByOutput(TypedDict, total=False):
    id: _int
    reg_class: _str
    subclass: _str
    source: _str
    notes: _str
    features: _str
    level: _str
    description: _str
    _sum: 'ClassesSumAggregateOutput'
    _avg: 'ClassesAvgAggregateOutput'
    _min: 'ClassesMinAggregateOutput'
    _max: 'ClassesMaxAggregateOutput'
    _count: 'ClassesCountAggregateOutput'


class ClassesAvgAggregateOutput(TypedDict, total=False):
    """Classes output for aggregating averages"""
    id: float


class ClassesSumAggregateOutput(TypedDict, total=False):
    """Classes output for aggregating sums"""
    id: _int


class ClassesScalarAggregateOutput(TypedDict, total=False):
    """Classes output including scalar fields"""
    id: _int
    reg_class: _str
    subclass: _str
    source: _str
    notes: _str
    features: _str
    level: _str
    description: _str


ClassesMinAggregateOutput = ClassesScalarAggregateOutput
ClassesMaxAggregateOutput = ClassesScalarAggregateOutput


class ClassesMaxAggregateInput(TypedDict, total=False):
    """Classes input for aggregating by max"""
    id: bool
    reg_class: bool
    subclass: bool
    source: bool
    notes: bool
    features: bool
    level: bool
    description: bool


class ClassesMinAggregateInput(TypedDict, total=False):
    """Classes input for aggregating by min"""
    id: bool
    reg_class: bool
    subclass: bool
    source: bool
    notes: bool
    features: bool
    level: bool
    description: bool


class ClassesNumberAggregateInput(TypedDict, total=False):
    """Classes input for aggregating numbers"""
    id: bool


ClassesAvgAggregateInput = ClassesNumberAggregateInput
ClassesSumAggregateInput = ClassesNumberAggregateInput


ClassesCountAggregateInput = TypedDict(
    'ClassesCountAggregateInput',
    {
        'id': bool,
        'reg_class': bool,
        'subclass': bool,
        'source': bool,
        'notes': bool,
        'features': bool,
        'level': bool,
        'description': bool,
        '_all': bool,
    },
    total=False,
)

ClassesCountAggregateOutput = TypedDict(
    'ClassesCountAggregateOutput',
    {
        'id': int,
        'reg_class': int,
        'subclass': int,
        'source': int,
        'notes': int,
        'features': int,
        'level': int,
        'description': int,
        '_all': int,
    },
    total=False,
)


ClassesKeys = Literal[
    'id',
    'reg_class',
    'subclass',
    'source',
    'notes',
    'features',
    'level',
    'description',
]
ClassesScalarFieldKeys = Literal[
    'id',
    'reg_class',
    'subclass',
    'source',
    'notes',
    'features',
    'level',
    'description',
]
ClassesScalarFieldKeysT = TypeVar('ClassesScalarFieldKeysT', bound=ClassesScalarFieldKeys)

ClassesRelationalFieldKeys = _NoneType

# GeneralEquipment types

class GeneralEquipmentOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the GeneralEquipment create method"""
    id: _int
    Weight__lbs_: Optional[_str]


class GeneralEquipmentCreateInput(GeneralEquipmentOptionalCreateInput):
    """Required arguments to the GeneralEquipment create method"""
    name: _str
    cost: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class GeneralEquipmentOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the GeneralEquipment create method, without relations"""
    id: _int
    Weight__lbs_: Optional[_str]


class GeneralEquipmentCreateWithoutRelationsInput(GeneralEquipmentOptionalCreateWithoutRelationsInput):
    """Required arguments to the GeneralEquipment create method, without relations"""
    name: _str
    cost: _str

class GeneralEquipmentConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'GeneralEquipmentCreateWithoutRelationsInput'
    where: 'GeneralEquipmentWhereUniqueInput'

class GeneralEquipmentCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'GeneralEquipmentCreateWithoutRelationsInput'
    connect: 'GeneralEquipmentWhereUniqueInput'
    connect_or_create: 'GeneralEquipmentConnectOrCreateWithoutRelationsInput'


class GeneralEquipmentCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['GeneralEquipmentCreateWithoutRelationsInput', List['GeneralEquipmentCreateWithoutRelationsInput']]
    connect: Union['GeneralEquipmentWhereUniqueInput', List['GeneralEquipmentWhereUniqueInput']]
    connect_or_create: Union['GeneralEquipmentConnectOrCreateWithoutRelationsInput', List['GeneralEquipmentConnectOrCreateWithoutRelationsInput']]

_GeneralEquipmentWhereUnique_id_Input = TypedDict(
    '_GeneralEquipmentWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_GeneralEquipmentWhereUnique_name_Input = TypedDict(
    '_GeneralEquipmentWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

GeneralEquipmentWhereUniqueInput = Union[
    '_GeneralEquipmentWhereUnique_id_Input',
    '_GeneralEquipmentWhereUnique_name_Input',
]


class GeneralEquipmentUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    cost: _str
    Weight__lbs_: Optional[_str]


class GeneralEquipmentUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    cost: _str
    Weight__lbs_: Optional[_str]


class GeneralEquipmentUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['GeneralEquipmentCreateWithoutRelationsInput']
    connect: List['GeneralEquipmentWhereUniqueInput']
    connect_or_create: List['GeneralEquipmentConnectOrCreateWithoutRelationsInput']
    set: List['GeneralEquipmentWhereUniqueInput']
    disconnect: List['GeneralEquipmentWhereUniqueInput']
    delete: List['GeneralEquipmentWhereUniqueInput']

    # TODO
    # update: List['GeneralEquipmentUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['GeneralEquipmentUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['GeneralEquipmentScalarWhereInput']
    # upsert: List['GeneralEquipmentUpserteWithWhereUniqueWithoutRelationsInput']


class GeneralEquipmentUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'GeneralEquipmentCreateWithoutRelationsInput'
    connect: 'GeneralEquipmentWhereUniqueInput'
    connect_or_create: 'GeneralEquipmentConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'GeneralEquipmentUpdateInput'
    # upsert: 'GeneralEquipmentUpsertWithoutRelationsInput'


class GeneralEquipmentUpsertInput(TypedDict):
    create: 'GeneralEquipmentCreateInput'
    update: 'GeneralEquipmentUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_GeneralEquipment_id_OrderByInput = TypedDict(
    '_GeneralEquipment_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_GeneralEquipment_name_OrderByInput = TypedDict(
    '_GeneralEquipment_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_GeneralEquipment_cost_OrderByInput = TypedDict(
    '_GeneralEquipment_cost_OrderByInput',
    {
        'cost': 'SortOrder',
    },
    total=True
)

_GeneralEquipment_Weight__lbs__OrderByInput = TypedDict(
    '_GeneralEquipment_Weight__lbs__OrderByInput',
    {
        'Weight__lbs_': 'SortOrder',
    },
    total=True
)

_GeneralEquipment_RelevanceInner = TypedDict(
    '_GeneralEquipment_RelevanceInner',
    {
        'fields': 'List[GeneralEquipmentScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_GeneralEquipment_RelevanceOrderByInput = TypedDict(
    '_GeneralEquipment_RelevanceOrderByInput',
    {
        '_relevance': '_GeneralEquipment_RelevanceInner',
    },
    total=True
)

GeneralEquipmentOrderByInput = Union[
    '_GeneralEquipment_id_OrderByInput',
    '_GeneralEquipment_name_OrderByInput',
    '_GeneralEquipment_cost_OrderByInput',
    '_GeneralEquipment_Weight__lbs__OrderByInput',
    '_GeneralEquipment_RelevanceOrderByInput',
]



# recursive GeneralEquipment types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

GeneralEquipmentRelationFilter = TypedDict(
    'GeneralEquipmentRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class GeneralEquipmentListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class GeneralEquipmentInclude(TypedDict, total=False):
    """GeneralEquipment relational arguments"""


    

class CHARACTERVECTORIncludeFromGeneralEquipment(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class CHARACTERVECTORIncludeFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class CHARACTERVECTORIncludeFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class CHARACTERVECTORIncludeFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class CHARACTERVECTORIncludeFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""

    

class CHARACTERVECTORArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class CHARACTERVECTORArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class CHARACTERVECTORArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class CHARACTERVECTORArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class CHARACTERVECTORArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    
    

class FindManyCHARACTERVECTORArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class FindManyCHARACTERVECTORArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class FindManyCHARACTERVECTORArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class FindManyCHARACTERVECTORArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class FindManyCHARACTERVECTORArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    
    

class ClassesIncludeFromGeneralEquipment(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class ClassesIncludeFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class ClassesIncludeFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class ClassesIncludeFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class ClassesIncludeFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""

    

class ClassesArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'ClassesIncludeFromClassesRecursive1'


class ClassesArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'ClassesIncludeFromClassesRecursive2'


class ClassesArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'ClassesIncludeFromClassesRecursive3'


class ClassesArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'ClassesIncludeFromClassesRecursive4'


class ClassesArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    
    

class FindManyClassesArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive1'


class FindManyClassesArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive2'


class FindManyClassesArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive3'


class FindManyClassesArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive4'


class FindManyClassesArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    
    

class GeneralEquipmentIncludeFromGeneralEquipment(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class GeneralEquipmentIncludeFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class GeneralEquipmentIncludeFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class GeneralEquipmentIncludeFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class GeneralEquipmentIncludeFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""

    

class GeneralEquipmentArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class GeneralEquipmentArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class GeneralEquipmentArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class GeneralEquipmentArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class GeneralEquipmentArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    
    

class FindManyGeneralEquipmentArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class FindManyGeneralEquipmentArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class FindManyGeneralEquipmentArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class FindManyGeneralEquipmentArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class FindManyGeneralEquipmentArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    
    

class ITEMSVECTORIncludeFromGeneralEquipment(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class ITEMSVECTORIncludeFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class ITEMSVECTORIncludeFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class ITEMSVECTORIncludeFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class ITEMSVECTORIncludeFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""

    

class ITEMSVECTORArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class ITEMSVECTORArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class ITEMSVECTORArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class ITEMSVECTORArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class ITEMSVECTORArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    
    

class FindManyITEMSVECTORArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class FindManyITEMSVECTORArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class FindManyITEMSVECTORArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class FindManyITEMSVECTORArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class FindManyITEMSVECTORArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    
    

class MONSTERVECTORIncludeFromGeneralEquipment(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class MONSTERVECTORIncludeFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class MONSTERVECTORIncludeFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class MONSTERVECTORIncludeFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class MONSTERVECTORIncludeFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""

    

class MONSTERVECTORArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class MONSTERVECTORArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class MONSTERVECTORArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class MONSTERVECTORArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class MONSTERVECTORArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    
    

class FindManyMONSTERVECTORArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class FindManyMONSTERVECTORArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class FindManyMONSTERVECTORArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class FindManyMONSTERVECTORArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class FindManyMONSTERVECTORArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    
    

class MagicItemIncludeFromGeneralEquipment(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class MagicItemIncludeFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class MagicItemIncludeFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class MagicItemIncludeFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class MagicItemIncludeFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""

    

class MagicItemArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class MagicItemArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class MagicItemArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class MagicItemArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class MagicItemArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    
    

class FindManyMagicItemArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class FindManyMagicItemArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class FindManyMagicItemArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class FindManyMagicItemArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class FindManyMagicItemArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    
    

class MonsterIncludeFromGeneralEquipment(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class MonsterIncludeFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class MonsterIncludeFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class MonsterIncludeFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class MonsterIncludeFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""

    

class MonsterArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'MonsterIncludeFromMonsterRecursive1'


class MonsterArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'MonsterIncludeFromMonsterRecursive2'


class MonsterArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'MonsterIncludeFromMonsterRecursive3'


class MonsterArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'MonsterIncludeFromMonsterRecursive4'


class MonsterArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    
    

class FindManyMonsterArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive1'


class FindManyMonsterArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive2'


class FindManyMonsterArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive3'


class FindManyMonsterArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive4'


class FindManyMonsterArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    
    

class RaceIncludeFromGeneralEquipment(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class RaceIncludeFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class RaceIncludeFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class RaceIncludeFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class RaceIncludeFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""

    

class RaceArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'RaceIncludeFromRaceRecursive1'


class RaceArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'RaceIncludeFromRaceRecursive2'


class RaceArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'RaceIncludeFromRaceRecursive3'


class RaceArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'RaceIncludeFromRaceRecursive4'


class RaceArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    
    

class FindManyRaceArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive1'


class FindManyRaceArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive2'


class FindManyRaceArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive3'


class FindManyRaceArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive4'


class FindManyRaceArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    
    

class SESSIONIncludeFromGeneralEquipment(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class SESSIONIncludeFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class SESSIONIncludeFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class SESSIONIncludeFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class SESSIONIncludeFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""

    

class SESSIONArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class SESSIONArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class SESSIONArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class SESSIONArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class SESSIONArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    
    

class FindManySESSIONArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class FindManySESSIONArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class FindManySESSIONArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class FindManySESSIONArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class FindManySESSIONArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    
    

class SPELLSVECTORIncludeFromGeneralEquipment(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class SPELLSVECTORIncludeFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class SPELLSVECTORIncludeFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class SPELLSVECTORIncludeFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class SPELLSVECTORIncludeFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""

    

class SPELLSVECTORArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class SPELLSVECTORArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class SPELLSVECTORArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class SPELLSVECTORArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class SPELLSVECTORArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    
    

class FindManySPELLSVECTORArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class FindManySPELLSVECTORArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class FindManySPELLSVECTORArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class FindManySPELLSVECTORArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class FindManySPELLSVECTORArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    
    

class SpellIncludeFromGeneralEquipment(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class SpellIncludeFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class SpellIncludeFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class SpellIncludeFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class SpellIncludeFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""

    

class SpellArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'SpellIncludeFromSpellRecursive1'


class SpellArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'SpellIncludeFromSpellRecursive2'


class SpellArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'SpellIncludeFromSpellRecursive3'


class SpellArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'SpellIncludeFromSpellRecursive4'


class SpellArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    
    

class FindManySpellArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive1'


class FindManySpellArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive2'


class FindManySpellArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive3'


class FindManySpellArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive4'


class FindManySpellArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    
    

class USERDATAIncludeFromGeneralEquipment(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class USERDATAIncludeFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class USERDATAIncludeFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class USERDATAIncludeFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class USERDATAIncludeFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""

    

class USERDATAArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class USERDATAArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class USERDATAArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class USERDATAArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class USERDATAArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    
    

class FindManyUSERDATAArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class FindManyUSERDATAArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class FindManyUSERDATAArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class FindManyUSERDATAArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class FindManyUSERDATAArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    
    

class STORYVECTORIncludeFromGeneralEquipment(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class STORYVECTORIncludeFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class STORYVECTORIncludeFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class STORYVECTORIncludeFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""


class STORYVECTORIncludeFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneralEquipment"""

    

class STORYVECTORArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class STORYVECTORArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class STORYVECTORArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class STORYVECTORArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class STORYVECTORArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    
    

class FindManySTORYVECTORArgsFromGeneralEquipment(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class FindManySTORYVECTORArgsFromGeneralEquipmentRecursive1(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class FindManySTORYVECTORArgsFromGeneralEquipmentRecursive2(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class FindManySTORYVECTORArgsFromGeneralEquipmentRecursive3(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class FindManySTORYVECTORArgsFromGeneralEquipmentRecursive4(TypedDict, total=False):
    """Arguments for GeneralEquipment"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    


FindManyGeneralEquipmentArgs = FindManyGeneralEquipmentArgsFromGeneralEquipment
FindFirstGeneralEquipmentArgs = FindManyGeneralEquipmentArgsFromGeneralEquipment


    

class GeneralEquipmentWhereInput(TypedDict, total=False):
    """GeneralEquipment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    cost: Union[_str, 'types.StringFilter']
    Weight__lbs_: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['GeneralEquipmentWhereInputRecursive1', List['GeneralEquipmentWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['GeneralEquipmentWhereInputRecursive1']
    OR: List['GeneralEquipmentWhereInputRecursive1']
    NOT: List['GeneralEquipmentWhereInputRecursive1']


class GeneralEquipmentWhereInputRecursive1(TypedDict, total=False):
    """GeneralEquipment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    cost: Union[_str, 'types.StringFilter']
    Weight__lbs_: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['GeneralEquipmentWhereInputRecursive2', List['GeneralEquipmentWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['GeneralEquipmentWhereInputRecursive2']
    OR: List['GeneralEquipmentWhereInputRecursive2']
    NOT: List['GeneralEquipmentWhereInputRecursive2']


class GeneralEquipmentWhereInputRecursive2(TypedDict, total=False):
    """GeneralEquipment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    cost: Union[_str, 'types.StringFilter']
    Weight__lbs_: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['GeneralEquipmentWhereInputRecursive3', List['GeneralEquipmentWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['GeneralEquipmentWhereInputRecursive3']
    OR: List['GeneralEquipmentWhereInputRecursive3']
    NOT: List['GeneralEquipmentWhereInputRecursive3']


class GeneralEquipmentWhereInputRecursive3(TypedDict, total=False):
    """GeneralEquipment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    cost: Union[_str, 'types.StringFilter']
    Weight__lbs_: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['GeneralEquipmentWhereInputRecursive4', List['GeneralEquipmentWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['GeneralEquipmentWhereInputRecursive4']
    OR: List['GeneralEquipmentWhereInputRecursive4']
    NOT: List['GeneralEquipmentWhereInputRecursive4']


class GeneralEquipmentWhereInputRecursive4(TypedDict, total=False):
    """GeneralEquipment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    cost: Union[_str, 'types.StringFilter']
    Weight__lbs_: Union[None, _str, 'types.StringFilter']



# aggregate GeneralEquipment types


    

class GeneralEquipmentScalarWhereWithAggregatesInput(TypedDict, total=False):
    """GeneralEquipment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    cost: Union[_str, 'types.StringWithAggregatesFilter']
    Weight__lbs_: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['GeneralEquipmentScalarWhereWithAggregatesInputRecursive1']
    OR: List['GeneralEquipmentScalarWhereWithAggregatesInputRecursive1']
    NOT: List['GeneralEquipmentScalarWhereWithAggregatesInputRecursive1']


class GeneralEquipmentScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """GeneralEquipment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    cost: Union[_str, 'types.StringWithAggregatesFilter']
    Weight__lbs_: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['GeneralEquipmentScalarWhereWithAggregatesInputRecursive2']
    OR: List['GeneralEquipmentScalarWhereWithAggregatesInputRecursive2']
    NOT: List['GeneralEquipmentScalarWhereWithAggregatesInputRecursive2']


class GeneralEquipmentScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """GeneralEquipment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    cost: Union[_str, 'types.StringWithAggregatesFilter']
    Weight__lbs_: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['GeneralEquipmentScalarWhereWithAggregatesInputRecursive3']
    OR: List['GeneralEquipmentScalarWhereWithAggregatesInputRecursive3']
    NOT: List['GeneralEquipmentScalarWhereWithAggregatesInputRecursive3']


class GeneralEquipmentScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """GeneralEquipment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    cost: Union[_str, 'types.StringWithAggregatesFilter']
    Weight__lbs_: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['GeneralEquipmentScalarWhereWithAggregatesInputRecursive4']
    OR: List['GeneralEquipmentScalarWhereWithAggregatesInputRecursive4']
    NOT: List['GeneralEquipmentScalarWhereWithAggregatesInputRecursive4']


class GeneralEquipmentScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """GeneralEquipment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    cost: Union[_str, 'types.StringWithAggregatesFilter']
    Weight__lbs_: Union[_str, 'types.StringWithAggregatesFilter']



class GeneralEquipmentGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    cost: _str
    Weight__lbs_: _str
    _sum: 'GeneralEquipmentSumAggregateOutput'
    _avg: 'GeneralEquipmentAvgAggregateOutput'
    _min: 'GeneralEquipmentMinAggregateOutput'
    _max: 'GeneralEquipmentMaxAggregateOutput'
    _count: 'GeneralEquipmentCountAggregateOutput'


class GeneralEquipmentAvgAggregateOutput(TypedDict, total=False):
    """GeneralEquipment output for aggregating averages"""
    id: float


class GeneralEquipmentSumAggregateOutput(TypedDict, total=False):
    """GeneralEquipment output for aggregating sums"""
    id: _int


class GeneralEquipmentScalarAggregateOutput(TypedDict, total=False):
    """GeneralEquipment output including scalar fields"""
    id: _int
    name: _str
    cost: _str
    Weight__lbs_: _str


GeneralEquipmentMinAggregateOutput = GeneralEquipmentScalarAggregateOutput
GeneralEquipmentMaxAggregateOutput = GeneralEquipmentScalarAggregateOutput


class GeneralEquipmentMaxAggregateInput(TypedDict, total=False):
    """GeneralEquipment input for aggregating by max"""
    id: bool
    name: bool
    cost: bool
    Weight__lbs_: bool


class GeneralEquipmentMinAggregateInput(TypedDict, total=False):
    """GeneralEquipment input for aggregating by min"""
    id: bool
    name: bool
    cost: bool
    Weight__lbs_: bool


class GeneralEquipmentNumberAggregateInput(TypedDict, total=False):
    """GeneralEquipment input for aggregating numbers"""
    id: bool


GeneralEquipmentAvgAggregateInput = GeneralEquipmentNumberAggregateInput
GeneralEquipmentSumAggregateInput = GeneralEquipmentNumberAggregateInput


GeneralEquipmentCountAggregateInput = TypedDict(
    'GeneralEquipmentCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'cost': bool,
        'Weight__lbs_': bool,
        '_all': bool,
    },
    total=False,
)

GeneralEquipmentCountAggregateOutput = TypedDict(
    'GeneralEquipmentCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'cost': int,
        'Weight__lbs_': int,
        '_all': int,
    },
    total=False,
)


GeneralEquipmentKeys = Literal[
    'id',
    'name',
    'cost',
    'Weight__lbs_',
]
GeneralEquipmentScalarFieldKeys = Literal[
    'id',
    'name',
    'cost',
    'Weight__lbs_',
]
GeneralEquipmentScalarFieldKeysT = TypeVar('GeneralEquipmentScalarFieldKeysT', bound=GeneralEquipmentScalarFieldKeys)

GeneralEquipmentRelationalFieldKeys = _NoneType

# ITEMSVECTOR types

class ITEMSVECTOROptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ITEMSVECTOR create method"""
    id: _int


class ITEMSVECTORCreateInput(ITEMSVECTOROptionalCreateInput):
    """Required arguments to the ITEMSVECTOR create method"""
    text: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ITEMSVECTOROptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ITEMSVECTOR create method, without relations"""
    id: _int


class ITEMSVECTORCreateWithoutRelationsInput(ITEMSVECTOROptionalCreateWithoutRelationsInput):
    """Required arguments to the ITEMSVECTOR create method, without relations"""
    text: _str

class ITEMSVECTORConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ITEMSVECTORCreateWithoutRelationsInput'
    where: 'ITEMSVECTORWhereUniqueInput'

class ITEMSVECTORCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ITEMSVECTORCreateWithoutRelationsInput'
    connect: 'ITEMSVECTORWhereUniqueInput'
    connect_or_create: 'ITEMSVECTORConnectOrCreateWithoutRelationsInput'


class ITEMSVECTORCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ITEMSVECTORCreateWithoutRelationsInput', List['ITEMSVECTORCreateWithoutRelationsInput']]
    connect: Union['ITEMSVECTORWhereUniqueInput', List['ITEMSVECTORWhereUniqueInput']]
    connect_or_create: Union['ITEMSVECTORConnectOrCreateWithoutRelationsInput', List['ITEMSVECTORConnectOrCreateWithoutRelationsInput']]

_ITEMSVECTORWhereUnique_id_Input = TypedDict(
    '_ITEMSVECTORWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ITEMSVECTORWhereUniqueInput = _ITEMSVECTORWhereUnique_id_Input


class ITEMSVECTORUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    text: _str


class ITEMSVECTORUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    text: _str


class ITEMSVECTORUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ITEMSVECTORCreateWithoutRelationsInput']
    connect: List['ITEMSVECTORWhereUniqueInput']
    connect_or_create: List['ITEMSVECTORConnectOrCreateWithoutRelationsInput']
    set: List['ITEMSVECTORWhereUniqueInput']
    disconnect: List['ITEMSVECTORWhereUniqueInput']
    delete: List['ITEMSVECTORWhereUniqueInput']

    # TODO
    # update: List['ITEMSVECTORUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ITEMSVECTORUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ITEMSVECTORScalarWhereInput']
    # upsert: List['ITEMSVECTORUpserteWithWhereUniqueWithoutRelationsInput']


class ITEMSVECTORUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ITEMSVECTORCreateWithoutRelationsInput'
    connect: 'ITEMSVECTORWhereUniqueInput'
    connect_or_create: 'ITEMSVECTORConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ITEMSVECTORUpdateInput'
    # upsert: 'ITEMSVECTORUpsertWithoutRelationsInput'


class ITEMSVECTORUpsertInput(TypedDict):
    create: 'ITEMSVECTORCreateInput'
    update: 'ITEMSVECTORUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ITEMSVECTOR_id_OrderByInput = TypedDict(
    '_ITEMSVECTOR_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ITEMSVECTOR_text_OrderByInput = TypedDict(
    '_ITEMSVECTOR_text_OrderByInput',
    {
        'text': 'SortOrder',
    },
    total=True
)

_ITEMSVECTOR_RelevanceInner = TypedDict(
    '_ITEMSVECTOR_RelevanceInner',
    {
        'fields': 'List[ITEMSVECTORScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ITEMSVECTOR_RelevanceOrderByInput = TypedDict(
    '_ITEMSVECTOR_RelevanceOrderByInput',
    {
        '_relevance': '_ITEMSVECTOR_RelevanceInner',
    },
    total=True
)

ITEMSVECTOROrderByInput = Union[
    '_ITEMSVECTOR_id_OrderByInput',
    '_ITEMSVECTOR_text_OrderByInput',
    '_ITEMSVECTOR_RelevanceOrderByInput',
]



# recursive ITEMSVECTOR types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ITEMSVECTORRelationFilter = TypedDict(
    'ITEMSVECTORRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ITEMSVECTORListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ITEMSVECTORInclude(TypedDict, total=False):
    """ITEMSVECTOR relational arguments"""


    

class CHARACTERVECTORIncludeFromITEMSVECTOR(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class CHARACTERVECTORIncludeFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class CHARACTERVECTORIncludeFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class CHARACTERVECTORIncludeFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class CHARACTERVECTORIncludeFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""

    

class CHARACTERVECTORArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class CHARACTERVECTORArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class CHARACTERVECTORArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class CHARACTERVECTORArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class CHARACTERVECTORArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    
    

class FindManyCHARACTERVECTORArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class FindManyCHARACTERVECTORArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class FindManyCHARACTERVECTORArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class FindManyCHARACTERVECTORArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class FindManyCHARACTERVECTORArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    
    

class ClassesIncludeFromITEMSVECTOR(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class ClassesIncludeFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class ClassesIncludeFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class ClassesIncludeFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class ClassesIncludeFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""

    

class ClassesArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive1'


class ClassesArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive2'


class ClassesArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive3'


class ClassesArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive4'


class ClassesArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    
    

class FindManyClassesArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive1'


class FindManyClassesArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive2'


class FindManyClassesArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive3'


class FindManyClassesArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive4'


class FindManyClassesArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    
    

class GeneralEquipmentIncludeFromITEMSVECTOR(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class GeneralEquipmentIncludeFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class GeneralEquipmentIncludeFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class GeneralEquipmentIncludeFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class GeneralEquipmentIncludeFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""

    

class GeneralEquipmentArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class GeneralEquipmentArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class GeneralEquipmentArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class GeneralEquipmentArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class GeneralEquipmentArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    
    

class FindManyGeneralEquipmentArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class FindManyGeneralEquipmentArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class FindManyGeneralEquipmentArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class FindManyGeneralEquipmentArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class FindManyGeneralEquipmentArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    
    

class ITEMSVECTORIncludeFromITEMSVECTOR(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class ITEMSVECTORIncludeFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class ITEMSVECTORIncludeFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class ITEMSVECTORIncludeFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class ITEMSVECTORIncludeFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""

    

class ITEMSVECTORArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class ITEMSVECTORArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class ITEMSVECTORArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class ITEMSVECTORArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class ITEMSVECTORArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    
    

class FindManyITEMSVECTORArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class FindManyITEMSVECTORArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class FindManyITEMSVECTORArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class FindManyITEMSVECTORArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class FindManyITEMSVECTORArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    
    

class MONSTERVECTORIncludeFromITEMSVECTOR(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class MONSTERVECTORIncludeFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class MONSTERVECTORIncludeFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class MONSTERVECTORIncludeFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class MONSTERVECTORIncludeFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""

    

class MONSTERVECTORArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class MONSTERVECTORArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class MONSTERVECTORArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class MONSTERVECTORArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class MONSTERVECTORArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    
    

class FindManyMONSTERVECTORArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class FindManyMONSTERVECTORArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class FindManyMONSTERVECTORArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class FindManyMONSTERVECTORArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class FindManyMONSTERVECTORArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    
    

class MagicItemIncludeFromITEMSVECTOR(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class MagicItemIncludeFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class MagicItemIncludeFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class MagicItemIncludeFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class MagicItemIncludeFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""

    

class MagicItemArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class MagicItemArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class MagicItemArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class MagicItemArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class MagicItemArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    
    

class FindManyMagicItemArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class FindManyMagicItemArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class FindManyMagicItemArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class FindManyMagicItemArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class FindManyMagicItemArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    
    

class MonsterIncludeFromITEMSVECTOR(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class MonsterIncludeFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class MonsterIncludeFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class MonsterIncludeFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class MonsterIncludeFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""

    

class MonsterArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive1'


class MonsterArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive2'


class MonsterArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive3'


class MonsterArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive4'


class MonsterArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    
    

class FindManyMonsterArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive1'


class FindManyMonsterArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive2'


class FindManyMonsterArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive3'


class FindManyMonsterArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive4'


class FindManyMonsterArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    
    

class RaceIncludeFromITEMSVECTOR(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class RaceIncludeFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class RaceIncludeFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class RaceIncludeFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class RaceIncludeFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""

    

class RaceArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'RaceIncludeFromRaceRecursive1'


class RaceArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'RaceIncludeFromRaceRecursive2'


class RaceArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'RaceIncludeFromRaceRecursive3'


class RaceArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'RaceIncludeFromRaceRecursive4'


class RaceArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    
    

class FindManyRaceArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive1'


class FindManyRaceArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive2'


class FindManyRaceArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive3'


class FindManyRaceArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive4'


class FindManyRaceArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    
    

class SESSIONIncludeFromITEMSVECTOR(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class SESSIONIncludeFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class SESSIONIncludeFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class SESSIONIncludeFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class SESSIONIncludeFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""

    

class SESSIONArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class SESSIONArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class SESSIONArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class SESSIONArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class SESSIONArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    
    

class FindManySESSIONArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class FindManySESSIONArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class FindManySESSIONArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class FindManySESSIONArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class FindManySESSIONArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    
    

class SPELLSVECTORIncludeFromITEMSVECTOR(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class SPELLSVECTORIncludeFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class SPELLSVECTORIncludeFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class SPELLSVECTORIncludeFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class SPELLSVECTORIncludeFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""

    

class SPELLSVECTORArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class SPELLSVECTORArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class SPELLSVECTORArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class SPELLSVECTORArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class SPELLSVECTORArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    
    

class FindManySPELLSVECTORArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class FindManySPELLSVECTORArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class FindManySPELLSVECTORArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class FindManySPELLSVECTORArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class FindManySPELLSVECTORArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    
    

class SpellIncludeFromITEMSVECTOR(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class SpellIncludeFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class SpellIncludeFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class SpellIncludeFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class SpellIncludeFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""

    

class SpellArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'SpellIncludeFromSpellRecursive1'


class SpellArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'SpellIncludeFromSpellRecursive2'


class SpellArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'SpellIncludeFromSpellRecursive3'


class SpellArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'SpellIncludeFromSpellRecursive4'


class SpellArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    
    

class FindManySpellArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive1'


class FindManySpellArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive2'


class FindManySpellArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive3'


class FindManySpellArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive4'


class FindManySpellArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    
    

class USERDATAIncludeFromITEMSVECTOR(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class USERDATAIncludeFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class USERDATAIncludeFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class USERDATAIncludeFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class USERDATAIncludeFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""

    

class USERDATAArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class USERDATAArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class USERDATAArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class USERDATAArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class USERDATAArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    
    

class FindManyUSERDATAArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class FindManyUSERDATAArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class FindManyUSERDATAArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class FindManyUSERDATAArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class FindManyUSERDATAArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    
    

class STORYVECTORIncludeFromITEMSVECTOR(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class STORYVECTORIncludeFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class STORYVECTORIncludeFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class STORYVECTORIncludeFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""


class STORYVECTORIncludeFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for ITEMSVECTOR"""

    

class STORYVECTORArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class STORYVECTORArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class STORYVECTORArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class STORYVECTORArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class STORYVECTORArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    
    

class FindManySTORYVECTORArgsFromITEMSVECTOR(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class FindManySTORYVECTORArgsFromITEMSVECTORRecursive1(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class FindManySTORYVECTORArgsFromITEMSVECTORRecursive2(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class FindManySTORYVECTORArgsFromITEMSVECTORRecursive3(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class FindManySTORYVECTORArgsFromITEMSVECTORRecursive4(TypedDict, total=False):
    """Arguments for ITEMSVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    


FindManyITEMSVECTORArgs = FindManyITEMSVECTORArgsFromITEMSVECTOR
FindFirstITEMSVECTORArgs = FindManyITEMSVECTORArgsFromITEMSVECTOR


    

class ITEMSVECTORWhereInput(TypedDict, total=False):
    """ITEMSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ITEMSVECTORWhereInputRecursive1', List['ITEMSVECTORWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ITEMSVECTORWhereInputRecursive1']
    OR: List['ITEMSVECTORWhereInputRecursive1']
    NOT: List['ITEMSVECTORWhereInputRecursive1']


class ITEMSVECTORWhereInputRecursive1(TypedDict, total=False):
    """ITEMSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ITEMSVECTORWhereInputRecursive2', List['ITEMSVECTORWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ITEMSVECTORWhereInputRecursive2']
    OR: List['ITEMSVECTORWhereInputRecursive2']
    NOT: List['ITEMSVECTORWhereInputRecursive2']


class ITEMSVECTORWhereInputRecursive2(TypedDict, total=False):
    """ITEMSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ITEMSVECTORWhereInputRecursive3', List['ITEMSVECTORWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ITEMSVECTORWhereInputRecursive3']
    OR: List['ITEMSVECTORWhereInputRecursive3']
    NOT: List['ITEMSVECTORWhereInputRecursive3']


class ITEMSVECTORWhereInputRecursive3(TypedDict, total=False):
    """ITEMSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ITEMSVECTORWhereInputRecursive4', List['ITEMSVECTORWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ITEMSVECTORWhereInputRecursive4']
    OR: List['ITEMSVECTORWhereInputRecursive4']
    NOT: List['ITEMSVECTORWhereInputRecursive4']


class ITEMSVECTORWhereInputRecursive4(TypedDict, total=False):
    """ITEMSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']



# aggregate ITEMSVECTOR types


    

class ITEMSVECTORScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ITEMSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ITEMSVECTORScalarWhereWithAggregatesInputRecursive1']
    OR: List['ITEMSVECTORScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ITEMSVECTORScalarWhereWithAggregatesInputRecursive1']


class ITEMSVECTORScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ITEMSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ITEMSVECTORScalarWhereWithAggregatesInputRecursive2']
    OR: List['ITEMSVECTORScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ITEMSVECTORScalarWhereWithAggregatesInputRecursive2']


class ITEMSVECTORScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ITEMSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ITEMSVECTORScalarWhereWithAggregatesInputRecursive3']
    OR: List['ITEMSVECTORScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ITEMSVECTORScalarWhereWithAggregatesInputRecursive3']


class ITEMSVECTORScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ITEMSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ITEMSVECTORScalarWhereWithAggregatesInputRecursive4']
    OR: List['ITEMSVECTORScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ITEMSVECTORScalarWhereWithAggregatesInputRecursive4']


class ITEMSVECTORScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ITEMSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']



class ITEMSVECTORGroupByOutput(TypedDict, total=False):
    id: _int
    text: _str
    _sum: 'ITEMSVECTORSumAggregateOutput'
    _avg: 'ITEMSVECTORAvgAggregateOutput'
    _min: 'ITEMSVECTORMinAggregateOutput'
    _max: 'ITEMSVECTORMaxAggregateOutput'
    _count: 'ITEMSVECTORCountAggregateOutput'


class ITEMSVECTORAvgAggregateOutput(TypedDict, total=False):
    """ITEMSVECTOR output for aggregating averages"""
    id: float


class ITEMSVECTORSumAggregateOutput(TypedDict, total=False):
    """ITEMSVECTOR output for aggregating sums"""
    id: _int


class ITEMSVECTORScalarAggregateOutput(TypedDict, total=False):
    """ITEMSVECTOR output including scalar fields"""
    id: _int
    text: _str


ITEMSVECTORMinAggregateOutput = ITEMSVECTORScalarAggregateOutput
ITEMSVECTORMaxAggregateOutput = ITEMSVECTORScalarAggregateOutput


class ITEMSVECTORMaxAggregateInput(TypedDict, total=False):
    """ITEMSVECTOR input for aggregating by max"""
    id: bool
    text: bool


class ITEMSVECTORMinAggregateInput(TypedDict, total=False):
    """ITEMSVECTOR input for aggregating by min"""
    id: bool
    text: bool


class ITEMSVECTORNumberAggregateInput(TypedDict, total=False):
    """ITEMSVECTOR input for aggregating numbers"""
    id: bool


ITEMSVECTORAvgAggregateInput = ITEMSVECTORNumberAggregateInput
ITEMSVECTORSumAggregateInput = ITEMSVECTORNumberAggregateInput


ITEMSVECTORCountAggregateInput = TypedDict(
    'ITEMSVECTORCountAggregateInput',
    {
        'id': bool,
        'text': bool,
        '_all': bool,
    },
    total=False,
)

ITEMSVECTORCountAggregateOutput = TypedDict(
    'ITEMSVECTORCountAggregateOutput',
    {
        'id': int,
        'text': int,
        '_all': int,
    },
    total=False,
)


ITEMSVECTORKeys = Literal[
    'id',
    'text',
]
ITEMSVECTORScalarFieldKeys = Literal[
    'id',
    'text',
]
ITEMSVECTORScalarFieldKeysT = TypeVar('ITEMSVECTORScalarFieldKeysT', bound=ITEMSVECTORScalarFieldKeys)

ITEMSVECTORRelationalFieldKeys = _NoneType

# MONSTERVECTOR types

class MONSTERVECTOROptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the MONSTERVECTOR create method"""
    id: _int


class MONSTERVECTORCreateInput(MONSTERVECTOROptionalCreateInput):
    """Required arguments to the MONSTERVECTOR create method"""
    text: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MONSTERVECTOROptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the MONSTERVECTOR create method, without relations"""
    id: _int


class MONSTERVECTORCreateWithoutRelationsInput(MONSTERVECTOROptionalCreateWithoutRelationsInput):
    """Required arguments to the MONSTERVECTOR create method, without relations"""
    text: _str

class MONSTERVECTORConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MONSTERVECTORCreateWithoutRelationsInput'
    where: 'MONSTERVECTORWhereUniqueInput'

class MONSTERVECTORCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MONSTERVECTORCreateWithoutRelationsInput'
    connect: 'MONSTERVECTORWhereUniqueInput'
    connect_or_create: 'MONSTERVECTORConnectOrCreateWithoutRelationsInput'


class MONSTERVECTORCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MONSTERVECTORCreateWithoutRelationsInput', List['MONSTERVECTORCreateWithoutRelationsInput']]
    connect: Union['MONSTERVECTORWhereUniqueInput', List['MONSTERVECTORWhereUniqueInput']]
    connect_or_create: Union['MONSTERVECTORConnectOrCreateWithoutRelationsInput', List['MONSTERVECTORConnectOrCreateWithoutRelationsInput']]

_MONSTERVECTORWhereUnique_id_Input = TypedDict(
    '_MONSTERVECTORWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

MONSTERVECTORWhereUniqueInput = _MONSTERVECTORWhereUnique_id_Input


class MONSTERVECTORUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    text: _str


class MONSTERVECTORUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    text: _str


class MONSTERVECTORUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MONSTERVECTORCreateWithoutRelationsInput']
    connect: List['MONSTERVECTORWhereUniqueInput']
    connect_or_create: List['MONSTERVECTORConnectOrCreateWithoutRelationsInput']
    set: List['MONSTERVECTORWhereUniqueInput']
    disconnect: List['MONSTERVECTORWhereUniqueInput']
    delete: List['MONSTERVECTORWhereUniqueInput']

    # TODO
    # update: List['MONSTERVECTORUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MONSTERVECTORUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MONSTERVECTORScalarWhereInput']
    # upsert: List['MONSTERVECTORUpserteWithWhereUniqueWithoutRelationsInput']


class MONSTERVECTORUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MONSTERVECTORCreateWithoutRelationsInput'
    connect: 'MONSTERVECTORWhereUniqueInput'
    connect_or_create: 'MONSTERVECTORConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MONSTERVECTORUpdateInput'
    # upsert: 'MONSTERVECTORUpsertWithoutRelationsInput'


class MONSTERVECTORUpsertInput(TypedDict):
    create: 'MONSTERVECTORCreateInput'
    update: 'MONSTERVECTORUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_MONSTERVECTOR_id_OrderByInput = TypedDict(
    '_MONSTERVECTOR_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_MONSTERVECTOR_text_OrderByInput = TypedDict(
    '_MONSTERVECTOR_text_OrderByInput',
    {
        'text': 'SortOrder',
    },
    total=True
)

_MONSTERVECTOR_RelevanceInner = TypedDict(
    '_MONSTERVECTOR_RelevanceInner',
    {
        'fields': 'List[MONSTERVECTORScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_MONSTERVECTOR_RelevanceOrderByInput = TypedDict(
    '_MONSTERVECTOR_RelevanceOrderByInput',
    {
        '_relevance': '_MONSTERVECTOR_RelevanceInner',
    },
    total=True
)

MONSTERVECTOROrderByInput = Union[
    '_MONSTERVECTOR_id_OrderByInput',
    '_MONSTERVECTOR_text_OrderByInput',
    '_MONSTERVECTOR_RelevanceOrderByInput',
]



# recursive MONSTERVECTOR types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MONSTERVECTORRelationFilter = TypedDict(
    'MONSTERVECTORRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MONSTERVECTORListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MONSTERVECTORInclude(TypedDict, total=False):
    """MONSTERVECTOR relational arguments"""


    

class CHARACTERVECTORIncludeFromMONSTERVECTOR(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class CHARACTERVECTORIncludeFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class CHARACTERVECTORIncludeFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class CHARACTERVECTORIncludeFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class CHARACTERVECTORIncludeFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""

    

class CHARACTERVECTORArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class CHARACTERVECTORArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class CHARACTERVECTORArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class CHARACTERVECTORArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class CHARACTERVECTORArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    
    

class FindManyCHARACTERVECTORArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class FindManyCHARACTERVECTORArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class FindManyCHARACTERVECTORArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class FindManyCHARACTERVECTORArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class FindManyCHARACTERVECTORArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    
    

class ClassesIncludeFromMONSTERVECTOR(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class ClassesIncludeFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class ClassesIncludeFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class ClassesIncludeFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class ClassesIncludeFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""

    

class ClassesArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive1'


class ClassesArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive2'


class ClassesArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive3'


class ClassesArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive4'


class ClassesArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    
    

class FindManyClassesArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive1'


class FindManyClassesArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive2'


class FindManyClassesArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive3'


class FindManyClassesArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive4'


class FindManyClassesArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    
    

class GeneralEquipmentIncludeFromMONSTERVECTOR(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class GeneralEquipmentIncludeFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class GeneralEquipmentIncludeFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class GeneralEquipmentIncludeFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class GeneralEquipmentIncludeFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""

    

class GeneralEquipmentArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class GeneralEquipmentArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class GeneralEquipmentArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class GeneralEquipmentArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class GeneralEquipmentArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    
    

class FindManyGeneralEquipmentArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class FindManyGeneralEquipmentArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class FindManyGeneralEquipmentArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class FindManyGeneralEquipmentArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class FindManyGeneralEquipmentArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    
    

class ITEMSVECTORIncludeFromMONSTERVECTOR(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class ITEMSVECTORIncludeFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class ITEMSVECTORIncludeFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class ITEMSVECTORIncludeFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class ITEMSVECTORIncludeFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""

    

class ITEMSVECTORArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class ITEMSVECTORArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class ITEMSVECTORArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class ITEMSVECTORArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class ITEMSVECTORArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    
    

class FindManyITEMSVECTORArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class FindManyITEMSVECTORArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class FindManyITEMSVECTORArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class FindManyITEMSVECTORArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class FindManyITEMSVECTORArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    
    

class MONSTERVECTORIncludeFromMONSTERVECTOR(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class MONSTERVECTORIncludeFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class MONSTERVECTORIncludeFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class MONSTERVECTORIncludeFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class MONSTERVECTORIncludeFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""

    

class MONSTERVECTORArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class MONSTERVECTORArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class MONSTERVECTORArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class MONSTERVECTORArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class MONSTERVECTORArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    
    

class FindManyMONSTERVECTORArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class FindManyMONSTERVECTORArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class FindManyMONSTERVECTORArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class FindManyMONSTERVECTORArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class FindManyMONSTERVECTORArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    
    

class MagicItemIncludeFromMONSTERVECTOR(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class MagicItemIncludeFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class MagicItemIncludeFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class MagicItemIncludeFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class MagicItemIncludeFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""

    

class MagicItemArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class MagicItemArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class MagicItemArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class MagicItemArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class MagicItemArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    
    

class FindManyMagicItemArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class FindManyMagicItemArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class FindManyMagicItemArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class FindManyMagicItemArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class FindManyMagicItemArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    
    

class MonsterIncludeFromMONSTERVECTOR(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class MonsterIncludeFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class MonsterIncludeFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class MonsterIncludeFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class MonsterIncludeFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""

    

class MonsterArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive1'


class MonsterArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive2'


class MonsterArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive3'


class MonsterArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive4'


class MonsterArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    
    

class FindManyMonsterArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive1'


class FindManyMonsterArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive2'


class FindManyMonsterArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive3'


class FindManyMonsterArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive4'


class FindManyMonsterArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    
    

class RaceIncludeFromMONSTERVECTOR(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class RaceIncludeFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class RaceIncludeFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class RaceIncludeFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class RaceIncludeFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""

    

class RaceArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'RaceIncludeFromRaceRecursive1'


class RaceArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'RaceIncludeFromRaceRecursive2'


class RaceArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'RaceIncludeFromRaceRecursive3'


class RaceArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'RaceIncludeFromRaceRecursive4'


class RaceArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    
    

class FindManyRaceArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive1'


class FindManyRaceArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive2'


class FindManyRaceArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive3'


class FindManyRaceArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive4'


class FindManyRaceArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    
    

class SESSIONIncludeFromMONSTERVECTOR(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class SESSIONIncludeFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class SESSIONIncludeFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class SESSIONIncludeFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class SESSIONIncludeFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""

    

class SESSIONArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class SESSIONArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class SESSIONArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class SESSIONArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class SESSIONArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    
    

class FindManySESSIONArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class FindManySESSIONArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class FindManySESSIONArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class FindManySESSIONArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class FindManySESSIONArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    
    

class SPELLSVECTORIncludeFromMONSTERVECTOR(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class SPELLSVECTORIncludeFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class SPELLSVECTORIncludeFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class SPELLSVECTORIncludeFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class SPELLSVECTORIncludeFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""

    

class SPELLSVECTORArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class SPELLSVECTORArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class SPELLSVECTORArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class SPELLSVECTORArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class SPELLSVECTORArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    
    

class FindManySPELLSVECTORArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class FindManySPELLSVECTORArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class FindManySPELLSVECTORArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class FindManySPELLSVECTORArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class FindManySPELLSVECTORArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    
    

class SpellIncludeFromMONSTERVECTOR(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class SpellIncludeFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class SpellIncludeFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class SpellIncludeFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class SpellIncludeFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""

    

class SpellArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'SpellIncludeFromSpellRecursive1'


class SpellArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'SpellIncludeFromSpellRecursive2'


class SpellArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'SpellIncludeFromSpellRecursive3'


class SpellArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'SpellIncludeFromSpellRecursive4'


class SpellArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    
    

class FindManySpellArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive1'


class FindManySpellArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive2'


class FindManySpellArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive3'


class FindManySpellArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive4'


class FindManySpellArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    
    

class USERDATAIncludeFromMONSTERVECTOR(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class USERDATAIncludeFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class USERDATAIncludeFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class USERDATAIncludeFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class USERDATAIncludeFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""

    

class USERDATAArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class USERDATAArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class USERDATAArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class USERDATAArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class USERDATAArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    
    

class FindManyUSERDATAArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class FindManyUSERDATAArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class FindManyUSERDATAArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class FindManyUSERDATAArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class FindManyUSERDATAArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    
    

class STORYVECTORIncludeFromMONSTERVECTOR(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class STORYVECTORIncludeFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class STORYVECTORIncludeFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class STORYVECTORIncludeFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""


class STORYVECTORIncludeFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for MONSTERVECTOR"""

    

class STORYVECTORArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class STORYVECTORArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class STORYVECTORArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class STORYVECTORArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class STORYVECTORArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    
    

class FindManySTORYVECTORArgsFromMONSTERVECTOR(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class FindManySTORYVECTORArgsFromMONSTERVECTORRecursive1(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class FindManySTORYVECTORArgsFromMONSTERVECTORRecursive2(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class FindManySTORYVECTORArgsFromMONSTERVECTORRecursive3(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class FindManySTORYVECTORArgsFromMONSTERVECTORRecursive4(TypedDict, total=False):
    """Arguments for MONSTERVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    


FindManyMONSTERVECTORArgs = FindManyMONSTERVECTORArgsFromMONSTERVECTOR
FindFirstMONSTERVECTORArgs = FindManyMONSTERVECTORArgsFromMONSTERVECTOR


    

class MONSTERVECTORWhereInput(TypedDict, total=False):
    """MONSTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MONSTERVECTORWhereInputRecursive1', List['MONSTERVECTORWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MONSTERVECTORWhereInputRecursive1']
    OR: List['MONSTERVECTORWhereInputRecursive1']
    NOT: List['MONSTERVECTORWhereInputRecursive1']


class MONSTERVECTORWhereInputRecursive1(TypedDict, total=False):
    """MONSTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MONSTERVECTORWhereInputRecursive2', List['MONSTERVECTORWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MONSTERVECTORWhereInputRecursive2']
    OR: List['MONSTERVECTORWhereInputRecursive2']
    NOT: List['MONSTERVECTORWhereInputRecursive2']


class MONSTERVECTORWhereInputRecursive2(TypedDict, total=False):
    """MONSTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MONSTERVECTORWhereInputRecursive3', List['MONSTERVECTORWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MONSTERVECTORWhereInputRecursive3']
    OR: List['MONSTERVECTORWhereInputRecursive3']
    NOT: List['MONSTERVECTORWhereInputRecursive3']


class MONSTERVECTORWhereInputRecursive3(TypedDict, total=False):
    """MONSTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MONSTERVECTORWhereInputRecursive4', List['MONSTERVECTORWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MONSTERVECTORWhereInputRecursive4']
    OR: List['MONSTERVECTORWhereInputRecursive4']
    NOT: List['MONSTERVECTORWhereInputRecursive4']


class MONSTERVECTORWhereInputRecursive4(TypedDict, total=False):
    """MONSTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']



# aggregate MONSTERVECTOR types


    

class MONSTERVECTORScalarWhereWithAggregatesInput(TypedDict, total=False):
    """MONSTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MONSTERVECTORScalarWhereWithAggregatesInputRecursive1']
    OR: List['MONSTERVECTORScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MONSTERVECTORScalarWhereWithAggregatesInputRecursive1']


class MONSTERVECTORScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """MONSTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MONSTERVECTORScalarWhereWithAggregatesInputRecursive2']
    OR: List['MONSTERVECTORScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MONSTERVECTORScalarWhereWithAggregatesInputRecursive2']


class MONSTERVECTORScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """MONSTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MONSTERVECTORScalarWhereWithAggregatesInputRecursive3']
    OR: List['MONSTERVECTORScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MONSTERVECTORScalarWhereWithAggregatesInputRecursive3']


class MONSTERVECTORScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """MONSTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MONSTERVECTORScalarWhereWithAggregatesInputRecursive4']
    OR: List['MONSTERVECTORScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MONSTERVECTORScalarWhereWithAggregatesInputRecursive4']


class MONSTERVECTORScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """MONSTERVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']



class MONSTERVECTORGroupByOutput(TypedDict, total=False):
    id: _int
    text: _str
    _sum: 'MONSTERVECTORSumAggregateOutput'
    _avg: 'MONSTERVECTORAvgAggregateOutput'
    _min: 'MONSTERVECTORMinAggregateOutput'
    _max: 'MONSTERVECTORMaxAggregateOutput'
    _count: 'MONSTERVECTORCountAggregateOutput'


class MONSTERVECTORAvgAggregateOutput(TypedDict, total=False):
    """MONSTERVECTOR output for aggregating averages"""
    id: float


class MONSTERVECTORSumAggregateOutput(TypedDict, total=False):
    """MONSTERVECTOR output for aggregating sums"""
    id: _int


class MONSTERVECTORScalarAggregateOutput(TypedDict, total=False):
    """MONSTERVECTOR output including scalar fields"""
    id: _int
    text: _str


MONSTERVECTORMinAggregateOutput = MONSTERVECTORScalarAggregateOutput
MONSTERVECTORMaxAggregateOutput = MONSTERVECTORScalarAggregateOutput


class MONSTERVECTORMaxAggregateInput(TypedDict, total=False):
    """MONSTERVECTOR input for aggregating by max"""
    id: bool
    text: bool


class MONSTERVECTORMinAggregateInput(TypedDict, total=False):
    """MONSTERVECTOR input for aggregating by min"""
    id: bool
    text: bool


class MONSTERVECTORNumberAggregateInput(TypedDict, total=False):
    """MONSTERVECTOR input for aggregating numbers"""
    id: bool


MONSTERVECTORAvgAggregateInput = MONSTERVECTORNumberAggregateInput
MONSTERVECTORSumAggregateInput = MONSTERVECTORNumberAggregateInput


MONSTERVECTORCountAggregateInput = TypedDict(
    'MONSTERVECTORCountAggregateInput',
    {
        'id': bool,
        'text': bool,
        '_all': bool,
    },
    total=False,
)

MONSTERVECTORCountAggregateOutput = TypedDict(
    'MONSTERVECTORCountAggregateOutput',
    {
        'id': int,
        'text': int,
        '_all': int,
    },
    total=False,
)


MONSTERVECTORKeys = Literal[
    'id',
    'text',
]
MONSTERVECTORScalarFieldKeys = Literal[
    'id',
    'text',
]
MONSTERVECTORScalarFieldKeysT = TypeVar('MONSTERVECTORScalarFieldKeysT', bound=MONSTERVECTORScalarFieldKeys)

MONSTERVECTORRelationalFieldKeys = _NoneType

# MagicItem types

class MagicItemOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the MagicItem create method"""
    id: _int
    rarity: Optional[_str]
    attunement: Optional[_str]
    Cost__gp_: Optional[_int]
    note: Optional[_str]
    Armor_Cost: Optional[_int]
    Rare_Material: Optional[_str]
    AC_Bonus: Optional[_int]
    Save_Bonus: Optional[_int]
    Set_Score__Modifier_: Optional[_int]
    Bonus_To_Score__Y_N_: Optional[_str]
    Weapon_Bonus: Optional[_int]
    Spell_Level: Optional[_int]
    Unlimited_Charges__Y_N_: Optional[_str]
    Charges_Day__Unlimit___7_: Optional[_int]
    Charges_Item__Destroyed_: Optional[_int]
    Spells_Share_Charges: Optional[_int]
    Condition__1Min__Save_: Optional[_str]
    Consumable_Damage__Avg_: Optional[_int]
    Consumable_Save___Y_N_: Optional[_str]
    Semi_Permanent_Damage__Avg_: Optional[_int]
    Semi_Perm_Save___Y_N_: Optional[_str]
    Duration___Minutes_: Optional[_int]
    Permanent_Damage__Avg_: Optional[_int]
    Perm_Save___Y_N_: Optional[_str]
    Specific_Situations__Y_N_: Optional[_str]
    Restore_HP__Avg_: Optional[_int]
    MatCost: Optional[_int]
    ACCost: Optional[_int]
    SaveCost: Optional[_int]
    SetScore_Cost: Optional[_int]
    BonusScore_Cost: Optional[_int]
    WeaponCost: Optional[_int]
    Consum_Spell_Cost: Optional[_int]
    PermCharges_Cost: Optional[_int]
    Charges___Destroyed: Optional[_int]
    SpellShare_ChargesCost: Optional[_int]
    ConditionCost: Optional[_int]
    ConsDMG_Cost: Optional[_int]
    Sm_PrDMG_Cost: Optional[_int]
    PerDMG_Cost: Optional[_int]
    AVGHP_Cost: Optional[_int]
    MiscCost: Optional[_int]
    Perm_Charges_Cost: Optional[_int]


class MagicItemCreateInput(MagicItemOptionalCreateInput):
    """Required arguments to the MagicItem create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MagicItemOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the MagicItem create method, without relations"""
    id: _int
    rarity: Optional[_str]
    attunement: Optional[_str]
    Cost__gp_: Optional[_int]
    note: Optional[_str]
    Armor_Cost: Optional[_int]
    Rare_Material: Optional[_str]
    AC_Bonus: Optional[_int]
    Save_Bonus: Optional[_int]
    Set_Score__Modifier_: Optional[_int]
    Bonus_To_Score__Y_N_: Optional[_str]
    Weapon_Bonus: Optional[_int]
    Spell_Level: Optional[_int]
    Unlimited_Charges__Y_N_: Optional[_str]
    Charges_Day__Unlimit___7_: Optional[_int]
    Charges_Item__Destroyed_: Optional[_int]
    Spells_Share_Charges: Optional[_int]
    Condition__1Min__Save_: Optional[_str]
    Consumable_Damage__Avg_: Optional[_int]
    Consumable_Save___Y_N_: Optional[_str]
    Semi_Permanent_Damage__Avg_: Optional[_int]
    Semi_Perm_Save___Y_N_: Optional[_str]
    Duration___Minutes_: Optional[_int]
    Permanent_Damage__Avg_: Optional[_int]
    Perm_Save___Y_N_: Optional[_str]
    Specific_Situations__Y_N_: Optional[_str]
    Restore_HP__Avg_: Optional[_int]
    MatCost: Optional[_int]
    ACCost: Optional[_int]
    SaveCost: Optional[_int]
    SetScore_Cost: Optional[_int]
    BonusScore_Cost: Optional[_int]
    WeaponCost: Optional[_int]
    Consum_Spell_Cost: Optional[_int]
    PermCharges_Cost: Optional[_int]
    Charges___Destroyed: Optional[_int]
    SpellShare_ChargesCost: Optional[_int]
    ConditionCost: Optional[_int]
    ConsDMG_Cost: Optional[_int]
    Sm_PrDMG_Cost: Optional[_int]
    PerDMG_Cost: Optional[_int]
    AVGHP_Cost: Optional[_int]
    MiscCost: Optional[_int]
    Perm_Charges_Cost: Optional[_int]


class MagicItemCreateWithoutRelationsInput(MagicItemOptionalCreateWithoutRelationsInput):
    """Required arguments to the MagicItem create method, without relations"""
    name: _str

class MagicItemConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MagicItemCreateWithoutRelationsInput'
    where: 'MagicItemWhereUniqueInput'

class MagicItemCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MagicItemCreateWithoutRelationsInput'
    connect: 'MagicItemWhereUniqueInput'
    connect_or_create: 'MagicItemConnectOrCreateWithoutRelationsInput'


class MagicItemCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MagicItemCreateWithoutRelationsInput', List['MagicItemCreateWithoutRelationsInput']]
    connect: Union['MagicItemWhereUniqueInput', List['MagicItemWhereUniqueInput']]
    connect_or_create: Union['MagicItemConnectOrCreateWithoutRelationsInput', List['MagicItemConnectOrCreateWithoutRelationsInput']]

_MagicItemWhereUnique_id_Input = TypedDict(
    '_MagicItemWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

MagicItemWhereUniqueInput = _MagicItemWhereUnique_id_Input


class MagicItemUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    rarity: Optional[_str]
    attunement: Optional[_str]
    Cost__gp_: Optional[Union[AtomicIntInput, _int]]
    note: Optional[_str]
    Armor_Cost: Optional[Union[AtomicIntInput, _int]]
    Rare_Material: Optional[_str]
    AC_Bonus: Optional[Union[AtomicIntInput, _int]]
    Save_Bonus: Optional[Union[AtomicIntInput, _int]]
    Set_Score__Modifier_: Optional[Union[AtomicIntInput, _int]]
    Bonus_To_Score__Y_N_: Optional[_str]
    Weapon_Bonus: Optional[Union[AtomicIntInput, _int]]
    Spell_Level: Optional[Union[AtomicIntInput, _int]]
    Unlimited_Charges__Y_N_: Optional[_str]
    Charges_Day__Unlimit___7_: Optional[Union[AtomicIntInput, _int]]
    Charges_Item__Destroyed_: Optional[Union[AtomicIntInput, _int]]
    Spells_Share_Charges: Optional[Union[AtomicIntInput, _int]]
    Condition__1Min__Save_: Optional[_str]
    Consumable_Damage__Avg_: Optional[Union[AtomicIntInput, _int]]
    Consumable_Save___Y_N_: Optional[_str]
    Semi_Permanent_Damage__Avg_: Optional[Union[AtomicIntInput, _int]]
    Semi_Perm_Save___Y_N_: Optional[_str]
    Duration___Minutes_: Optional[Union[AtomicIntInput, _int]]
    Permanent_Damage__Avg_: Optional[Union[AtomicIntInput, _int]]
    Perm_Save___Y_N_: Optional[_str]
    Specific_Situations__Y_N_: Optional[_str]
    Restore_HP__Avg_: Optional[Union[AtomicIntInput, _int]]
    MatCost: Optional[Union[AtomicIntInput, _int]]
    ACCost: Optional[Union[AtomicIntInput, _int]]
    SaveCost: Optional[Union[AtomicIntInput, _int]]
    SetScore_Cost: Optional[Union[AtomicIntInput, _int]]
    BonusScore_Cost: Optional[Union[AtomicIntInput, _int]]
    WeaponCost: Optional[Union[AtomicIntInput, _int]]
    Consum_Spell_Cost: Optional[Union[AtomicIntInput, _int]]
    PermCharges_Cost: Optional[Union[AtomicIntInput, _int]]
    Charges___Destroyed: Optional[Union[AtomicIntInput, _int]]
    SpellShare_ChargesCost: Optional[Union[AtomicIntInput, _int]]
    ConditionCost: Optional[Union[AtomicIntInput, _int]]
    ConsDMG_Cost: Optional[Union[AtomicIntInput, _int]]
    Sm_PrDMG_Cost: Optional[Union[AtomicIntInput, _int]]
    PerDMG_Cost: Optional[Union[AtomicIntInput, _int]]
    AVGHP_Cost: Optional[Union[AtomicIntInput, _int]]
    MiscCost: Optional[Union[AtomicIntInput, _int]]
    Perm_Charges_Cost: Optional[Union[AtomicIntInput, _int]]


class MagicItemUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    rarity: Optional[_str]
    attunement: Optional[_str]
    Cost__gp_: Optional[Union[AtomicIntInput, _int]]
    note: Optional[_str]
    Armor_Cost: Optional[Union[AtomicIntInput, _int]]
    Rare_Material: Optional[_str]
    AC_Bonus: Optional[Union[AtomicIntInput, _int]]
    Save_Bonus: Optional[Union[AtomicIntInput, _int]]
    Set_Score__Modifier_: Optional[Union[AtomicIntInput, _int]]
    Bonus_To_Score__Y_N_: Optional[_str]
    Weapon_Bonus: Optional[Union[AtomicIntInput, _int]]
    Spell_Level: Optional[Union[AtomicIntInput, _int]]
    Unlimited_Charges__Y_N_: Optional[_str]
    Charges_Day__Unlimit___7_: Optional[Union[AtomicIntInput, _int]]
    Charges_Item__Destroyed_: Optional[Union[AtomicIntInput, _int]]
    Spells_Share_Charges: Optional[Union[AtomicIntInput, _int]]
    Condition__1Min__Save_: Optional[_str]
    Consumable_Damage__Avg_: Optional[Union[AtomicIntInput, _int]]
    Consumable_Save___Y_N_: Optional[_str]
    Semi_Permanent_Damage__Avg_: Optional[Union[AtomicIntInput, _int]]
    Semi_Perm_Save___Y_N_: Optional[_str]
    Duration___Minutes_: Optional[Union[AtomicIntInput, _int]]
    Permanent_Damage__Avg_: Optional[Union[AtomicIntInput, _int]]
    Perm_Save___Y_N_: Optional[_str]
    Specific_Situations__Y_N_: Optional[_str]
    Restore_HP__Avg_: Optional[Union[AtomicIntInput, _int]]
    MatCost: Optional[Union[AtomicIntInput, _int]]
    ACCost: Optional[Union[AtomicIntInput, _int]]
    SaveCost: Optional[Union[AtomicIntInput, _int]]
    SetScore_Cost: Optional[Union[AtomicIntInput, _int]]
    BonusScore_Cost: Optional[Union[AtomicIntInput, _int]]
    WeaponCost: Optional[Union[AtomicIntInput, _int]]
    Consum_Spell_Cost: Optional[Union[AtomicIntInput, _int]]
    PermCharges_Cost: Optional[Union[AtomicIntInput, _int]]
    Charges___Destroyed: Optional[Union[AtomicIntInput, _int]]
    SpellShare_ChargesCost: Optional[Union[AtomicIntInput, _int]]
    ConditionCost: Optional[Union[AtomicIntInput, _int]]
    ConsDMG_Cost: Optional[Union[AtomicIntInput, _int]]
    Sm_PrDMG_Cost: Optional[Union[AtomicIntInput, _int]]
    PerDMG_Cost: Optional[Union[AtomicIntInput, _int]]
    AVGHP_Cost: Optional[Union[AtomicIntInput, _int]]
    MiscCost: Optional[Union[AtomicIntInput, _int]]
    Perm_Charges_Cost: Optional[Union[AtomicIntInput, _int]]


class MagicItemUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MagicItemCreateWithoutRelationsInput']
    connect: List['MagicItemWhereUniqueInput']
    connect_or_create: List['MagicItemConnectOrCreateWithoutRelationsInput']
    set: List['MagicItemWhereUniqueInput']
    disconnect: List['MagicItemWhereUniqueInput']
    delete: List['MagicItemWhereUniqueInput']

    # TODO
    # update: List['MagicItemUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MagicItemUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MagicItemScalarWhereInput']
    # upsert: List['MagicItemUpserteWithWhereUniqueWithoutRelationsInput']


class MagicItemUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MagicItemCreateWithoutRelationsInput'
    connect: 'MagicItemWhereUniqueInput'
    connect_or_create: 'MagicItemConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MagicItemUpdateInput'
    # upsert: 'MagicItemUpsertWithoutRelationsInput'


class MagicItemUpsertInput(TypedDict):
    create: 'MagicItemCreateInput'
    update: 'MagicItemUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_MagicItem_id_OrderByInput = TypedDict(
    '_MagicItem_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_MagicItem_name_OrderByInput = TypedDict(
    '_MagicItem_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_MagicItem_rarity_OrderByInput = TypedDict(
    '_MagicItem_rarity_OrderByInput',
    {
        'rarity': 'SortOrder',
    },
    total=True
)

_MagicItem_attunement_OrderByInput = TypedDict(
    '_MagicItem_attunement_OrderByInput',
    {
        'attunement': 'SortOrder',
    },
    total=True
)

_MagicItem_Cost__gp__OrderByInput = TypedDict(
    '_MagicItem_Cost__gp__OrderByInput',
    {
        'Cost__gp_': 'SortOrder',
    },
    total=True
)

_MagicItem_note_OrderByInput = TypedDict(
    '_MagicItem_note_OrderByInput',
    {
        'note': 'SortOrder',
    },
    total=True
)

_MagicItem_Armor_Cost_OrderByInput = TypedDict(
    '_MagicItem_Armor_Cost_OrderByInput',
    {
        'Armor_Cost': 'SortOrder',
    },
    total=True
)

_MagicItem_Rare_Material_OrderByInput = TypedDict(
    '_MagicItem_Rare_Material_OrderByInput',
    {
        'Rare_Material': 'SortOrder',
    },
    total=True
)

_MagicItem_AC_Bonus_OrderByInput = TypedDict(
    '_MagicItem_AC_Bonus_OrderByInput',
    {
        'AC_Bonus': 'SortOrder',
    },
    total=True
)

_MagicItem_Save_Bonus_OrderByInput = TypedDict(
    '_MagicItem_Save_Bonus_OrderByInput',
    {
        'Save_Bonus': 'SortOrder',
    },
    total=True
)

_MagicItem_Set_Score__Modifier__OrderByInput = TypedDict(
    '_MagicItem_Set_Score__Modifier__OrderByInput',
    {
        'Set_Score__Modifier_': 'SortOrder',
    },
    total=True
)

_MagicItem_Bonus_To_Score__Y_N__OrderByInput = TypedDict(
    '_MagicItem_Bonus_To_Score__Y_N__OrderByInput',
    {
        'Bonus_To_Score__Y_N_': 'SortOrder',
    },
    total=True
)

_MagicItem_Weapon_Bonus_OrderByInput = TypedDict(
    '_MagicItem_Weapon_Bonus_OrderByInput',
    {
        'Weapon_Bonus': 'SortOrder',
    },
    total=True
)

_MagicItem_Spell_Level_OrderByInput = TypedDict(
    '_MagicItem_Spell_Level_OrderByInput',
    {
        'Spell_Level': 'SortOrder',
    },
    total=True
)

_MagicItem_Unlimited_Charges__Y_N__OrderByInput = TypedDict(
    '_MagicItem_Unlimited_Charges__Y_N__OrderByInput',
    {
        'Unlimited_Charges__Y_N_': 'SortOrder',
    },
    total=True
)

_MagicItem_Charges_Day__Unlimit___7__OrderByInput = TypedDict(
    '_MagicItem_Charges_Day__Unlimit___7__OrderByInput',
    {
        'Charges_Day__Unlimit___7_': 'SortOrder',
    },
    total=True
)

_MagicItem_Charges_Item__Destroyed__OrderByInput = TypedDict(
    '_MagicItem_Charges_Item__Destroyed__OrderByInput',
    {
        'Charges_Item__Destroyed_': 'SortOrder',
    },
    total=True
)

_MagicItem_Spells_Share_Charges_OrderByInput = TypedDict(
    '_MagicItem_Spells_Share_Charges_OrderByInput',
    {
        'Spells_Share_Charges': 'SortOrder',
    },
    total=True
)

_MagicItem_Condition__1Min__Save__OrderByInput = TypedDict(
    '_MagicItem_Condition__1Min__Save__OrderByInput',
    {
        'Condition__1Min__Save_': 'SortOrder',
    },
    total=True
)

_MagicItem_Consumable_Damage__Avg__OrderByInput = TypedDict(
    '_MagicItem_Consumable_Damage__Avg__OrderByInput',
    {
        'Consumable_Damage__Avg_': 'SortOrder',
    },
    total=True
)

_MagicItem_Consumable_Save___Y_N__OrderByInput = TypedDict(
    '_MagicItem_Consumable_Save___Y_N__OrderByInput',
    {
        'Consumable_Save___Y_N_': 'SortOrder',
    },
    total=True
)

_MagicItem_Semi_Permanent_Damage__Avg__OrderByInput = TypedDict(
    '_MagicItem_Semi_Permanent_Damage__Avg__OrderByInput',
    {
        'Semi_Permanent_Damage__Avg_': 'SortOrder',
    },
    total=True
)

_MagicItem_Semi_Perm_Save___Y_N__OrderByInput = TypedDict(
    '_MagicItem_Semi_Perm_Save___Y_N__OrderByInput',
    {
        'Semi_Perm_Save___Y_N_': 'SortOrder',
    },
    total=True
)

_MagicItem_Duration___Minutes__OrderByInput = TypedDict(
    '_MagicItem_Duration___Minutes__OrderByInput',
    {
        'Duration___Minutes_': 'SortOrder',
    },
    total=True
)

_MagicItem_Permanent_Damage__Avg__OrderByInput = TypedDict(
    '_MagicItem_Permanent_Damage__Avg__OrderByInput',
    {
        'Permanent_Damage__Avg_': 'SortOrder',
    },
    total=True
)

_MagicItem_Perm_Save___Y_N__OrderByInput = TypedDict(
    '_MagicItem_Perm_Save___Y_N__OrderByInput',
    {
        'Perm_Save___Y_N_': 'SortOrder',
    },
    total=True
)

_MagicItem_Specific_Situations__Y_N__OrderByInput = TypedDict(
    '_MagicItem_Specific_Situations__Y_N__OrderByInput',
    {
        'Specific_Situations__Y_N_': 'SortOrder',
    },
    total=True
)

_MagicItem_Restore_HP__Avg__OrderByInput = TypedDict(
    '_MagicItem_Restore_HP__Avg__OrderByInput',
    {
        'Restore_HP__Avg_': 'SortOrder',
    },
    total=True
)

_MagicItem_MatCost_OrderByInput = TypedDict(
    '_MagicItem_MatCost_OrderByInput',
    {
        'MatCost': 'SortOrder',
    },
    total=True
)

_MagicItem_ACCost_OrderByInput = TypedDict(
    '_MagicItem_ACCost_OrderByInput',
    {
        'ACCost': 'SortOrder',
    },
    total=True
)

_MagicItem_SaveCost_OrderByInput = TypedDict(
    '_MagicItem_SaveCost_OrderByInput',
    {
        'SaveCost': 'SortOrder',
    },
    total=True
)

_MagicItem_SetScore_Cost_OrderByInput = TypedDict(
    '_MagicItem_SetScore_Cost_OrderByInput',
    {
        'SetScore_Cost': 'SortOrder',
    },
    total=True
)

_MagicItem_BonusScore_Cost_OrderByInput = TypedDict(
    '_MagicItem_BonusScore_Cost_OrderByInput',
    {
        'BonusScore_Cost': 'SortOrder',
    },
    total=True
)

_MagicItem_WeaponCost_OrderByInput = TypedDict(
    '_MagicItem_WeaponCost_OrderByInput',
    {
        'WeaponCost': 'SortOrder',
    },
    total=True
)

_MagicItem_Consum_Spell_Cost_OrderByInput = TypedDict(
    '_MagicItem_Consum_Spell_Cost_OrderByInput',
    {
        'Consum_Spell_Cost': 'SortOrder',
    },
    total=True
)

_MagicItem_PermCharges_Cost_OrderByInput = TypedDict(
    '_MagicItem_PermCharges_Cost_OrderByInput',
    {
        'PermCharges_Cost': 'SortOrder',
    },
    total=True
)

_MagicItem_Charges___Destroyed_OrderByInput = TypedDict(
    '_MagicItem_Charges___Destroyed_OrderByInput',
    {
        'Charges___Destroyed': 'SortOrder',
    },
    total=True
)

_MagicItem_SpellShare_ChargesCost_OrderByInput = TypedDict(
    '_MagicItem_SpellShare_ChargesCost_OrderByInput',
    {
        'SpellShare_ChargesCost': 'SortOrder',
    },
    total=True
)

_MagicItem_ConditionCost_OrderByInput = TypedDict(
    '_MagicItem_ConditionCost_OrderByInput',
    {
        'ConditionCost': 'SortOrder',
    },
    total=True
)

_MagicItem_ConsDMG_Cost_OrderByInput = TypedDict(
    '_MagicItem_ConsDMG_Cost_OrderByInput',
    {
        'ConsDMG_Cost': 'SortOrder',
    },
    total=True
)

_MagicItem_Sm_PrDMG_Cost_OrderByInput = TypedDict(
    '_MagicItem_Sm_PrDMG_Cost_OrderByInput',
    {
        'Sm_PrDMG_Cost': 'SortOrder',
    },
    total=True
)

_MagicItem_PerDMG_Cost_OrderByInput = TypedDict(
    '_MagicItem_PerDMG_Cost_OrderByInput',
    {
        'PerDMG_Cost': 'SortOrder',
    },
    total=True
)

_MagicItem_AVGHP_Cost_OrderByInput = TypedDict(
    '_MagicItem_AVGHP_Cost_OrderByInput',
    {
        'AVGHP_Cost': 'SortOrder',
    },
    total=True
)

_MagicItem_MiscCost_OrderByInput = TypedDict(
    '_MagicItem_MiscCost_OrderByInput',
    {
        'MiscCost': 'SortOrder',
    },
    total=True
)

_MagicItem_Perm_Charges_Cost_OrderByInput = TypedDict(
    '_MagicItem_Perm_Charges_Cost_OrderByInput',
    {
        'Perm_Charges_Cost': 'SortOrder',
    },
    total=True
)

_MagicItem_RelevanceInner = TypedDict(
    '_MagicItem_RelevanceInner',
    {
        'fields': 'List[MagicItemScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_MagicItem_RelevanceOrderByInput = TypedDict(
    '_MagicItem_RelevanceOrderByInput',
    {
        '_relevance': '_MagicItem_RelevanceInner',
    },
    total=True
)

MagicItemOrderByInput = Union[
    '_MagicItem_id_OrderByInput',
    '_MagicItem_name_OrderByInput',
    '_MagicItem_rarity_OrderByInput',
    '_MagicItem_attunement_OrderByInput',
    '_MagicItem_Cost__gp__OrderByInput',
    '_MagicItem_note_OrderByInput',
    '_MagicItem_Armor_Cost_OrderByInput',
    '_MagicItem_Rare_Material_OrderByInput',
    '_MagicItem_AC_Bonus_OrderByInput',
    '_MagicItem_Save_Bonus_OrderByInput',
    '_MagicItem_Set_Score__Modifier__OrderByInput',
    '_MagicItem_Bonus_To_Score__Y_N__OrderByInput',
    '_MagicItem_Weapon_Bonus_OrderByInput',
    '_MagicItem_Spell_Level_OrderByInput',
    '_MagicItem_Unlimited_Charges__Y_N__OrderByInput',
    '_MagicItem_Charges_Day__Unlimit___7__OrderByInput',
    '_MagicItem_Charges_Item__Destroyed__OrderByInput',
    '_MagicItem_Spells_Share_Charges_OrderByInput',
    '_MagicItem_Condition__1Min__Save__OrderByInput',
    '_MagicItem_Consumable_Damage__Avg__OrderByInput',
    '_MagicItem_Consumable_Save___Y_N__OrderByInput',
    '_MagicItem_Semi_Permanent_Damage__Avg__OrderByInput',
    '_MagicItem_Semi_Perm_Save___Y_N__OrderByInput',
    '_MagicItem_Duration___Minutes__OrderByInput',
    '_MagicItem_Permanent_Damage__Avg__OrderByInput',
    '_MagicItem_Perm_Save___Y_N__OrderByInput',
    '_MagicItem_Specific_Situations__Y_N__OrderByInput',
    '_MagicItem_Restore_HP__Avg__OrderByInput',
    '_MagicItem_MatCost_OrderByInput',
    '_MagicItem_ACCost_OrderByInput',
    '_MagicItem_SaveCost_OrderByInput',
    '_MagicItem_SetScore_Cost_OrderByInput',
    '_MagicItem_BonusScore_Cost_OrderByInput',
    '_MagicItem_WeaponCost_OrderByInput',
    '_MagicItem_Consum_Spell_Cost_OrderByInput',
    '_MagicItem_PermCharges_Cost_OrderByInput',
    '_MagicItem_Charges___Destroyed_OrderByInput',
    '_MagicItem_SpellShare_ChargesCost_OrderByInput',
    '_MagicItem_ConditionCost_OrderByInput',
    '_MagicItem_ConsDMG_Cost_OrderByInput',
    '_MagicItem_Sm_PrDMG_Cost_OrderByInput',
    '_MagicItem_PerDMG_Cost_OrderByInput',
    '_MagicItem_AVGHP_Cost_OrderByInput',
    '_MagicItem_MiscCost_OrderByInput',
    '_MagicItem_Perm_Charges_Cost_OrderByInput',
    '_MagicItem_RelevanceOrderByInput',
]



# recursive MagicItem types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MagicItemRelationFilter = TypedDict(
    'MagicItemRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MagicItemListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MagicItemInclude(TypedDict, total=False):
    """MagicItem relational arguments"""


    

class CHARACTERVECTORIncludeFromMagicItem(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class CHARACTERVECTORIncludeFromMagicItemRecursive1(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class CHARACTERVECTORIncludeFromMagicItemRecursive2(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class CHARACTERVECTORIncludeFromMagicItemRecursive3(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class CHARACTERVECTORIncludeFromMagicItemRecursive4(TypedDict, total=False):
    """Relational arguments for MagicItem"""

    

class CHARACTERVECTORArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class CHARACTERVECTORArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class CHARACTERVECTORArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class CHARACTERVECTORArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class CHARACTERVECTORArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    
    

class FindManyCHARACTERVECTORArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class FindManyCHARACTERVECTORArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class FindManyCHARACTERVECTORArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class FindManyCHARACTERVECTORArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class FindManyCHARACTERVECTORArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    
    

class ClassesIncludeFromMagicItem(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class ClassesIncludeFromMagicItemRecursive1(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class ClassesIncludeFromMagicItemRecursive2(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class ClassesIncludeFromMagicItemRecursive3(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class ClassesIncludeFromMagicItemRecursive4(TypedDict, total=False):
    """Relational arguments for MagicItem"""

    

class ClassesArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'ClassesIncludeFromClassesRecursive1'


class ClassesArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'ClassesIncludeFromClassesRecursive2'


class ClassesArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'ClassesIncludeFromClassesRecursive3'


class ClassesArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'ClassesIncludeFromClassesRecursive4'


class ClassesArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    
    

class FindManyClassesArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive1'


class FindManyClassesArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive2'


class FindManyClassesArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive3'


class FindManyClassesArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive4'


class FindManyClassesArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    
    

class GeneralEquipmentIncludeFromMagicItem(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class GeneralEquipmentIncludeFromMagicItemRecursive1(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class GeneralEquipmentIncludeFromMagicItemRecursive2(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class GeneralEquipmentIncludeFromMagicItemRecursive3(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class GeneralEquipmentIncludeFromMagicItemRecursive4(TypedDict, total=False):
    """Relational arguments for MagicItem"""

    

class GeneralEquipmentArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class GeneralEquipmentArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class GeneralEquipmentArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class GeneralEquipmentArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class GeneralEquipmentArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    
    

class FindManyGeneralEquipmentArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class FindManyGeneralEquipmentArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class FindManyGeneralEquipmentArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class FindManyGeneralEquipmentArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class FindManyGeneralEquipmentArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    
    

class ITEMSVECTORIncludeFromMagicItem(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class ITEMSVECTORIncludeFromMagicItemRecursive1(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class ITEMSVECTORIncludeFromMagicItemRecursive2(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class ITEMSVECTORIncludeFromMagicItemRecursive3(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class ITEMSVECTORIncludeFromMagicItemRecursive4(TypedDict, total=False):
    """Relational arguments for MagicItem"""

    

class ITEMSVECTORArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class ITEMSVECTORArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class ITEMSVECTORArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class ITEMSVECTORArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class ITEMSVECTORArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    
    

class FindManyITEMSVECTORArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class FindManyITEMSVECTORArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class FindManyITEMSVECTORArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class FindManyITEMSVECTORArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class FindManyITEMSVECTORArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    
    

class MONSTERVECTORIncludeFromMagicItem(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class MONSTERVECTORIncludeFromMagicItemRecursive1(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class MONSTERVECTORIncludeFromMagicItemRecursive2(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class MONSTERVECTORIncludeFromMagicItemRecursive3(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class MONSTERVECTORIncludeFromMagicItemRecursive4(TypedDict, total=False):
    """Relational arguments for MagicItem"""

    

class MONSTERVECTORArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class MONSTERVECTORArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class MONSTERVECTORArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class MONSTERVECTORArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class MONSTERVECTORArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    
    

class FindManyMONSTERVECTORArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class FindManyMONSTERVECTORArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class FindManyMONSTERVECTORArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class FindManyMONSTERVECTORArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class FindManyMONSTERVECTORArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    
    

class MagicItemIncludeFromMagicItem(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class MagicItemIncludeFromMagicItemRecursive1(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class MagicItemIncludeFromMagicItemRecursive2(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class MagicItemIncludeFromMagicItemRecursive3(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class MagicItemIncludeFromMagicItemRecursive4(TypedDict, total=False):
    """Relational arguments for MagicItem"""

    

class MagicItemArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class MagicItemArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class MagicItemArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class MagicItemArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class MagicItemArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    
    

class FindManyMagicItemArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class FindManyMagicItemArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class FindManyMagicItemArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class FindManyMagicItemArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class FindManyMagicItemArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    
    

class MonsterIncludeFromMagicItem(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class MonsterIncludeFromMagicItemRecursive1(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class MonsterIncludeFromMagicItemRecursive2(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class MonsterIncludeFromMagicItemRecursive3(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class MonsterIncludeFromMagicItemRecursive4(TypedDict, total=False):
    """Relational arguments for MagicItem"""

    

class MonsterArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'MonsterIncludeFromMonsterRecursive1'


class MonsterArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'MonsterIncludeFromMonsterRecursive2'


class MonsterArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'MonsterIncludeFromMonsterRecursive3'


class MonsterArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'MonsterIncludeFromMonsterRecursive4'


class MonsterArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    
    

class FindManyMonsterArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive1'


class FindManyMonsterArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive2'


class FindManyMonsterArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive3'


class FindManyMonsterArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive4'


class FindManyMonsterArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    
    

class RaceIncludeFromMagicItem(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class RaceIncludeFromMagicItemRecursive1(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class RaceIncludeFromMagicItemRecursive2(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class RaceIncludeFromMagicItemRecursive3(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class RaceIncludeFromMagicItemRecursive4(TypedDict, total=False):
    """Relational arguments for MagicItem"""

    

class RaceArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'RaceIncludeFromRaceRecursive1'


class RaceArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'RaceIncludeFromRaceRecursive2'


class RaceArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'RaceIncludeFromRaceRecursive3'


class RaceArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'RaceIncludeFromRaceRecursive4'


class RaceArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    
    

class FindManyRaceArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive1'


class FindManyRaceArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive2'


class FindManyRaceArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive3'


class FindManyRaceArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive4'


class FindManyRaceArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    
    

class SESSIONIncludeFromMagicItem(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class SESSIONIncludeFromMagicItemRecursive1(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class SESSIONIncludeFromMagicItemRecursive2(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class SESSIONIncludeFromMagicItemRecursive3(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class SESSIONIncludeFromMagicItemRecursive4(TypedDict, total=False):
    """Relational arguments for MagicItem"""

    

class SESSIONArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class SESSIONArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class SESSIONArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class SESSIONArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class SESSIONArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    
    

class FindManySESSIONArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class FindManySESSIONArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class FindManySESSIONArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class FindManySESSIONArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class FindManySESSIONArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    
    

class SPELLSVECTORIncludeFromMagicItem(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class SPELLSVECTORIncludeFromMagicItemRecursive1(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class SPELLSVECTORIncludeFromMagicItemRecursive2(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class SPELLSVECTORIncludeFromMagicItemRecursive3(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class SPELLSVECTORIncludeFromMagicItemRecursive4(TypedDict, total=False):
    """Relational arguments for MagicItem"""

    

class SPELLSVECTORArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class SPELLSVECTORArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class SPELLSVECTORArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class SPELLSVECTORArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class SPELLSVECTORArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    
    

class FindManySPELLSVECTORArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class FindManySPELLSVECTORArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class FindManySPELLSVECTORArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class FindManySPELLSVECTORArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class FindManySPELLSVECTORArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    
    

class SpellIncludeFromMagicItem(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class SpellIncludeFromMagicItemRecursive1(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class SpellIncludeFromMagicItemRecursive2(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class SpellIncludeFromMagicItemRecursive3(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class SpellIncludeFromMagicItemRecursive4(TypedDict, total=False):
    """Relational arguments for MagicItem"""

    

class SpellArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'SpellIncludeFromSpellRecursive1'


class SpellArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'SpellIncludeFromSpellRecursive2'


class SpellArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'SpellIncludeFromSpellRecursive3'


class SpellArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'SpellIncludeFromSpellRecursive4'


class SpellArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    
    

class FindManySpellArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive1'


class FindManySpellArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive2'


class FindManySpellArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive3'


class FindManySpellArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive4'


class FindManySpellArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    
    

class USERDATAIncludeFromMagicItem(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class USERDATAIncludeFromMagicItemRecursive1(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class USERDATAIncludeFromMagicItemRecursive2(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class USERDATAIncludeFromMagicItemRecursive3(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class USERDATAIncludeFromMagicItemRecursive4(TypedDict, total=False):
    """Relational arguments for MagicItem"""

    

class USERDATAArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class USERDATAArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class USERDATAArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class USERDATAArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class USERDATAArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    
    

class FindManyUSERDATAArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class FindManyUSERDATAArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class FindManyUSERDATAArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class FindManyUSERDATAArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class FindManyUSERDATAArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    
    

class STORYVECTORIncludeFromMagicItem(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class STORYVECTORIncludeFromMagicItemRecursive1(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class STORYVECTORIncludeFromMagicItemRecursive2(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class STORYVECTORIncludeFromMagicItemRecursive3(TypedDict, total=False):
    """Relational arguments for MagicItem"""


class STORYVECTORIncludeFromMagicItemRecursive4(TypedDict, total=False):
    """Relational arguments for MagicItem"""

    

class STORYVECTORArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class STORYVECTORArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class STORYVECTORArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class STORYVECTORArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class STORYVECTORArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    
    

class FindManySTORYVECTORArgsFromMagicItem(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class FindManySTORYVECTORArgsFromMagicItemRecursive1(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class FindManySTORYVECTORArgsFromMagicItemRecursive2(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class FindManySTORYVECTORArgsFromMagicItemRecursive3(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class FindManySTORYVECTORArgsFromMagicItemRecursive4(TypedDict, total=False):
    """Arguments for MagicItem"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    


FindManyMagicItemArgs = FindManyMagicItemArgsFromMagicItem
FindFirstMagicItemArgs = FindManyMagicItemArgsFromMagicItem


    

class MagicItemWhereInput(TypedDict, total=False):
    """MagicItem arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    rarity: Union[None, _str, 'types.StringFilter']
    attunement: Union[None, _str, 'types.StringFilter']
    Cost__gp_: Union[None, _int, 'types.IntFilter']
    note: Union[None, _str, 'types.StringFilter']
    Armor_Cost: Union[None, _int, 'types.IntFilter']
    Rare_Material: Union[None, _str, 'types.StringFilter']
    AC_Bonus: Union[None, _int, 'types.IntFilter']
    Save_Bonus: Union[None, _int, 'types.IntFilter']
    Set_Score__Modifier_: Union[None, _int, 'types.IntFilter']
    Bonus_To_Score__Y_N_: Union[None, _str, 'types.StringFilter']
    Weapon_Bonus: Union[None, _int, 'types.IntFilter']
    Spell_Level: Union[None, _int, 'types.IntFilter']
    Unlimited_Charges__Y_N_: Union[None, _str, 'types.StringFilter']
    Charges_Day__Unlimit___7_: Union[None, _int, 'types.IntFilter']
    Charges_Item__Destroyed_: Union[None, _int, 'types.IntFilter']
    Spells_Share_Charges: Union[None, _int, 'types.IntFilter']
    Condition__1Min__Save_: Union[None, _str, 'types.StringFilter']
    Consumable_Damage__Avg_: Union[None, _int, 'types.IntFilter']
    Consumable_Save___Y_N_: Union[None, _str, 'types.StringFilter']
    Semi_Permanent_Damage__Avg_: Union[None, _int, 'types.IntFilter']
    Semi_Perm_Save___Y_N_: Union[None, _str, 'types.StringFilter']
    Duration___Minutes_: Union[None, _int, 'types.IntFilter']
    Permanent_Damage__Avg_: Union[None, _int, 'types.IntFilter']
    Perm_Save___Y_N_: Union[None, _str, 'types.StringFilter']
    Specific_Situations__Y_N_: Union[None, _str, 'types.StringFilter']
    Restore_HP__Avg_: Union[None, _int, 'types.IntFilter']
    MatCost: Union[None, _int, 'types.IntFilter']
    ACCost: Union[None, _int, 'types.IntFilter']
    SaveCost: Union[None, _int, 'types.IntFilter']
    SetScore_Cost: Union[None, _int, 'types.IntFilter']
    BonusScore_Cost: Union[None, _int, 'types.IntFilter']
    WeaponCost: Union[None, _int, 'types.IntFilter']
    Consum_Spell_Cost: Union[None, _int, 'types.IntFilter']
    PermCharges_Cost: Union[None, _int, 'types.IntFilter']
    Charges___Destroyed: Union[None, _int, 'types.IntFilter']
    SpellShare_ChargesCost: Union[None, _int, 'types.IntFilter']
    ConditionCost: Union[None, _int, 'types.IntFilter']
    ConsDMG_Cost: Union[None, _int, 'types.IntFilter']
    Sm_PrDMG_Cost: Union[None, _int, 'types.IntFilter']
    PerDMG_Cost: Union[None, _int, 'types.IntFilter']
    AVGHP_Cost: Union[None, _int, 'types.IntFilter']
    MiscCost: Union[None, _int, 'types.IntFilter']
    Perm_Charges_Cost: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['MagicItemWhereInputRecursive1', List['MagicItemWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MagicItemWhereInputRecursive1']
    OR: List['MagicItemWhereInputRecursive1']
    NOT: List['MagicItemWhereInputRecursive1']


class MagicItemWhereInputRecursive1(TypedDict, total=False):
    """MagicItem arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    rarity: Union[None, _str, 'types.StringFilter']
    attunement: Union[None, _str, 'types.StringFilter']
    Cost__gp_: Union[None, _int, 'types.IntFilter']
    note: Union[None, _str, 'types.StringFilter']
    Armor_Cost: Union[None, _int, 'types.IntFilter']
    Rare_Material: Union[None, _str, 'types.StringFilter']
    AC_Bonus: Union[None, _int, 'types.IntFilter']
    Save_Bonus: Union[None, _int, 'types.IntFilter']
    Set_Score__Modifier_: Union[None, _int, 'types.IntFilter']
    Bonus_To_Score__Y_N_: Union[None, _str, 'types.StringFilter']
    Weapon_Bonus: Union[None, _int, 'types.IntFilter']
    Spell_Level: Union[None, _int, 'types.IntFilter']
    Unlimited_Charges__Y_N_: Union[None, _str, 'types.StringFilter']
    Charges_Day__Unlimit___7_: Union[None, _int, 'types.IntFilter']
    Charges_Item__Destroyed_: Union[None, _int, 'types.IntFilter']
    Spells_Share_Charges: Union[None, _int, 'types.IntFilter']
    Condition__1Min__Save_: Union[None, _str, 'types.StringFilter']
    Consumable_Damage__Avg_: Union[None, _int, 'types.IntFilter']
    Consumable_Save___Y_N_: Union[None, _str, 'types.StringFilter']
    Semi_Permanent_Damage__Avg_: Union[None, _int, 'types.IntFilter']
    Semi_Perm_Save___Y_N_: Union[None, _str, 'types.StringFilter']
    Duration___Minutes_: Union[None, _int, 'types.IntFilter']
    Permanent_Damage__Avg_: Union[None, _int, 'types.IntFilter']
    Perm_Save___Y_N_: Union[None, _str, 'types.StringFilter']
    Specific_Situations__Y_N_: Union[None, _str, 'types.StringFilter']
    Restore_HP__Avg_: Union[None, _int, 'types.IntFilter']
    MatCost: Union[None, _int, 'types.IntFilter']
    ACCost: Union[None, _int, 'types.IntFilter']
    SaveCost: Union[None, _int, 'types.IntFilter']
    SetScore_Cost: Union[None, _int, 'types.IntFilter']
    BonusScore_Cost: Union[None, _int, 'types.IntFilter']
    WeaponCost: Union[None, _int, 'types.IntFilter']
    Consum_Spell_Cost: Union[None, _int, 'types.IntFilter']
    PermCharges_Cost: Union[None, _int, 'types.IntFilter']
    Charges___Destroyed: Union[None, _int, 'types.IntFilter']
    SpellShare_ChargesCost: Union[None, _int, 'types.IntFilter']
    ConditionCost: Union[None, _int, 'types.IntFilter']
    ConsDMG_Cost: Union[None, _int, 'types.IntFilter']
    Sm_PrDMG_Cost: Union[None, _int, 'types.IntFilter']
    PerDMG_Cost: Union[None, _int, 'types.IntFilter']
    AVGHP_Cost: Union[None, _int, 'types.IntFilter']
    MiscCost: Union[None, _int, 'types.IntFilter']
    Perm_Charges_Cost: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['MagicItemWhereInputRecursive2', List['MagicItemWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MagicItemWhereInputRecursive2']
    OR: List['MagicItemWhereInputRecursive2']
    NOT: List['MagicItemWhereInputRecursive2']


class MagicItemWhereInputRecursive2(TypedDict, total=False):
    """MagicItem arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    rarity: Union[None, _str, 'types.StringFilter']
    attunement: Union[None, _str, 'types.StringFilter']
    Cost__gp_: Union[None, _int, 'types.IntFilter']
    note: Union[None, _str, 'types.StringFilter']
    Armor_Cost: Union[None, _int, 'types.IntFilter']
    Rare_Material: Union[None, _str, 'types.StringFilter']
    AC_Bonus: Union[None, _int, 'types.IntFilter']
    Save_Bonus: Union[None, _int, 'types.IntFilter']
    Set_Score__Modifier_: Union[None, _int, 'types.IntFilter']
    Bonus_To_Score__Y_N_: Union[None, _str, 'types.StringFilter']
    Weapon_Bonus: Union[None, _int, 'types.IntFilter']
    Spell_Level: Union[None, _int, 'types.IntFilter']
    Unlimited_Charges__Y_N_: Union[None, _str, 'types.StringFilter']
    Charges_Day__Unlimit___7_: Union[None, _int, 'types.IntFilter']
    Charges_Item__Destroyed_: Union[None, _int, 'types.IntFilter']
    Spells_Share_Charges: Union[None, _int, 'types.IntFilter']
    Condition__1Min__Save_: Union[None, _str, 'types.StringFilter']
    Consumable_Damage__Avg_: Union[None, _int, 'types.IntFilter']
    Consumable_Save___Y_N_: Union[None, _str, 'types.StringFilter']
    Semi_Permanent_Damage__Avg_: Union[None, _int, 'types.IntFilter']
    Semi_Perm_Save___Y_N_: Union[None, _str, 'types.StringFilter']
    Duration___Minutes_: Union[None, _int, 'types.IntFilter']
    Permanent_Damage__Avg_: Union[None, _int, 'types.IntFilter']
    Perm_Save___Y_N_: Union[None, _str, 'types.StringFilter']
    Specific_Situations__Y_N_: Union[None, _str, 'types.StringFilter']
    Restore_HP__Avg_: Union[None, _int, 'types.IntFilter']
    MatCost: Union[None, _int, 'types.IntFilter']
    ACCost: Union[None, _int, 'types.IntFilter']
    SaveCost: Union[None, _int, 'types.IntFilter']
    SetScore_Cost: Union[None, _int, 'types.IntFilter']
    BonusScore_Cost: Union[None, _int, 'types.IntFilter']
    WeaponCost: Union[None, _int, 'types.IntFilter']
    Consum_Spell_Cost: Union[None, _int, 'types.IntFilter']
    PermCharges_Cost: Union[None, _int, 'types.IntFilter']
    Charges___Destroyed: Union[None, _int, 'types.IntFilter']
    SpellShare_ChargesCost: Union[None, _int, 'types.IntFilter']
    ConditionCost: Union[None, _int, 'types.IntFilter']
    ConsDMG_Cost: Union[None, _int, 'types.IntFilter']
    Sm_PrDMG_Cost: Union[None, _int, 'types.IntFilter']
    PerDMG_Cost: Union[None, _int, 'types.IntFilter']
    AVGHP_Cost: Union[None, _int, 'types.IntFilter']
    MiscCost: Union[None, _int, 'types.IntFilter']
    Perm_Charges_Cost: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['MagicItemWhereInputRecursive3', List['MagicItemWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MagicItemWhereInputRecursive3']
    OR: List['MagicItemWhereInputRecursive3']
    NOT: List['MagicItemWhereInputRecursive3']


class MagicItemWhereInputRecursive3(TypedDict, total=False):
    """MagicItem arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    rarity: Union[None, _str, 'types.StringFilter']
    attunement: Union[None, _str, 'types.StringFilter']
    Cost__gp_: Union[None, _int, 'types.IntFilter']
    note: Union[None, _str, 'types.StringFilter']
    Armor_Cost: Union[None, _int, 'types.IntFilter']
    Rare_Material: Union[None, _str, 'types.StringFilter']
    AC_Bonus: Union[None, _int, 'types.IntFilter']
    Save_Bonus: Union[None, _int, 'types.IntFilter']
    Set_Score__Modifier_: Union[None, _int, 'types.IntFilter']
    Bonus_To_Score__Y_N_: Union[None, _str, 'types.StringFilter']
    Weapon_Bonus: Union[None, _int, 'types.IntFilter']
    Spell_Level: Union[None, _int, 'types.IntFilter']
    Unlimited_Charges__Y_N_: Union[None, _str, 'types.StringFilter']
    Charges_Day__Unlimit___7_: Union[None, _int, 'types.IntFilter']
    Charges_Item__Destroyed_: Union[None, _int, 'types.IntFilter']
    Spells_Share_Charges: Union[None, _int, 'types.IntFilter']
    Condition__1Min__Save_: Union[None, _str, 'types.StringFilter']
    Consumable_Damage__Avg_: Union[None, _int, 'types.IntFilter']
    Consumable_Save___Y_N_: Union[None, _str, 'types.StringFilter']
    Semi_Permanent_Damage__Avg_: Union[None, _int, 'types.IntFilter']
    Semi_Perm_Save___Y_N_: Union[None, _str, 'types.StringFilter']
    Duration___Minutes_: Union[None, _int, 'types.IntFilter']
    Permanent_Damage__Avg_: Union[None, _int, 'types.IntFilter']
    Perm_Save___Y_N_: Union[None, _str, 'types.StringFilter']
    Specific_Situations__Y_N_: Union[None, _str, 'types.StringFilter']
    Restore_HP__Avg_: Union[None, _int, 'types.IntFilter']
    MatCost: Union[None, _int, 'types.IntFilter']
    ACCost: Union[None, _int, 'types.IntFilter']
    SaveCost: Union[None, _int, 'types.IntFilter']
    SetScore_Cost: Union[None, _int, 'types.IntFilter']
    BonusScore_Cost: Union[None, _int, 'types.IntFilter']
    WeaponCost: Union[None, _int, 'types.IntFilter']
    Consum_Spell_Cost: Union[None, _int, 'types.IntFilter']
    PermCharges_Cost: Union[None, _int, 'types.IntFilter']
    Charges___Destroyed: Union[None, _int, 'types.IntFilter']
    SpellShare_ChargesCost: Union[None, _int, 'types.IntFilter']
    ConditionCost: Union[None, _int, 'types.IntFilter']
    ConsDMG_Cost: Union[None, _int, 'types.IntFilter']
    Sm_PrDMG_Cost: Union[None, _int, 'types.IntFilter']
    PerDMG_Cost: Union[None, _int, 'types.IntFilter']
    AVGHP_Cost: Union[None, _int, 'types.IntFilter']
    MiscCost: Union[None, _int, 'types.IntFilter']
    Perm_Charges_Cost: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['MagicItemWhereInputRecursive4', List['MagicItemWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MagicItemWhereInputRecursive4']
    OR: List['MagicItemWhereInputRecursive4']
    NOT: List['MagicItemWhereInputRecursive4']


class MagicItemWhereInputRecursive4(TypedDict, total=False):
    """MagicItem arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    rarity: Union[None, _str, 'types.StringFilter']
    attunement: Union[None, _str, 'types.StringFilter']
    Cost__gp_: Union[None, _int, 'types.IntFilter']
    note: Union[None, _str, 'types.StringFilter']
    Armor_Cost: Union[None, _int, 'types.IntFilter']
    Rare_Material: Union[None, _str, 'types.StringFilter']
    AC_Bonus: Union[None, _int, 'types.IntFilter']
    Save_Bonus: Union[None, _int, 'types.IntFilter']
    Set_Score__Modifier_: Union[None, _int, 'types.IntFilter']
    Bonus_To_Score__Y_N_: Union[None, _str, 'types.StringFilter']
    Weapon_Bonus: Union[None, _int, 'types.IntFilter']
    Spell_Level: Union[None, _int, 'types.IntFilter']
    Unlimited_Charges__Y_N_: Union[None, _str, 'types.StringFilter']
    Charges_Day__Unlimit___7_: Union[None, _int, 'types.IntFilter']
    Charges_Item__Destroyed_: Union[None, _int, 'types.IntFilter']
    Spells_Share_Charges: Union[None, _int, 'types.IntFilter']
    Condition__1Min__Save_: Union[None, _str, 'types.StringFilter']
    Consumable_Damage__Avg_: Union[None, _int, 'types.IntFilter']
    Consumable_Save___Y_N_: Union[None, _str, 'types.StringFilter']
    Semi_Permanent_Damage__Avg_: Union[None, _int, 'types.IntFilter']
    Semi_Perm_Save___Y_N_: Union[None, _str, 'types.StringFilter']
    Duration___Minutes_: Union[None, _int, 'types.IntFilter']
    Permanent_Damage__Avg_: Union[None, _int, 'types.IntFilter']
    Perm_Save___Y_N_: Union[None, _str, 'types.StringFilter']
    Specific_Situations__Y_N_: Union[None, _str, 'types.StringFilter']
    Restore_HP__Avg_: Union[None, _int, 'types.IntFilter']
    MatCost: Union[None, _int, 'types.IntFilter']
    ACCost: Union[None, _int, 'types.IntFilter']
    SaveCost: Union[None, _int, 'types.IntFilter']
    SetScore_Cost: Union[None, _int, 'types.IntFilter']
    BonusScore_Cost: Union[None, _int, 'types.IntFilter']
    WeaponCost: Union[None, _int, 'types.IntFilter']
    Consum_Spell_Cost: Union[None, _int, 'types.IntFilter']
    PermCharges_Cost: Union[None, _int, 'types.IntFilter']
    Charges___Destroyed: Union[None, _int, 'types.IntFilter']
    SpellShare_ChargesCost: Union[None, _int, 'types.IntFilter']
    ConditionCost: Union[None, _int, 'types.IntFilter']
    ConsDMG_Cost: Union[None, _int, 'types.IntFilter']
    Sm_PrDMG_Cost: Union[None, _int, 'types.IntFilter']
    PerDMG_Cost: Union[None, _int, 'types.IntFilter']
    AVGHP_Cost: Union[None, _int, 'types.IntFilter']
    MiscCost: Union[None, _int, 'types.IntFilter']
    Perm_Charges_Cost: Union[None, _int, 'types.IntFilter']



# aggregate MagicItem types


    

class MagicItemScalarWhereWithAggregatesInput(TypedDict, total=False):
    """MagicItem arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    rarity: Union[_str, 'types.StringWithAggregatesFilter']
    attunement: Union[_str, 'types.StringWithAggregatesFilter']
    Cost__gp_: Union[_int, 'types.IntWithAggregatesFilter']
    note: Union[_str, 'types.StringWithAggregatesFilter']
    Armor_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    Rare_Material: Union[_str, 'types.StringWithAggregatesFilter']
    AC_Bonus: Union[_int, 'types.IntWithAggregatesFilter']
    Save_Bonus: Union[_int, 'types.IntWithAggregatesFilter']
    Set_Score__Modifier_: Union[_int, 'types.IntWithAggregatesFilter']
    Bonus_To_Score__Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Weapon_Bonus: Union[_int, 'types.IntWithAggregatesFilter']
    Spell_Level: Union[_int, 'types.IntWithAggregatesFilter']
    Unlimited_Charges__Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Charges_Day__Unlimit___7_: Union[_int, 'types.IntWithAggregatesFilter']
    Charges_Item__Destroyed_: Union[_int, 'types.IntWithAggregatesFilter']
    Spells_Share_Charges: Union[_int, 'types.IntWithAggregatesFilter']
    Condition__1Min__Save_: Union[_str, 'types.StringWithAggregatesFilter']
    Consumable_Damage__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    Consumable_Save___Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Semi_Permanent_Damage__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    Semi_Perm_Save___Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Duration___Minutes_: Union[_int, 'types.IntWithAggregatesFilter']
    Permanent_Damage__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    Perm_Save___Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Specific_Situations__Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Restore_HP__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    MatCost: Union[_int, 'types.IntWithAggregatesFilter']
    ACCost: Union[_int, 'types.IntWithAggregatesFilter']
    SaveCost: Union[_int, 'types.IntWithAggregatesFilter']
    SetScore_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    BonusScore_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    WeaponCost: Union[_int, 'types.IntWithAggregatesFilter']
    Consum_Spell_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    PermCharges_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    Charges___Destroyed: Union[_int, 'types.IntWithAggregatesFilter']
    SpellShare_ChargesCost: Union[_int, 'types.IntWithAggregatesFilter']
    ConditionCost: Union[_int, 'types.IntWithAggregatesFilter']
    ConsDMG_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    Sm_PrDMG_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    PerDMG_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    AVGHP_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    MiscCost: Union[_int, 'types.IntWithAggregatesFilter']
    Perm_Charges_Cost: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['MagicItemScalarWhereWithAggregatesInputRecursive1']
    OR: List['MagicItemScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MagicItemScalarWhereWithAggregatesInputRecursive1']


class MagicItemScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """MagicItem arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    rarity: Union[_str, 'types.StringWithAggregatesFilter']
    attunement: Union[_str, 'types.StringWithAggregatesFilter']
    Cost__gp_: Union[_int, 'types.IntWithAggregatesFilter']
    note: Union[_str, 'types.StringWithAggregatesFilter']
    Armor_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    Rare_Material: Union[_str, 'types.StringWithAggregatesFilter']
    AC_Bonus: Union[_int, 'types.IntWithAggregatesFilter']
    Save_Bonus: Union[_int, 'types.IntWithAggregatesFilter']
    Set_Score__Modifier_: Union[_int, 'types.IntWithAggregatesFilter']
    Bonus_To_Score__Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Weapon_Bonus: Union[_int, 'types.IntWithAggregatesFilter']
    Spell_Level: Union[_int, 'types.IntWithAggregatesFilter']
    Unlimited_Charges__Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Charges_Day__Unlimit___7_: Union[_int, 'types.IntWithAggregatesFilter']
    Charges_Item__Destroyed_: Union[_int, 'types.IntWithAggregatesFilter']
    Spells_Share_Charges: Union[_int, 'types.IntWithAggregatesFilter']
    Condition__1Min__Save_: Union[_str, 'types.StringWithAggregatesFilter']
    Consumable_Damage__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    Consumable_Save___Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Semi_Permanent_Damage__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    Semi_Perm_Save___Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Duration___Minutes_: Union[_int, 'types.IntWithAggregatesFilter']
    Permanent_Damage__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    Perm_Save___Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Specific_Situations__Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Restore_HP__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    MatCost: Union[_int, 'types.IntWithAggregatesFilter']
    ACCost: Union[_int, 'types.IntWithAggregatesFilter']
    SaveCost: Union[_int, 'types.IntWithAggregatesFilter']
    SetScore_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    BonusScore_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    WeaponCost: Union[_int, 'types.IntWithAggregatesFilter']
    Consum_Spell_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    PermCharges_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    Charges___Destroyed: Union[_int, 'types.IntWithAggregatesFilter']
    SpellShare_ChargesCost: Union[_int, 'types.IntWithAggregatesFilter']
    ConditionCost: Union[_int, 'types.IntWithAggregatesFilter']
    ConsDMG_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    Sm_PrDMG_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    PerDMG_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    AVGHP_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    MiscCost: Union[_int, 'types.IntWithAggregatesFilter']
    Perm_Charges_Cost: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['MagicItemScalarWhereWithAggregatesInputRecursive2']
    OR: List['MagicItemScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MagicItemScalarWhereWithAggregatesInputRecursive2']


class MagicItemScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """MagicItem arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    rarity: Union[_str, 'types.StringWithAggregatesFilter']
    attunement: Union[_str, 'types.StringWithAggregatesFilter']
    Cost__gp_: Union[_int, 'types.IntWithAggregatesFilter']
    note: Union[_str, 'types.StringWithAggregatesFilter']
    Armor_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    Rare_Material: Union[_str, 'types.StringWithAggregatesFilter']
    AC_Bonus: Union[_int, 'types.IntWithAggregatesFilter']
    Save_Bonus: Union[_int, 'types.IntWithAggregatesFilter']
    Set_Score__Modifier_: Union[_int, 'types.IntWithAggregatesFilter']
    Bonus_To_Score__Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Weapon_Bonus: Union[_int, 'types.IntWithAggregatesFilter']
    Spell_Level: Union[_int, 'types.IntWithAggregatesFilter']
    Unlimited_Charges__Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Charges_Day__Unlimit___7_: Union[_int, 'types.IntWithAggregatesFilter']
    Charges_Item__Destroyed_: Union[_int, 'types.IntWithAggregatesFilter']
    Spells_Share_Charges: Union[_int, 'types.IntWithAggregatesFilter']
    Condition__1Min__Save_: Union[_str, 'types.StringWithAggregatesFilter']
    Consumable_Damage__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    Consumable_Save___Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Semi_Permanent_Damage__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    Semi_Perm_Save___Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Duration___Minutes_: Union[_int, 'types.IntWithAggregatesFilter']
    Permanent_Damage__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    Perm_Save___Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Specific_Situations__Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Restore_HP__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    MatCost: Union[_int, 'types.IntWithAggregatesFilter']
    ACCost: Union[_int, 'types.IntWithAggregatesFilter']
    SaveCost: Union[_int, 'types.IntWithAggregatesFilter']
    SetScore_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    BonusScore_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    WeaponCost: Union[_int, 'types.IntWithAggregatesFilter']
    Consum_Spell_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    PermCharges_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    Charges___Destroyed: Union[_int, 'types.IntWithAggregatesFilter']
    SpellShare_ChargesCost: Union[_int, 'types.IntWithAggregatesFilter']
    ConditionCost: Union[_int, 'types.IntWithAggregatesFilter']
    ConsDMG_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    Sm_PrDMG_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    PerDMG_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    AVGHP_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    MiscCost: Union[_int, 'types.IntWithAggregatesFilter']
    Perm_Charges_Cost: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['MagicItemScalarWhereWithAggregatesInputRecursive3']
    OR: List['MagicItemScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MagicItemScalarWhereWithAggregatesInputRecursive3']


class MagicItemScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """MagicItem arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    rarity: Union[_str, 'types.StringWithAggregatesFilter']
    attunement: Union[_str, 'types.StringWithAggregatesFilter']
    Cost__gp_: Union[_int, 'types.IntWithAggregatesFilter']
    note: Union[_str, 'types.StringWithAggregatesFilter']
    Armor_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    Rare_Material: Union[_str, 'types.StringWithAggregatesFilter']
    AC_Bonus: Union[_int, 'types.IntWithAggregatesFilter']
    Save_Bonus: Union[_int, 'types.IntWithAggregatesFilter']
    Set_Score__Modifier_: Union[_int, 'types.IntWithAggregatesFilter']
    Bonus_To_Score__Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Weapon_Bonus: Union[_int, 'types.IntWithAggregatesFilter']
    Spell_Level: Union[_int, 'types.IntWithAggregatesFilter']
    Unlimited_Charges__Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Charges_Day__Unlimit___7_: Union[_int, 'types.IntWithAggregatesFilter']
    Charges_Item__Destroyed_: Union[_int, 'types.IntWithAggregatesFilter']
    Spells_Share_Charges: Union[_int, 'types.IntWithAggregatesFilter']
    Condition__1Min__Save_: Union[_str, 'types.StringWithAggregatesFilter']
    Consumable_Damage__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    Consumable_Save___Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Semi_Permanent_Damage__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    Semi_Perm_Save___Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Duration___Minutes_: Union[_int, 'types.IntWithAggregatesFilter']
    Permanent_Damage__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    Perm_Save___Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Specific_Situations__Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Restore_HP__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    MatCost: Union[_int, 'types.IntWithAggregatesFilter']
    ACCost: Union[_int, 'types.IntWithAggregatesFilter']
    SaveCost: Union[_int, 'types.IntWithAggregatesFilter']
    SetScore_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    BonusScore_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    WeaponCost: Union[_int, 'types.IntWithAggregatesFilter']
    Consum_Spell_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    PermCharges_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    Charges___Destroyed: Union[_int, 'types.IntWithAggregatesFilter']
    SpellShare_ChargesCost: Union[_int, 'types.IntWithAggregatesFilter']
    ConditionCost: Union[_int, 'types.IntWithAggregatesFilter']
    ConsDMG_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    Sm_PrDMG_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    PerDMG_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    AVGHP_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    MiscCost: Union[_int, 'types.IntWithAggregatesFilter']
    Perm_Charges_Cost: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['MagicItemScalarWhereWithAggregatesInputRecursive4']
    OR: List['MagicItemScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MagicItemScalarWhereWithAggregatesInputRecursive4']


class MagicItemScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """MagicItem arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    rarity: Union[_str, 'types.StringWithAggregatesFilter']
    attunement: Union[_str, 'types.StringWithAggregatesFilter']
    Cost__gp_: Union[_int, 'types.IntWithAggregatesFilter']
    note: Union[_str, 'types.StringWithAggregatesFilter']
    Armor_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    Rare_Material: Union[_str, 'types.StringWithAggregatesFilter']
    AC_Bonus: Union[_int, 'types.IntWithAggregatesFilter']
    Save_Bonus: Union[_int, 'types.IntWithAggregatesFilter']
    Set_Score__Modifier_: Union[_int, 'types.IntWithAggregatesFilter']
    Bonus_To_Score__Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Weapon_Bonus: Union[_int, 'types.IntWithAggregatesFilter']
    Spell_Level: Union[_int, 'types.IntWithAggregatesFilter']
    Unlimited_Charges__Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Charges_Day__Unlimit___7_: Union[_int, 'types.IntWithAggregatesFilter']
    Charges_Item__Destroyed_: Union[_int, 'types.IntWithAggregatesFilter']
    Spells_Share_Charges: Union[_int, 'types.IntWithAggregatesFilter']
    Condition__1Min__Save_: Union[_str, 'types.StringWithAggregatesFilter']
    Consumable_Damage__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    Consumable_Save___Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Semi_Permanent_Damage__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    Semi_Perm_Save___Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Duration___Minutes_: Union[_int, 'types.IntWithAggregatesFilter']
    Permanent_Damage__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    Perm_Save___Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Specific_Situations__Y_N_: Union[_str, 'types.StringWithAggregatesFilter']
    Restore_HP__Avg_: Union[_int, 'types.IntWithAggregatesFilter']
    MatCost: Union[_int, 'types.IntWithAggregatesFilter']
    ACCost: Union[_int, 'types.IntWithAggregatesFilter']
    SaveCost: Union[_int, 'types.IntWithAggregatesFilter']
    SetScore_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    BonusScore_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    WeaponCost: Union[_int, 'types.IntWithAggregatesFilter']
    Consum_Spell_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    PermCharges_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    Charges___Destroyed: Union[_int, 'types.IntWithAggregatesFilter']
    SpellShare_ChargesCost: Union[_int, 'types.IntWithAggregatesFilter']
    ConditionCost: Union[_int, 'types.IntWithAggregatesFilter']
    ConsDMG_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    Sm_PrDMG_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    PerDMG_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    AVGHP_Cost: Union[_int, 'types.IntWithAggregatesFilter']
    MiscCost: Union[_int, 'types.IntWithAggregatesFilter']
    Perm_Charges_Cost: Union[_int, 'types.IntWithAggregatesFilter']



class MagicItemGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    rarity: _str
    attunement: _str
    Cost__gp_: _int
    note: _str
    Armor_Cost: _int
    Rare_Material: _str
    AC_Bonus: _int
    Save_Bonus: _int
    Set_Score__Modifier_: _int
    Bonus_To_Score__Y_N_: _str
    Weapon_Bonus: _int
    Spell_Level: _int
    Unlimited_Charges__Y_N_: _str
    Charges_Day__Unlimit___7_: _int
    Charges_Item__Destroyed_: _int
    Spells_Share_Charges: _int
    Condition__1Min__Save_: _str
    Consumable_Damage__Avg_: _int
    Consumable_Save___Y_N_: _str
    Semi_Permanent_Damage__Avg_: _int
    Semi_Perm_Save___Y_N_: _str
    Duration___Minutes_: _int
    Permanent_Damage__Avg_: _int
    Perm_Save___Y_N_: _str
    Specific_Situations__Y_N_: _str
    Restore_HP__Avg_: _int
    MatCost: _int
    ACCost: _int
    SaveCost: _int
    SetScore_Cost: _int
    BonusScore_Cost: _int
    WeaponCost: _int
    Consum_Spell_Cost: _int
    PermCharges_Cost: _int
    Charges___Destroyed: _int
    SpellShare_ChargesCost: _int
    ConditionCost: _int
    ConsDMG_Cost: _int
    Sm_PrDMG_Cost: _int
    PerDMG_Cost: _int
    AVGHP_Cost: _int
    MiscCost: _int
    Perm_Charges_Cost: _int
    _sum: 'MagicItemSumAggregateOutput'
    _avg: 'MagicItemAvgAggregateOutput'
    _min: 'MagicItemMinAggregateOutput'
    _max: 'MagicItemMaxAggregateOutput'
    _count: 'MagicItemCountAggregateOutput'


class MagicItemAvgAggregateOutput(TypedDict, total=False):
    """MagicItem output for aggregating averages"""
    id: float
    Cost__gp_: float
    Armor_Cost: float
    AC_Bonus: float
    Save_Bonus: float
    Set_Score__Modifier_: float
    Weapon_Bonus: float
    Spell_Level: float
    Charges_Day__Unlimit___7_: float
    Charges_Item__Destroyed_: float
    Spells_Share_Charges: float
    Consumable_Damage__Avg_: float
    Semi_Permanent_Damage__Avg_: float
    Duration___Minutes_: float
    Permanent_Damage__Avg_: float
    Restore_HP__Avg_: float
    MatCost: float
    ACCost: float
    SaveCost: float
    SetScore_Cost: float
    BonusScore_Cost: float
    WeaponCost: float
    Consum_Spell_Cost: float
    PermCharges_Cost: float
    Charges___Destroyed: float
    SpellShare_ChargesCost: float
    ConditionCost: float
    ConsDMG_Cost: float
    Sm_PrDMG_Cost: float
    PerDMG_Cost: float
    AVGHP_Cost: float
    MiscCost: float
    Perm_Charges_Cost: float


class MagicItemSumAggregateOutput(TypedDict, total=False):
    """MagicItem output for aggregating sums"""
    id: _int
    Cost__gp_: _int
    Armor_Cost: _int
    AC_Bonus: _int
    Save_Bonus: _int
    Set_Score__Modifier_: _int
    Weapon_Bonus: _int
    Spell_Level: _int
    Charges_Day__Unlimit___7_: _int
    Charges_Item__Destroyed_: _int
    Spells_Share_Charges: _int
    Consumable_Damage__Avg_: _int
    Semi_Permanent_Damage__Avg_: _int
    Duration___Minutes_: _int
    Permanent_Damage__Avg_: _int
    Restore_HP__Avg_: _int
    MatCost: _int
    ACCost: _int
    SaveCost: _int
    SetScore_Cost: _int
    BonusScore_Cost: _int
    WeaponCost: _int
    Consum_Spell_Cost: _int
    PermCharges_Cost: _int
    Charges___Destroyed: _int
    SpellShare_ChargesCost: _int
    ConditionCost: _int
    ConsDMG_Cost: _int
    Sm_PrDMG_Cost: _int
    PerDMG_Cost: _int
    AVGHP_Cost: _int
    MiscCost: _int
    Perm_Charges_Cost: _int


class MagicItemScalarAggregateOutput(TypedDict, total=False):
    """MagicItem output including scalar fields"""
    id: _int
    name: _str
    rarity: _str
    attunement: _str
    Cost__gp_: _int
    note: _str
    Armor_Cost: _int
    Rare_Material: _str
    AC_Bonus: _int
    Save_Bonus: _int
    Set_Score__Modifier_: _int
    Bonus_To_Score__Y_N_: _str
    Weapon_Bonus: _int
    Spell_Level: _int
    Unlimited_Charges__Y_N_: _str
    Charges_Day__Unlimit___7_: _int
    Charges_Item__Destroyed_: _int
    Spells_Share_Charges: _int
    Condition__1Min__Save_: _str
    Consumable_Damage__Avg_: _int
    Consumable_Save___Y_N_: _str
    Semi_Permanent_Damage__Avg_: _int
    Semi_Perm_Save___Y_N_: _str
    Duration___Minutes_: _int
    Permanent_Damage__Avg_: _int
    Perm_Save___Y_N_: _str
    Specific_Situations__Y_N_: _str
    Restore_HP__Avg_: _int
    MatCost: _int
    ACCost: _int
    SaveCost: _int
    SetScore_Cost: _int
    BonusScore_Cost: _int
    WeaponCost: _int
    Consum_Spell_Cost: _int
    PermCharges_Cost: _int
    Charges___Destroyed: _int
    SpellShare_ChargesCost: _int
    ConditionCost: _int
    ConsDMG_Cost: _int
    Sm_PrDMG_Cost: _int
    PerDMG_Cost: _int
    AVGHP_Cost: _int
    MiscCost: _int
    Perm_Charges_Cost: _int


MagicItemMinAggregateOutput = MagicItemScalarAggregateOutput
MagicItemMaxAggregateOutput = MagicItemScalarAggregateOutput


class MagicItemMaxAggregateInput(TypedDict, total=False):
    """MagicItem input for aggregating by max"""
    id: bool
    name: bool
    rarity: bool
    attunement: bool
    Cost__gp_: bool
    note: bool
    Armor_Cost: bool
    Rare_Material: bool
    AC_Bonus: bool
    Save_Bonus: bool
    Set_Score__Modifier_: bool
    Bonus_To_Score__Y_N_: bool
    Weapon_Bonus: bool
    Spell_Level: bool
    Unlimited_Charges__Y_N_: bool
    Charges_Day__Unlimit___7_: bool
    Charges_Item__Destroyed_: bool
    Spells_Share_Charges: bool
    Condition__1Min__Save_: bool
    Consumable_Damage__Avg_: bool
    Consumable_Save___Y_N_: bool
    Semi_Permanent_Damage__Avg_: bool
    Semi_Perm_Save___Y_N_: bool
    Duration___Minutes_: bool
    Permanent_Damage__Avg_: bool
    Perm_Save___Y_N_: bool
    Specific_Situations__Y_N_: bool
    Restore_HP__Avg_: bool
    MatCost: bool
    ACCost: bool
    SaveCost: bool
    SetScore_Cost: bool
    BonusScore_Cost: bool
    WeaponCost: bool
    Consum_Spell_Cost: bool
    PermCharges_Cost: bool
    Charges___Destroyed: bool
    SpellShare_ChargesCost: bool
    ConditionCost: bool
    ConsDMG_Cost: bool
    Sm_PrDMG_Cost: bool
    PerDMG_Cost: bool
    AVGHP_Cost: bool
    MiscCost: bool
    Perm_Charges_Cost: bool


class MagicItemMinAggregateInput(TypedDict, total=False):
    """MagicItem input for aggregating by min"""
    id: bool
    name: bool
    rarity: bool
    attunement: bool
    Cost__gp_: bool
    note: bool
    Armor_Cost: bool
    Rare_Material: bool
    AC_Bonus: bool
    Save_Bonus: bool
    Set_Score__Modifier_: bool
    Bonus_To_Score__Y_N_: bool
    Weapon_Bonus: bool
    Spell_Level: bool
    Unlimited_Charges__Y_N_: bool
    Charges_Day__Unlimit___7_: bool
    Charges_Item__Destroyed_: bool
    Spells_Share_Charges: bool
    Condition__1Min__Save_: bool
    Consumable_Damage__Avg_: bool
    Consumable_Save___Y_N_: bool
    Semi_Permanent_Damage__Avg_: bool
    Semi_Perm_Save___Y_N_: bool
    Duration___Minutes_: bool
    Permanent_Damage__Avg_: bool
    Perm_Save___Y_N_: bool
    Specific_Situations__Y_N_: bool
    Restore_HP__Avg_: bool
    MatCost: bool
    ACCost: bool
    SaveCost: bool
    SetScore_Cost: bool
    BonusScore_Cost: bool
    WeaponCost: bool
    Consum_Spell_Cost: bool
    PermCharges_Cost: bool
    Charges___Destroyed: bool
    SpellShare_ChargesCost: bool
    ConditionCost: bool
    ConsDMG_Cost: bool
    Sm_PrDMG_Cost: bool
    PerDMG_Cost: bool
    AVGHP_Cost: bool
    MiscCost: bool
    Perm_Charges_Cost: bool


class MagicItemNumberAggregateInput(TypedDict, total=False):
    """MagicItem input for aggregating numbers"""
    id: bool
    Cost__gp_: bool
    Armor_Cost: bool
    AC_Bonus: bool
    Save_Bonus: bool
    Set_Score__Modifier_: bool
    Weapon_Bonus: bool
    Spell_Level: bool
    Charges_Day__Unlimit___7_: bool
    Charges_Item__Destroyed_: bool
    Spells_Share_Charges: bool
    Consumable_Damage__Avg_: bool
    Semi_Permanent_Damage__Avg_: bool
    Duration___Minutes_: bool
    Permanent_Damage__Avg_: bool
    Restore_HP__Avg_: bool
    MatCost: bool
    ACCost: bool
    SaveCost: bool
    SetScore_Cost: bool
    BonusScore_Cost: bool
    WeaponCost: bool
    Consum_Spell_Cost: bool
    PermCharges_Cost: bool
    Charges___Destroyed: bool
    SpellShare_ChargesCost: bool
    ConditionCost: bool
    ConsDMG_Cost: bool
    Sm_PrDMG_Cost: bool
    PerDMG_Cost: bool
    AVGHP_Cost: bool
    MiscCost: bool
    Perm_Charges_Cost: bool


MagicItemAvgAggregateInput = MagicItemNumberAggregateInput
MagicItemSumAggregateInput = MagicItemNumberAggregateInput


MagicItemCountAggregateInput = TypedDict(
    'MagicItemCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'rarity': bool,
        'attunement': bool,
        'Cost__gp_': bool,
        'note': bool,
        'Armor_Cost': bool,
        'Rare_Material': bool,
        'AC_Bonus': bool,
        'Save_Bonus': bool,
        'Set_Score__Modifier_': bool,
        'Bonus_To_Score__Y_N_': bool,
        'Weapon_Bonus': bool,
        'Spell_Level': bool,
        'Unlimited_Charges__Y_N_': bool,
        'Charges_Day__Unlimit___7_': bool,
        'Charges_Item__Destroyed_': bool,
        'Spells_Share_Charges': bool,
        'Condition__1Min__Save_': bool,
        'Consumable_Damage__Avg_': bool,
        'Consumable_Save___Y_N_': bool,
        'Semi_Permanent_Damage__Avg_': bool,
        'Semi_Perm_Save___Y_N_': bool,
        'Duration___Minutes_': bool,
        'Permanent_Damage__Avg_': bool,
        'Perm_Save___Y_N_': bool,
        'Specific_Situations__Y_N_': bool,
        'Restore_HP__Avg_': bool,
        'MatCost': bool,
        'ACCost': bool,
        'SaveCost': bool,
        'SetScore_Cost': bool,
        'BonusScore_Cost': bool,
        'WeaponCost': bool,
        'Consum_Spell_Cost': bool,
        'PermCharges_Cost': bool,
        'Charges___Destroyed': bool,
        'SpellShare_ChargesCost': bool,
        'ConditionCost': bool,
        'ConsDMG_Cost': bool,
        'Sm_PrDMG_Cost': bool,
        'PerDMG_Cost': bool,
        'AVGHP_Cost': bool,
        'MiscCost': bool,
        'Perm_Charges_Cost': bool,
        '_all': bool,
    },
    total=False,
)

MagicItemCountAggregateOutput = TypedDict(
    'MagicItemCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'rarity': int,
        'attunement': int,
        'Cost__gp_': int,
        'note': int,
        'Armor_Cost': int,
        'Rare_Material': int,
        'AC_Bonus': int,
        'Save_Bonus': int,
        'Set_Score__Modifier_': int,
        'Bonus_To_Score__Y_N_': int,
        'Weapon_Bonus': int,
        'Spell_Level': int,
        'Unlimited_Charges__Y_N_': int,
        'Charges_Day__Unlimit___7_': int,
        'Charges_Item__Destroyed_': int,
        'Spells_Share_Charges': int,
        'Condition__1Min__Save_': int,
        'Consumable_Damage__Avg_': int,
        'Consumable_Save___Y_N_': int,
        'Semi_Permanent_Damage__Avg_': int,
        'Semi_Perm_Save___Y_N_': int,
        'Duration___Minutes_': int,
        'Permanent_Damage__Avg_': int,
        'Perm_Save___Y_N_': int,
        'Specific_Situations__Y_N_': int,
        'Restore_HP__Avg_': int,
        'MatCost': int,
        'ACCost': int,
        'SaveCost': int,
        'SetScore_Cost': int,
        'BonusScore_Cost': int,
        'WeaponCost': int,
        'Consum_Spell_Cost': int,
        'PermCharges_Cost': int,
        'Charges___Destroyed': int,
        'SpellShare_ChargesCost': int,
        'ConditionCost': int,
        'ConsDMG_Cost': int,
        'Sm_PrDMG_Cost': int,
        'PerDMG_Cost': int,
        'AVGHP_Cost': int,
        'MiscCost': int,
        'Perm_Charges_Cost': int,
        '_all': int,
    },
    total=False,
)


MagicItemKeys = Literal[
    'id',
    'name',
    'rarity',
    'attunement',
    'Cost__gp_',
    'note',
    'Armor_Cost',
    'Rare_Material',
    'AC_Bonus',
    'Save_Bonus',
    'Set_Score__Modifier_',
    'Bonus_To_Score__Y_N_',
    'Weapon_Bonus',
    'Spell_Level',
    'Unlimited_Charges__Y_N_',
    'Charges_Day__Unlimit___7_',
    'Charges_Item__Destroyed_',
    'Spells_Share_Charges',
    'Condition__1Min__Save_',
    'Consumable_Damage__Avg_',
    'Consumable_Save___Y_N_',
    'Semi_Permanent_Damage__Avg_',
    'Semi_Perm_Save___Y_N_',
    'Duration___Minutes_',
    'Permanent_Damage__Avg_',
    'Perm_Save___Y_N_',
    'Specific_Situations__Y_N_',
    'Restore_HP__Avg_',
    'MatCost',
    'ACCost',
    'SaveCost',
    'SetScore_Cost',
    'BonusScore_Cost',
    'WeaponCost',
    'Consum_Spell_Cost',
    'PermCharges_Cost',
    'Charges___Destroyed',
    'SpellShare_ChargesCost',
    'ConditionCost',
    'ConsDMG_Cost',
    'Sm_PrDMG_Cost',
    'PerDMG_Cost',
    'AVGHP_Cost',
    'MiscCost',
    'Perm_Charges_Cost',
]
MagicItemScalarFieldKeys = Literal[
    'id',
    'name',
    'rarity',
    'attunement',
    'Cost__gp_',
    'note',
    'Armor_Cost',
    'Rare_Material',
    'AC_Bonus',
    'Save_Bonus',
    'Set_Score__Modifier_',
    'Bonus_To_Score__Y_N_',
    'Weapon_Bonus',
    'Spell_Level',
    'Unlimited_Charges__Y_N_',
    'Charges_Day__Unlimit___7_',
    'Charges_Item__Destroyed_',
    'Spells_Share_Charges',
    'Condition__1Min__Save_',
    'Consumable_Damage__Avg_',
    'Consumable_Save___Y_N_',
    'Semi_Permanent_Damage__Avg_',
    'Semi_Perm_Save___Y_N_',
    'Duration___Minutes_',
    'Permanent_Damage__Avg_',
    'Perm_Save___Y_N_',
    'Specific_Situations__Y_N_',
    'Restore_HP__Avg_',
    'MatCost',
    'ACCost',
    'SaveCost',
    'SetScore_Cost',
    'BonusScore_Cost',
    'WeaponCost',
    'Consum_Spell_Cost',
    'PermCharges_Cost',
    'Charges___Destroyed',
    'SpellShare_ChargesCost',
    'ConditionCost',
    'ConsDMG_Cost',
    'Sm_PrDMG_Cost',
    'PerDMG_Cost',
    'AVGHP_Cost',
    'MiscCost',
    'Perm_Charges_Cost',
]
MagicItemScalarFieldKeysT = TypeVar('MagicItemScalarFieldKeysT', bound=MagicItemScalarFieldKeys)

MagicItemRelationalFieldKeys = _NoneType

# Monster types

class MonsterOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Monster create method"""
    size: Optional[_str]
    type: Optional[_str]
    alignment: Optional[_str]
    habitat: Optional[_str]
    mainHabitat: Optional[_str]
    otherHabitat: Optional[_str]
    treasure: Optional[_str]
    ac: Optional[_str]
    hp: Optional[_str]
    initiative: Optional[_str]
    walk: Optional[_str]
    burrow: Optional[_str]
    climb: Optional[_str]
    fly: Optional[_str]
    hover: Optional[_str]
    swim: Optional[_str]
    strMod: Optional[_str]
    intMod: Optional[_str]
    dexMod: Optional[_str]
    wisMod: Optional[_str]
    conMod: Optional[_str]
    chaMod: Optional[_str]
    strSave: Optional[_str]
    intSave: Optional[_str]
    dexSave: Optional[_str]
    wisSave: Optional[_str]
    conSave: Optional[_str]
    chaSave: Optional[_str]
    proficient: Optional[_str]
    expertise: Optional[_str]
    vulnerabilities: Optional[_str]
    slashing: Optional[_str]
    immunitiesConditions: Optional[_str]
    immunitiesDamage: Optional[_str]
    blindsight: Optional[_str]
    darkvision: Optional[_str]
    truesight: Optional[_str]
    tremorsense: Optional[_str]
    passivePerception: Optional[_str]
    languages: Optional[_str]
    cr: Optional[_str]
    XP_: Optional[_str]
    pb: Optional[_str]
    traits: Optional[_str]
    legendaryResistanceCount: Optional[_str]
    of_Atk: Optional[_str]
    atk1Type: Optional[_str]
    atk1Mod: Optional[_str]
    atk1Range: Optional[_str]
    atk1RangeShort: Optional[_str]
    atk1Dam: Optional[_str]
    atk1DamageType: Optional[_str]
    atk2Type: Optional[_str]
    atk2Mod: Optional[_str]
    atk2Range: Optional[_str]
    atk2RangeShort: Optional[_str]
    atk2Dam: Optional[_str]
    atk2DamageType: Optional[_str]
    atk3Type: Optional[_str]
    atk3Mod: Optional[_str]
    atk3Range: Optional[_str]
    atk3RangeShort: Optional[_str]
    atk3Dam: Optional[_str]
    atk3DamageType: Optional[_str]
    atk4Type: Optional[_str]
    atk4Mod: Optional[_str]
    atk4Range: Optional[_str]
    atk4RangeShort: Optional[_str]
    atk4Dam: Optional[_str]
    atk4DamageType: Optional[_str]
    saveDC: Optional[_str]
    savingThrow: Optional[_str]
    actionNotes: Optional[_str]
    ability: Optional[_str]
    spellSaveDC: Optional[_str]
    spellSavingThrows: Optional[_str]
    spellAttack: Optional[_str]
    At_Will: Optional[_str]
    Day3: Optional[_str]
    Day2: Optional[_str]
    Day1: Optional[_str]
    bonusAction: Optional[_str]
    reaction: Optional[_str]
    amount: Optional[_str]
    legendaryActionSaveDC: Optional[_str]
    legendaryActionSavingThrow: Optional[_str]
    Legendary_Actions_: Optional[_str]
    lair: Optional[_str]
    xp: Optional[_str]
    Legendary_Resistance: Optional[_str]
    Legendary_Actions: Optional[_str]
    lairSaveDC: Optional[_str]
    lairSavingThrows: Optional[_str]
    other: Optional[_str]
    align: Optional[_str]
    speeds: Optional[_str]
    STR: Optional[_str]
    DEX: Optional[_str]
    CON: Optional[_str]
    INT: Optional[_str]
    WIS: Optional[_str]
    CHA: Optional[_str]
    Sav__Throws: Optional[_str]
    skills: Optional[_str]
    WRI: Optional[_str]
    senses: Optional[_str]
    additional: Optional[_str]
    font: Optional[_str]
    additionalInfo: Optional[_str]
    author: Optional[_str]


class MonsterCreateInput(MonsterOptionalCreateInput):
    """Required arguments to the Monster create method"""
    id: _str
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MonsterOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Monster create method, without relations"""
    size: Optional[_str]
    type: Optional[_str]
    alignment: Optional[_str]
    habitat: Optional[_str]
    mainHabitat: Optional[_str]
    otherHabitat: Optional[_str]
    treasure: Optional[_str]
    ac: Optional[_str]
    hp: Optional[_str]
    initiative: Optional[_str]
    walk: Optional[_str]
    burrow: Optional[_str]
    climb: Optional[_str]
    fly: Optional[_str]
    hover: Optional[_str]
    swim: Optional[_str]
    strMod: Optional[_str]
    intMod: Optional[_str]
    dexMod: Optional[_str]
    wisMod: Optional[_str]
    conMod: Optional[_str]
    chaMod: Optional[_str]
    strSave: Optional[_str]
    intSave: Optional[_str]
    dexSave: Optional[_str]
    wisSave: Optional[_str]
    conSave: Optional[_str]
    chaSave: Optional[_str]
    proficient: Optional[_str]
    expertise: Optional[_str]
    vulnerabilities: Optional[_str]
    slashing: Optional[_str]
    immunitiesConditions: Optional[_str]
    immunitiesDamage: Optional[_str]
    blindsight: Optional[_str]
    darkvision: Optional[_str]
    truesight: Optional[_str]
    tremorsense: Optional[_str]
    passivePerception: Optional[_str]
    languages: Optional[_str]
    cr: Optional[_str]
    XP_: Optional[_str]
    pb: Optional[_str]
    traits: Optional[_str]
    legendaryResistanceCount: Optional[_str]
    of_Atk: Optional[_str]
    atk1Type: Optional[_str]
    atk1Mod: Optional[_str]
    atk1Range: Optional[_str]
    atk1RangeShort: Optional[_str]
    atk1Dam: Optional[_str]
    atk1DamageType: Optional[_str]
    atk2Type: Optional[_str]
    atk2Mod: Optional[_str]
    atk2Range: Optional[_str]
    atk2RangeShort: Optional[_str]
    atk2Dam: Optional[_str]
    atk2DamageType: Optional[_str]
    atk3Type: Optional[_str]
    atk3Mod: Optional[_str]
    atk3Range: Optional[_str]
    atk3RangeShort: Optional[_str]
    atk3Dam: Optional[_str]
    atk3DamageType: Optional[_str]
    atk4Type: Optional[_str]
    atk4Mod: Optional[_str]
    atk4Range: Optional[_str]
    atk4RangeShort: Optional[_str]
    atk4Dam: Optional[_str]
    atk4DamageType: Optional[_str]
    saveDC: Optional[_str]
    savingThrow: Optional[_str]
    actionNotes: Optional[_str]
    ability: Optional[_str]
    spellSaveDC: Optional[_str]
    spellSavingThrows: Optional[_str]
    spellAttack: Optional[_str]
    At_Will: Optional[_str]
    Day3: Optional[_str]
    Day2: Optional[_str]
    Day1: Optional[_str]
    bonusAction: Optional[_str]
    reaction: Optional[_str]
    amount: Optional[_str]
    legendaryActionSaveDC: Optional[_str]
    legendaryActionSavingThrow: Optional[_str]
    Legendary_Actions_: Optional[_str]
    lair: Optional[_str]
    xp: Optional[_str]
    Legendary_Resistance: Optional[_str]
    Legendary_Actions: Optional[_str]
    lairSaveDC: Optional[_str]
    lairSavingThrows: Optional[_str]
    other: Optional[_str]
    align: Optional[_str]
    speeds: Optional[_str]
    STR: Optional[_str]
    DEX: Optional[_str]
    CON: Optional[_str]
    INT: Optional[_str]
    WIS: Optional[_str]
    CHA: Optional[_str]
    Sav__Throws: Optional[_str]
    skills: Optional[_str]
    WRI: Optional[_str]
    senses: Optional[_str]
    additional: Optional[_str]
    font: Optional[_str]
    additionalInfo: Optional[_str]
    author: Optional[_str]


class MonsterCreateWithoutRelationsInput(MonsterOptionalCreateWithoutRelationsInput):
    """Required arguments to the Monster create method, without relations"""
    id: _str
    name: _str

class MonsterConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MonsterCreateWithoutRelationsInput'
    where: 'MonsterWhereUniqueInput'

class MonsterCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MonsterCreateWithoutRelationsInput'
    connect: 'MonsterWhereUniqueInput'
    connect_or_create: 'MonsterConnectOrCreateWithoutRelationsInput'


class MonsterCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MonsterCreateWithoutRelationsInput', List['MonsterCreateWithoutRelationsInput']]
    connect: Union['MonsterWhereUniqueInput', List['MonsterWhereUniqueInput']]
    connect_or_create: Union['MonsterConnectOrCreateWithoutRelationsInput', List['MonsterConnectOrCreateWithoutRelationsInput']]

_MonsterWhereUnique_id_Input = TypedDict(
    '_MonsterWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

MonsterWhereUniqueInput = _MonsterWhereUnique_id_Input


class MonsterUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    size: Optional[_str]
    type: Optional[_str]
    alignment: Optional[_str]
    habitat: Optional[_str]
    mainHabitat: Optional[_str]
    otherHabitat: Optional[_str]
    treasure: Optional[_str]
    ac: Optional[_str]
    hp: Optional[_str]
    initiative: Optional[_str]
    walk: Optional[_str]
    burrow: Optional[_str]
    climb: Optional[_str]
    fly: Optional[_str]
    hover: Optional[_str]
    swim: Optional[_str]
    strMod: Optional[_str]
    intMod: Optional[_str]
    dexMod: Optional[_str]
    wisMod: Optional[_str]
    conMod: Optional[_str]
    chaMod: Optional[_str]
    strSave: Optional[_str]
    intSave: Optional[_str]
    dexSave: Optional[_str]
    wisSave: Optional[_str]
    conSave: Optional[_str]
    chaSave: Optional[_str]
    proficient: Optional[_str]
    expertise: Optional[_str]
    vulnerabilities: Optional[_str]
    slashing: Optional[_str]
    immunitiesConditions: Optional[_str]
    immunitiesDamage: Optional[_str]
    blindsight: Optional[_str]
    darkvision: Optional[_str]
    truesight: Optional[_str]
    tremorsense: Optional[_str]
    passivePerception: Optional[_str]
    languages: Optional[_str]
    cr: Optional[_str]
    XP_: Optional[_str]
    pb: Optional[_str]
    traits: Optional[_str]
    legendaryResistanceCount: Optional[_str]
    of_Atk: Optional[_str]
    atk1Type: Optional[_str]
    atk1Mod: Optional[_str]
    atk1Range: Optional[_str]
    atk1RangeShort: Optional[_str]
    atk1Dam: Optional[_str]
    atk1DamageType: Optional[_str]
    atk2Type: Optional[_str]
    atk2Mod: Optional[_str]
    atk2Range: Optional[_str]
    atk2RangeShort: Optional[_str]
    atk2Dam: Optional[_str]
    atk2DamageType: Optional[_str]
    atk3Type: Optional[_str]
    atk3Mod: Optional[_str]
    atk3Range: Optional[_str]
    atk3RangeShort: Optional[_str]
    atk3Dam: Optional[_str]
    atk3DamageType: Optional[_str]
    atk4Type: Optional[_str]
    atk4Mod: Optional[_str]
    atk4Range: Optional[_str]
    atk4RangeShort: Optional[_str]
    atk4Dam: Optional[_str]
    atk4DamageType: Optional[_str]
    saveDC: Optional[_str]
    savingThrow: Optional[_str]
    actionNotes: Optional[_str]
    ability: Optional[_str]
    spellSaveDC: Optional[_str]
    spellSavingThrows: Optional[_str]
    spellAttack: Optional[_str]
    At_Will: Optional[_str]
    Day3: Optional[_str]
    Day2: Optional[_str]
    Day1: Optional[_str]
    bonusAction: Optional[_str]
    reaction: Optional[_str]
    amount: Optional[_str]
    legendaryActionSaveDC: Optional[_str]
    legendaryActionSavingThrow: Optional[_str]
    Legendary_Actions_: Optional[_str]
    lair: Optional[_str]
    xp: Optional[_str]
    Legendary_Resistance: Optional[_str]
    Legendary_Actions: Optional[_str]
    lairSaveDC: Optional[_str]
    lairSavingThrows: Optional[_str]
    other: Optional[_str]
    align: Optional[_str]
    speeds: Optional[_str]
    STR: Optional[_str]
    DEX: Optional[_str]
    CON: Optional[_str]
    INT: Optional[_str]
    WIS: Optional[_str]
    CHA: Optional[_str]
    Sav__Throws: Optional[_str]
    skills: Optional[_str]
    WRI: Optional[_str]
    senses: Optional[_str]
    additional: Optional[_str]
    font: Optional[_str]
    additionalInfo: Optional[_str]
    author: Optional[_str]


class MonsterUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    size: Optional[_str]
    type: Optional[_str]
    alignment: Optional[_str]
    habitat: Optional[_str]
    mainHabitat: Optional[_str]
    otherHabitat: Optional[_str]
    treasure: Optional[_str]
    ac: Optional[_str]
    hp: Optional[_str]
    initiative: Optional[_str]
    walk: Optional[_str]
    burrow: Optional[_str]
    climb: Optional[_str]
    fly: Optional[_str]
    hover: Optional[_str]
    swim: Optional[_str]
    strMod: Optional[_str]
    intMod: Optional[_str]
    dexMod: Optional[_str]
    wisMod: Optional[_str]
    conMod: Optional[_str]
    chaMod: Optional[_str]
    strSave: Optional[_str]
    intSave: Optional[_str]
    dexSave: Optional[_str]
    wisSave: Optional[_str]
    conSave: Optional[_str]
    chaSave: Optional[_str]
    proficient: Optional[_str]
    expertise: Optional[_str]
    vulnerabilities: Optional[_str]
    slashing: Optional[_str]
    immunitiesConditions: Optional[_str]
    immunitiesDamage: Optional[_str]
    blindsight: Optional[_str]
    darkvision: Optional[_str]
    truesight: Optional[_str]
    tremorsense: Optional[_str]
    passivePerception: Optional[_str]
    languages: Optional[_str]
    cr: Optional[_str]
    XP_: Optional[_str]
    pb: Optional[_str]
    traits: Optional[_str]
    legendaryResistanceCount: Optional[_str]
    of_Atk: Optional[_str]
    atk1Type: Optional[_str]
    atk1Mod: Optional[_str]
    atk1Range: Optional[_str]
    atk1RangeShort: Optional[_str]
    atk1Dam: Optional[_str]
    atk1DamageType: Optional[_str]
    atk2Type: Optional[_str]
    atk2Mod: Optional[_str]
    atk2Range: Optional[_str]
    atk2RangeShort: Optional[_str]
    atk2Dam: Optional[_str]
    atk2DamageType: Optional[_str]
    atk3Type: Optional[_str]
    atk3Mod: Optional[_str]
    atk3Range: Optional[_str]
    atk3RangeShort: Optional[_str]
    atk3Dam: Optional[_str]
    atk3DamageType: Optional[_str]
    atk4Type: Optional[_str]
    atk4Mod: Optional[_str]
    atk4Range: Optional[_str]
    atk4RangeShort: Optional[_str]
    atk4Dam: Optional[_str]
    atk4DamageType: Optional[_str]
    saveDC: Optional[_str]
    savingThrow: Optional[_str]
    actionNotes: Optional[_str]
    ability: Optional[_str]
    spellSaveDC: Optional[_str]
    spellSavingThrows: Optional[_str]
    spellAttack: Optional[_str]
    At_Will: Optional[_str]
    Day3: Optional[_str]
    Day2: Optional[_str]
    Day1: Optional[_str]
    bonusAction: Optional[_str]
    reaction: Optional[_str]
    amount: Optional[_str]
    legendaryActionSaveDC: Optional[_str]
    legendaryActionSavingThrow: Optional[_str]
    Legendary_Actions_: Optional[_str]
    lair: Optional[_str]
    xp: Optional[_str]
    Legendary_Resistance: Optional[_str]
    Legendary_Actions: Optional[_str]
    lairSaveDC: Optional[_str]
    lairSavingThrows: Optional[_str]
    other: Optional[_str]
    align: Optional[_str]
    speeds: Optional[_str]
    STR: Optional[_str]
    DEX: Optional[_str]
    CON: Optional[_str]
    INT: Optional[_str]
    WIS: Optional[_str]
    CHA: Optional[_str]
    Sav__Throws: Optional[_str]
    skills: Optional[_str]
    WRI: Optional[_str]
    senses: Optional[_str]
    additional: Optional[_str]
    font: Optional[_str]
    additionalInfo: Optional[_str]
    author: Optional[_str]


class MonsterUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MonsterCreateWithoutRelationsInput']
    connect: List['MonsterWhereUniqueInput']
    connect_or_create: List['MonsterConnectOrCreateWithoutRelationsInput']
    set: List['MonsterWhereUniqueInput']
    disconnect: List['MonsterWhereUniqueInput']
    delete: List['MonsterWhereUniqueInput']

    # TODO
    # update: List['MonsterUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MonsterUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MonsterScalarWhereInput']
    # upsert: List['MonsterUpserteWithWhereUniqueWithoutRelationsInput']


class MonsterUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MonsterCreateWithoutRelationsInput'
    connect: 'MonsterWhereUniqueInput'
    connect_or_create: 'MonsterConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MonsterUpdateInput'
    # upsert: 'MonsterUpsertWithoutRelationsInput'


class MonsterUpsertInput(TypedDict):
    create: 'MonsterCreateInput'
    update: 'MonsterUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Monster_id_OrderByInput = TypedDict(
    '_Monster_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Monster_name_OrderByInput = TypedDict(
    '_Monster_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Monster_size_OrderByInput = TypedDict(
    '_Monster_size_OrderByInput',
    {
        'size': 'SortOrder',
    },
    total=True
)

_Monster_type_OrderByInput = TypedDict(
    '_Monster_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_Monster_alignment_OrderByInput = TypedDict(
    '_Monster_alignment_OrderByInput',
    {
        'alignment': 'SortOrder',
    },
    total=True
)

_Monster_habitat_OrderByInput = TypedDict(
    '_Monster_habitat_OrderByInput',
    {
        'habitat': 'SortOrder',
    },
    total=True
)

_Monster_mainHabitat_OrderByInput = TypedDict(
    '_Monster_mainHabitat_OrderByInput',
    {
        'mainHabitat': 'SortOrder',
    },
    total=True
)

_Monster_otherHabitat_OrderByInput = TypedDict(
    '_Monster_otherHabitat_OrderByInput',
    {
        'otherHabitat': 'SortOrder',
    },
    total=True
)

_Monster_treasure_OrderByInput = TypedDict(
    '_Monster_treasure_OrderByInput',
    {
        'treasure': 'SortOrder',
    },
    total=True
)

_Monster_ac_OrderByInput = TypedDict(
    '_Monster_ac_OrderByInput',
    {
        'ac': 'SortOrder',
    },
    total=True
)

_Monster_hp_OrderByInput = TypedDict(
    '_Monster_hp_OrderByInput',
    {
        'hp': 'SortOrder',
    },
    total=True
)

_Monster_initiative_OrderByInput = TypedDict(
    '_Monster_initiative_OrderByInput',
    {
        'initiative': 'SortOrder',
    },
    total=True
)

_Monster_walk_OrderByInput = TypedDict(
    '_Monster_walk_OrderByInput',
    {
        'walk': 'SortOrder',
    },
    total=True
)

_Monster_burrow_OrderByInput = TypedDict(
    '_Monster_burrow_OrderByInput',
    {
        'burrow': 'SortOrder',
    },
    total=True
)

_Monster_climb_OrderByInput = TypedDict(
    '_Monster_climb_OrderByInput',
    {
        'climb': 'SortOrder',
    },
    total=True
)

_Monster_fly_OrderByInput = TypedDict(
    '_Monster_fly_OrderByInput',
    {
        'fly': 'SortOrder',
    },
    total=True
)

_Monster_hover_OrderByInput = TypedDict(
    '_Monster_hover_OrderByInput',
    {
        'hover': 'SortOrder',
    },
    total=True
)

_Monster_swim_OrderByInput = TypedDict(
    '_Monster_swim_OrderByInput',
    {
        'swim': 'SortOrder',
    },
    total=True
)

_Monster_strMod_OrderByInput = TypedDict(
    '_Monster_strMod_OrderByInput',
    {
        'strMod': 'SortOrder',
    },
    total=True
)

_Monster_intMod_OrderByInput = TypedDict(
    '_Monster_intMod_OrderByInput',
    {
        'intMod': 'SortOrder',
    },
    total=True
)

_Monster_dexMod_OrderByInput = TypedDict(
    '_Monster_dexMod_OrderByInput',
    {
        'dexMod': 'SortOrder',
    },
    total=True
)

_Monster_wisMod_OrderByInput = TypedDict(
    '_Monster_wisMod_OrderByInput',
    {
        'wisMod': 'SortOrder',
    },
    total=True
)

_Monster_conMod_OrderByInput = TypedDict(
    '_Monster_conMod_OrderByInput',
    {
        'conMod': 'SortOrder',
    },
    total=True
)

_Monster_chaMod_OrderByInput = TypedDict(
    '_Monster_chaMod_OrderByInput',
    {
        'chaMod': 'SortOrder',
    },
    total=True
)

_Monster_strSave_OrderByInput = TypedDict(
    '_Monster_strSave_OrderByInput',
    {
        'strSave': 'SortOrder',
    },
    total=True
)

_Monster_intSave_OrderByInput = TypedDict(
    '_Monster_intSave_OrderByInput',
    {
        'intSave': 'SortOrder',
    },
    total=True
)

_Monster_dexSave_OrderByInput = TypedDict(
    '_Monster_dexSave_OrderByInput',
    {
        'dexSave': 'SortOrder',
    },
    total=True
)

_Monster_wisSave_OrderByInput = TypedDict(
    '_Monster_wisSave_OrderByInput',
    {
        'wisSave': 'SortOrder',
    },
    total=True
)

_Monster_conSave_OrderByInput = TypedDict(
    '_Monster_conSave_OrderByInput',
    {
        'conSave': 'SortOrder',
    },
    total=True
)

_Monster_chaSave_OrderByInput = TypedDict(
    '_Monster_chaSave_OrderByInput',
    {
        'chaSave': 'SortOrder',
    },
    total=True
)

_Monster_proficient_OrderByInput = TypedDict(
    '_Monster_proficient_OrderByInput',
    {
        'proficient': 'SortOrder',
    },
    total=True
)

_Monster_expertise_OrderByInput = TypedDict(
    '_Monster_expertise_OrderByInput',
    {
        'expertise': 'SortOrder',
    },
    total=True
)

_Monster_vulnerabilities_OrderByInput = TypedDict(
    '_Monster_vulnerabilities_OrderByInput',
    {
        'vulnerabilities': 'SortOrder',
    },
    total=True
)

_Monster_slashing_OrderByInput = TypedDict(
    '_Monster_slashing_OrderByInput',
    {
        'slashing': 'SortOrder',
    },
    total=True
)

_Monster_immunitiesConditions_OrderByInput = TypedDict(
    '_Monster_immunitiesConditions_OrderByInput',
    {
        'immunitiesConditions': 'SortOrder',
    },
    total=True
)

_Monster_immunitiesDamage_OrderByInput = TypedDict(
    '_Monster_immunitiesDamage_OrderByInput',
    {
        'immunitiesDamage': 'SortOrder',
    },
    total=True
)

_Monster_blindsight_OrderByInput = TypedDict(
    '_Monster_blindsight_OrderByInput',
    {
        'blindsight': 'SortOrder',
    },
    total=True
)

_Monster_darkvision_OrderByInput = TypedDict(
    '_Monster_darkvision_OrderByInput',
    {
        'darkvision': 'SortOrder',
    },
    total=True
)

_Monster_truesight_OrderByInput = TypedDict(
    '_Monster_truesight_OrderByInput',
    {
        'truesight': 'SortOrder',
    },
    total=True
)

_Monster_tremorsense_OrderByInput = TypedDict(
    '_Monster_tremorsense_OrderByInput',
    {
        'tremorsense': 'SortOrder',
    },
    total=True
)

_Monster_passivePerception_OrderByInput = TypedDict(
    '_Monster_passivePerception_OrderByInput',
    {
        'passivePerception': 'SortOrder',
    },
    total=True
)

_Monster_languages_OrderByInput = TypedDict(
    '_Monster_languages_OrderByInput',
    {
        'languages': 'SortOrder',
    },
    total=True
)

_Monster_cr_OrderByInput = TypedDict(
    '_Monster_cr_OrderByInput',
    {
        'cr': 'SortOrder',
    },
    total=True
)

_Monster_XP__OrderByInput = TypedDict(
    '_Monster_XP__OrderByInput',
    {
        'XP_': 'SortOrder',
    },
    total=True
)

_Monster_pb_OrderByInput = TypedDict(
    '_Monster_pb_OrderByInput',
    {
        'pb': 'SortOrder',
    },
    total=True
)

_Monster_traits_OrderByInput = TypedDict(
    '_Monster_traits_OrderByInput',
    {
        'traits': 'SortOrder',
    },
    total=True
)

_Monster_legendaryResistanceCount_OrderByInput = TypedDict(
    '_Monster_legendaryResistanceCount_OrderByInput',
    {
        'legendaryResistanceCount': 'SortOrder',
    },
    total=True
)

_Monster_of_Atk_OrderByInput = TypedDict(
    '_Monster_of_Atk_OrderByInput',
    {
        'of_Atk': 'SortOrder',
    },
    total=True
)

_Monster_atk1Type_OrderByInput = TypedDict(
    '_Monster_atk1Type_OrderByInput',
    {
        'atk1Type': 'SortOrder',
    },
    total=True
)

_Monster_atk1Mod_OrderByInput = TypedDict(
    '_Monster_atk1Mod_OrderByInput',
    {
        'atk1Mod': 'SortOrder',
    },
    total=True
)

_Monster_atk1Range_OrderByInput = TypedDict(
    '_Monster_atk1Range_OrderByInput',
    {
        'atk1Range': 'SortOrder',
    },
    total=True
)

_Monster_atk1RangeShort_OrderByInput = TypedDict(
    '_Monster_atk1RangeShort_OrderByInput',
    {
        'atk1RangeShort': 'SortOrder',
    },
    total=True
)

_Monster_atk1Dam_OrderByInput = TypedDict(
    '_Monster_atk1Dam_OrderByInput',
    {
        'atk1Dam': 'SortOrder',
    },
    total=True
)

_Monster_atk1DamageType_OrderByInput = TypedDict(
    '_Monster_atk1DamageType_OrderByInput',
    {
        'atk1DamageType': 'SortOrder',
    },
    total=True
)

_Monster_atk2Type_OrderByInput = TypedDict(
    '_Monster_atk2Type_OrderByInput',
    {
        'atk2Type': 'SortOrder',
    },
    total=True
)

_Monster_atk2Mod_OrderByInput = TypedDict(
    '_Monster_atk2Mod_OrderByInput',
    {
        'atk2Mod': 'SortOrder',
    },
    total=True
)

_Monster_atk2Range_OrderByInput = TypedDict(
    '_Monster_atk2Range_OrderByInput',
    {
        'atk2Range': 'SortOrder',
    },
    total=True
)

_Monster_atk2RangeShort_OrderByInput = TypedDict(
    '_Monster_atk2RangeShort_OrderByInput',
    {
        'atk2RangeShort': 'SortOrder',
    },
    total=True
)

_Monster_atk2Dam_OrderByInput = TypedDict(
    '_Monster_atk2Dam_OrderByInput',
    {
        'atk2Dam': 'SortOrder',
    },
    total=True
)

_Monster_atk2DamageType_OrderByInput = TypedDict(
    '_Monster_atk2DamageType_OrderByInput',
    {
        'atk2DamageType': 'SortOrder',
    },
    total=True
)

_Monster_atk3Type_OrderByInput = TypedDict(
    '_Monster_atk3Type_OrderByInput',
    {
        'atk3Type': 'SortOrder',
    },
    total=True
)

_Monster_atk3Mod_OrderByInput = TypedDict(
    '_Monster_atk3Mod_OrderByInput',
    {
        'atk3Mod': 'SortOrder',
    },
    total=True
)

_Monster_atk3Range_OrderByInput = TypedDict(
    '_Monster_atk3Range_OrderByInput',
    {
        'atk3Range': 'SortOrder',
    },
    total=True
)

_Monster_atk3RangeShort_OrderByInput = TypedDict(
    '_Monster_atk3RangeShort_OrderByInput',
    {
        'atk3RangeShort': 'SortOrder',
    },
    total=True
)

_Monster_atk3Dam_OrderByInput = TypedDict(
    '_Monster_atk3Dam_OrderByInput',
    {
        'atk3Dam': 'SortOrder',
    },
    total=True
)

_Monster_atk3DamageType_OrderByInput = TypedDict(
    '_Monster_atk3DamageType_OrderByInput',
    {
        'atk3DamageType': 'SortOrder',
    },
    total=True
)

_Monster_atk4Type_OrderByInput = TypedDict(
    '_Monster_atk4Type_OrderByInput',
    {
        'atk4Type': 'SortOrder',
    },
    total=True
)

_Monster_atk4Mod_OrderByInput = TypedDict(
    '_Monster_atk4Mod_OrderByInput',
    {
        'atk4Mod': 'SortOrder',
    },
    total=True
)

_Monster_atk4Range_OrderByInput = TypedDict(
    '_Monster_atk4Range_OrderByInput',
    {
        'atk4Range': 'SortOrder',
    },
    total=True
)

_Monster_atk4RangeShort_OrderByInput = TypedDict(
    '_Monster_atk4RangeShort_OrderByInput',
    {
        'atk4RangeShort': 'SortOrder',
    },
    total=True
)

_Monster_atk4Dam_OrderByInput = TypedDict(
    '_Monster_atk4Dam_OrderByInput',
    {
        'atk4Dam': 'SortOrder',
    },
    total=True
)

_Monster_atk4DamageType_OrderByInput = TypedDict(
    '_Monster_atk4DamageType_OrderByInput',
    {
        'atk4DamageType': 'SortOrder',
    },
    total=True
)

_Monster_saveDC_OrderByInput = TypedDict(
    '_Monster_saveDC_OrderByInput',
    {
        'saveDC': 'SortOrder',
    },
    total=True
)

_Monster_savingThrow_OrderByInput = TypedDict(
    '_Monster_savingThrow_OrderByInput',
    {
        'savingThrow': 'SortOrder',
    },
    total=True
)

_Monster_actionNotes_OrderByInput = TypedDict(
    '_Monster_actionNotes_OrderByInput',
    {
        'actionNotes': 'SortOrder',
    },
    total=True
)

_Monster_ability_OrderByInput = TypedDict(
    '_Monster_ability_OrderByInput',
    {
        'ability': 'SortOrder',
    },
    total=True
)

_Monster_spellSaveDC_OrderByInput = TypedDict(
    '_Monster_spellSaveDC_OrderByInput',
    {
        'spellSaveDC': 'SortOrder',
    },
    total=True
)

_Monster_spellSavingThrows_OrderByInput = TypedDict(
    '_Monster_spellSavingThrows_OrderByInput',
    {
        'spellSavingThrows': 'SortOrder',
    },
    total=True
)

_Monster_spellAttack_OrderByInput = TypedDict(
    '_Monster_spellAttack_OrderByInput',
    {
        'spellAttack': 'SortOrder',
    },
    total=True
)

_Monster_At_Will_OrderByInput = TypedDict(
    '_Monster_At_Will_OrderByInput',
    {
        'At_Will': 'SortOrder',
    },
    total=True
)

_Monster_Day3_OrderByInput = TypedDict(
    '_Monster_Day3_OrderByInput',
    {
        'Day3': 'SortOrder',
    },
    total=True
)

_Monster_Day2_OrderByInput = TypedDict(
    '_Monster_Day2_OrderByInput',
    {
        'Day2': 'SortOrder',
    },
    total=True
)

_Monster_Day1_OrderByInput = TypedDict(
    '_Monster_Day1_OrderByInput',
    {
        'Day1': 'SortOrder',
    },
    total=True
)

_Monster_bonusAction_OrderByInput = TypedDict(
    '_Monster_bonusAction_OrderByInput',
    {
        'bonusAction': 'SortOrder',
    },
    total=True
)

_Monster_reaction_OrderByInput = TypedDict(
    '_Monster_reaction_OrderByInput',
    {
        'reaction': 'SortOrder',
    },
    total=True
)

_Monster_amount_OrderByInput = TypedDict(
    '_Monster_amount_OrderByInput',
    {
        'amount': 'SortOrder',
    },
    total=True
)

_Monster_legendaryActionSaveDC_OrderByInput = TypedDict(
    '_Monster_legendaryActionSaveDC_OrderByInput',
    {
        'legendaryActionSaveDC': 'SortOrder',
    },
    total=True
)

_Monster_legendaryActionSavingThrow_OrderByInput = TypedDict(
    '_Monster_legendaryActionSavingThrow_OrderByInput',
    {
        'legendaryActionSavingThrow': 'SortOrder',
    },
    total=True
)

_Monster_Legendary_Actions__OrderByInput = TypedDict(
    '_Monster_Legendary_Actions__OrderByInput',
    {
        'Legendary_Actions_': 'SortOrder',
    },
    total=True
)

_Monster_lair_OrderByInput = TypedDict(
    '_Monster_lair_OrderByInput',
    {
        'lair': 'SortOrder',
    },
    total=True
)

_Monster_xp_OrderByInput = TypedDict(
    '_Monster_xp_OrderByInput',
    {
        'xp': 'SortOrder',
    },
    total=True
)

_Monster_Legendary_Resistance_OrderByInput = TypedDict(
    '_Monster_Legendary_Resistance_OrderByInput',
    {
        'Legendary_Resistance': 'SortOrder',
    },
    total=True
)

_Monster_Legendary_Actions_OrderByInput = TypedDict(
    '_Monster_Legendary_Actions_OrderByInput',
    {
        'Legendary_Actions': 'SortOrder',
    },
    total=True
)

_Monster_lairSaveDC_OrderByInput = TypedDict(
    '_Monster_lairSaveDC_OrderByInput',
    {
        'lairSaveDC': 'SortOrder',
    },
    total=True
)

_Monster_lairSavingThrows_OrderByInput = TypedDict(
    '_Monster_lairSavingThrows_OrderByInput',
    {
        'lairSavingThrows': 'SortOrder',
    },
    total=True
)

_Monster_other_OrderByInput = TypedDict(
    '_Monster_other_OrderByInput',
    {
        'other': 'SortOrder',
    },
    total=True
)

_Monster_align_OrderByInput = TypedDict(
    '_Monster_align_OrderByInput',
    {
        'align': 'SortOrder',
    },
    total=True
)

_Monster_speeds_OrderByInput = TypedDict(
    '_Monster_speeds_OrderByInput',
    {
        'speeds': 'SortOrder',
    },
    total=True
)

_Monster_STR_OrderByInput = TypedDict(
    '_Monster_STR_OrderByInput',
    {
        'STR': 'SortOrder',
    },
    total=True
)

_Monster_DEX_OrderByInput = TypedDict(
    '_Monster_DEX_OrderByInput',
    {
        'DEX': 'SortOrder',
    },
    total=True
)

_Monster_CON_OrderByInput = TypedDict(
    '_Monster_CON_OrderByInput',
    {
        'CON': 'SortOrder',
    },
    total=True
)

_Monster_INT_OrderByInput = TypedDict(
    '_Monster_INT_OrderByInput',
    {
        'INT': 'SortOrder',
    },
    total=True
)

_Monster_WIS_OrderByInput = TypedDict(
    '_Monster_WIS_OrderByInput',
    {
        'WIS': 'SortOrder',
    },
    total=True
)

_Monster_CHA_OrderByInput = TypedDict(
    '_Monster_CHA_OrderByInput',
    {
        'CHA': 'SortOrder',
    },
    total=True
)

_Monster_Sav__Throws_OrderByInput = TypedDict(
    '_Monster_Sav__Throws_OrderByInput',
    {
        'Sav__Throws': 'SortOrder',
    },
    total=True
)

_Monster_skills_OrderByInput = TypedDict(
    '_Monster_skills_OrderByInput',
    {
        'skills': 'SortOrder',
    },
    total=True
)

_Monster_WRI_OrderByInput = TypedDict(
    '_Monster_WRI_OrderByInput',
    {
        'WRI': 'SortOrder',
    },
    total=True
)

_Monster_senses_OrderByInput = TypedDict(
    '_Monster_senses_OrderByInput',
    {
        'senses': 'SortOrder',
    },
    total=True
)

_Monster_additional_OrderByInput = TypedDict(
    '_Monster_additional_OrderByInput',
    {
        'additional': 'SortOrder',
    },
    total=True
)

_Monster_font_OrderByInput = TypedDict(
    '_Monster_font_OrderByInput',
    {
        'font': 'SortOrder',
    },
    total=True
)

_Monster_additionalInfo_OrderByInput = TypedDict(
    '_Monster_additionalInfo_OrderByInput',
    {
        'additionalInfo': 'SortOrder',
    },
    total=True
)

_Monster_author_OrderByInput = TypedDict(
    '_Monster_author_OrderByInput',
    {
        'author': 'SortOrder',
    },
    total=True
)

_Monster_RelevanceInner = TypedDict(
    '_Monster_RelevanceInner',
    {
        'fields': 'List[MonsterScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Monster_RelevanceOrderByInput = TypedDict(
    '_Monster_RelevanceOrderByInput',
    {
        '_relevance': '_Monster_RelevanceInner',
    },
    total=True
)

MonsterOrderByInput = Union[
    '_Monster_id_OrderByInput',
    '_Monster_name_OrderByInput',
    '_Monster_size_OrderByInput',
    '_Monster_type_OrderByInput',
    '_Monster_alignment_OrderByInput',
    '_Monster_habitat_OrderByInput',
    '_Monster_mainHabitat_OrderByInput',
    '_Monster_otherHabitat_OrderByInput',
    '_Monster_treasure_OrderByInput',
    '_Monster_ac_OrderByInput',
    '_Monster_hp_OrderByInput',
    '_Monster_initiative_OrderByInput',
    '_Monster_walk_OrderByInput',
    '_Monster_burrow_OrderByInput',
    '_Monster_climb_OrderByInput',
    '_Monster_fly_OrderByInput',
    '_Monster_hover_OrderByInput',
    '_Monster_swim_OrderByInput',
    '_Monster_strMod_OrderByInput',
    '_Monster_intMod_OrderByInput',
    '_Monster_dexMod_OrderByInput',
    '_Monster_wisMod_OrderByInput',
    '_Monster_conMod_OrderByInput',
    '_Monster_chaMod_OrderByInput',
    '_Monster_strSave_OrderByInput',
    '_Monster_intSave_OrderByInput',
    '_Monster_dexSave_OrderByInput',
    '_Monster_wisSave_OrderByInput',
    '_Monster_conSave_OrderByInput',
    '_Monster_chaSave_OrderByInput',
    '_Monster_proficient_OrderByInput',
    '_Monster_expertise_OrderByInput',
    '_Monster_vulnerabilities_OrderByInput',
    '_Monster_slashing_OrderByInput',
    '_Monster_immunitiesConditions_OrderByInput',
    '_Monster_immunitiesDamage_OrderByInput',
    '_Monster_blindsight_OrderByInput',
    '_Monster_darkvision_OrderByInput',
    '_Monster_truesight_OrderByInput',
    '_Monster_tremorsense_OrderByInput',
    '_Monster_passivePerception_OrderByInput',
    '_Monster_languages_OrderByInput',
    '_Monster_cr_OrderByInput',
    '_Monster_XP__OrderByInput',
    '_Monster_pb_OrderByInput',
    '_Monster_traits_OrderByInput',
    '_Monster_legendaryResistanceCount_OrderByInput',
    '_Monster_of_Atk_OrderByInput',
    '_Monster_atk1Type_OrderByInput',
    '_Monster_atk1Mod_OrderByInput',
    '_Monster_atk1Range_OrderByInput',
    '_Monster_atk1RangeShort_OrderByInput',
    '_Monster_atk1Dam_OrderByInput',
    '_Monster_atk1DamageType_OrderByInput',
    '_Monster_atk2Type_OrderByInput',
    '_Monster_atk2Mod_OrderByInput',
    '_Monster_atk2Range_OrderByInput',
    '_Monster_atk2RangeShort_OrderByInput',
    '_Monster_atk2Dam_OrderByInput',
    '_Monster_atk2DamageType_OrderByInput',
    '_Monster_atk3Type_OrderByInput',
    '_Monster_atk3Mod_OrderByInput',
    '_Monster_atk3Range_OrderByInput',
    '_Monster_atk3RangeShort_OrderByInput',
    '_Monster_atk3Dam_OrderByInput',
    '_Monster_atk3DamageType_OrderByInput',
    '_Monster_atk4Type_OrderByInput',
    '_Monster_atk4Mod_OrderByInput',
    '_Monster_atk4Range_OrderByInput',
    '_Monster_atk4RangeShort_OrderByInput',
    '_Monster_atk4Dam_OrderByInput',
    '_Monster_atk4DamageType_OrderByInput',
    '_Monster_saveDC_OrderByInput',
    '_Monster_savingThrow_OrderByInput',
    '_Monster_actionNotes_OrderByInput',
    '_Monster_ability_OrderByInput',
    '_Monster_spellSaveDC_OrderByInput',
    '_Monster_spellSavingThrows_OrderByInput',
    '_Monster_spellAttack_OrderByInput',
    '_Monster_At_Will_OrderByInput',
    '_Monster_Day3_OrderByInput',
    '_Monster_Day2_OrderByInput',
    '_Monster_Day1_OrderByInput',
    '_Monster_bonusAction_OrderByInput',
    '_Monster_reaction_OrderByInput',
    '_Monster_amount_OrderByInput',
    '_Monster_legendaryActionSaveDC_OrderByInput',
    '_Monster_legendaryActionSavingThrow_OrderByInput',
    '_Monster_Legendary_Actions__OrderByInput',
    '_Monster_lair_OrderByInput',
    '_Monster_xp_OrderByInput',
    '_Monster_Legendary_Resistance_OrderByInput',
    '_Monster_Legendary_Actions_OrderByInput',
    '_Monster_lairSaveDC_OrderByInput',
    '_Monster_lairSavingThrows_OrderByInput',
    '_Monster_other_OrderByInput',
    '_Monster_align_OrderByInput',
    '_Monster_speeds_OrderByInput',
    '_Monster_STR_OrderByInput',
    '_Monster_DEX_OrderByInput',
    '_Monster_CON_OrderByInput',
    '_Monster_INT_OrderByInput',
    '_Monster_WIS_OrderByInput',
    '_Monster_CHA_OrderByInput',
    '_Monster_Sav__Throws_OrderByInput',
    '_Monster_skills_OrderByInput',
    '_Monster_WRI_OrderByInput',
    '_Monster_senses_OrderByInput',
    '_Monster_additional_OrderByInput',
    '_Monster_font_OrderByInput',
    '_Monster_additionalInfo_OrderByInput',
    '_Monster_author_OrderByInput',
    '_Monster_RelevanceOrderByInput',
]



# recursive Monster types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MonsterRelationFilter = TypedDict(
    'MonsterRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MonsterListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MonsterInclude(TypedDict, total=False):
    """Monster relational arguments"""


    

class CHARACTERVECTORIncludeFromMonster(TypedDict, total=False):
    """Relational arguments for Monster"""


class CHARACTERVECTORIncludeFromMonsterRecursive1(TypedDict, total=False):
    """Relational arguments for Monster"""


class CHARACTERVECTORIncludeFromMonsterRecursive2(TypedDict, total=False):
    """Relational arguments for Monster"""


class CHARACTERVECTORIncludeFromMonsterRecursive3(TypedDict, total=False):
    """Relational arguments for Monster"""


class CHARACTERVECTORIncludeFromMonsterRecursive4(TypedDict, total=False):
    """Relational arguments for Monster"""

    

class CHARACTERVECTORArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class CHARACTERVECTORArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class CHARACTERVECTORArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class CHARACTERVECTORArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class CHARACTERVECTORArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    
    

class FindManyCHARACTERVECTORArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class FindManyCHARACTERVECTORArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class FindManyCHARACTERVECTORArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class FindManyCHARACTERVECTORArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class FindManyCHARACTERVECTORArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    
    

class ClassesIncludeFromMonster(TypedDict, total=False):
    """Relational arguments for Monster"""


class ClassesIncludeFromMonsterRecursive1(TypedDict, total=False):
    """Relational arguments for Monster"""


class ClassesIncludeFromMonsterRecursive2(TypedDict, total=False):
    """Relational arguments for Monster"""


class ClassesIncludeFromMonsterRecursive3(TypedDict, total=False):
    """Relational arguments for Monster"""


class ClassesIncludeFromMonsterRecursive4(TypedDict, total=False):
    """Relational arguments for Monster"""

    

class ClassesArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'ClassesIncludeFromClassesRecursive1'


class ClassesArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'ClassesIncludeFromClassesRecursive2'


class ClassesArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'ClassesIncludeFromClassesRecursive3'


class ClassesArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'ClassesIncludeFromClassesRecursive4'


class ClassesArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    
    

class FindManyClassesArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive1'


class FindManyClassesArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive2'


class FindManyClassesArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive3'


class FindManyClassesArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive4'


class FindManyClassesArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    
    

class GeneralEquipmentIncludeFromMonster(TypedDict, total=False):
    """Relational arguments for Monster"""


class GeneralEquipmentIncludeFromMonsterRecursive1(TypedDict, total=False):
    """Relational arguments for Monster"""


class GeneralEquipmentIncludeFromMonsterRecursive2(TypedDict, total=False):
    """Relational arguments for Monster"""


class GeneralEquipmentIncludeFromMonsterRecursive3(TypedDict, total=False):
    """Relational arguments for Monster"""


class GeneralEquipmentIncludeFromMonsterRecursive4(TypedDict, total=False):
    """Relational arguments for Monster"""

    

class GeneralEquipmentArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class GeneralEquipmentArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class GeneralEquipmentArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class GeneralEquipmentArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class GeneralEquipmentArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    
    

class FindManyGeneralEquipmentArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class FindManyGeneralEquipmentArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class FindManyGeneralEquipmentArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class FindManyGeneralEquipmentArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class FindManyGeneralEquipmentArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    
    

class ITEMSVECTORIncludeFromMonster(TypedDict, total=False):
    """Relational arguments for Monster"""


class ITEMSVECTORIncludeFromMonsterRecursive1(TypedDict, total=False):
    """Relational arguments for Monster"""


class ITEMSVECTORIncludeFromMonsterRecursive2(TypedDict, total=False):
    """Relational arguments for Monster"""


class ITEMSVECTORIncludeFromMonsterRecursive3(TypedDict, total=False):
    """Relational arguments for Monster"""


class ITEMSVECTORIncludeFromMonsterRecursive4(TypedDict, total=False):
    """Relational arguments for Monster"""

    

class ITEMSVECTORArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class ITEMSVECTORArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class ITEMSVECTORArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class ITEMSVECTORArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class ITEMSVECTORArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    
    

class FindManyITEMSVECTORArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class FindManyITEMSVECTORArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class FindManyITEMSVECTORArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class FindManyITEMSVECTORArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class FindManyITEMSVECTORArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    
    

class MONSTERVECTORIncludeFromMonster(TypedDict, total=False):
    """Relational arguments for Monster"""


class MONSTERVECTORIncludeFromMonsterRecursive1(TypedDict, total=False):
    """Relational arguments for Monster"""


class MONSTERVECTORIncludeFromMonsterRecursive2(TypedDict, total=False):
    """Relational arguments for Monster"""


class MONSTERVECTORIncludeFromMonsterRecursive3(TypedDict, total=False):
    """Relational arguments for Monster"""


class MONSTERVECTORIncludeFromMonsterRecursive4(TypedDict, total=False):
    """Relational arguments for Monster"""

    

class MONSTERVECTORArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class MONSTERVECTORArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class MONSTERVECTORArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class MONSTERVECTORArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class MONSTERVECTORArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    
    

class FindManyMONSTERVECTORArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class FindManyMONSTERVECTORArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class FindManyMONSTERVECTORArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class FindManyMONSTERVECTORArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class FindManyMONSTERVECTORArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    
    

class MagicItemIncludeFromMonster(TypedDict, total=False):
    """Relational arguments for Monster"""


class MagicItemIncludeFromMonsterRecursive1(TypedDict, total=False):
    """Relational arguments for Monster"""


class MagicItemIncludeFromMonsterRecursive2(TypedDict, total=False):
    """Relational arguments for Monster"""


class MagicItemIncludeFromMonsterRecursive3(TypedDict, total=False):
    """Relational arguments for Monster"""


class MagicItemIncludeFromMonsterRecursive4(TypedDict, total=False):
    """Relational arguments for Monster"""

    

class MagicItemArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class MagicItemArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class MagicItemArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class MagicItemArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class MagicItemArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    
    

class FindManyMagicItemArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class FindManyMagicItemArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class FindManyMagicItemArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class FindManyMagicItemArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class FindManyMagicItemArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    
    

class MonsterIncludeFromMonster(TypedDict, total=False):
    """Relational arguments for Monster"""


class MonsterIncludeFromMonsterRecursive1(TypedDict, total=False):
    """Relational arguments for Monster"""


class MonsterIncludeFromMonsterRecursive2(TypedDict, total=False):
    """Relational arguments for Monster"""


class MonsterIncludeFromMonsterRecursive3(TypedDict, total=False):
    """Relational arguments for Monster"""


class MonsterIncludeFromMonsterRecursive4(TypedDict, total=False):
    """Relational arguments for Monster"""

    

class MonsterArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'MonsterIncludeFromMonsterRecursive1'


class MonsterArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'MonsterIncludeFromMonsterRecursive2'


class MonsterArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'MonsterIncludeFromMonsterRecursive3'


class MonsterArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'MonsterIncludeFromMonsterRecursive4'


class MonsterArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    
    

class FindManyMonsterArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive1'


class FindManyMonsterArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive2'


class FindManyMonsterArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive3'


class FindManyMonsterArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive4'


class FindManyMonsterArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    
    

class RaceIncludeFromMonster(TypedDict, total=False):
    """Relational arguments for Monster"""


class RaceIncludeFromMonsterRecursive1(TypedDict, total=False):
    """Relational arguments for Monster"""


class RaceIncludeFromMonsterRecursive2(TypedDict, total=False):
    """Relational arguments for Monster"""


class RaceIncludeFromMonsterRecursive3(TypedDict, total=False):
    """Relational arguments for Monster"""


class RaceIncludeFromMonsterRecursive4(TypedDict, total=False):
    """Relational arguments for Monster"""

    

class RaceArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'RaceIncludeFromRaceRecursive1'


class RaceArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'RaceIncludeFromRaceRecursive2'


class RaceArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'RaceIncludeFromRaceRecursive3'


class RaceArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'RaceIncludeFromRaceRecursive4'


class RaceArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    
    

class FindManyRaceArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive1'


class FindManyRaceArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive2'


class FindManyRaceArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive3'


class FindManyRaceArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive4'


class FindManyRaceArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    
    

class SESSIONIncludeFromMonster(TypedDict, total=False):
    """Relational arguments for Monster"""


class SESSIONIncludeFromMonsterRecursive1(TypedDict, total=False):
    """Relational arguments for Monster"""


class SESSIONIncludeFromMonsterRecursive2(TypedDict, total=False):
    """Relational arguments for Monster"""


class SESSIONIncludeFromMonsterRecursive3(TypedDict, total=False):
    """Relational arguments for Monster"""


class SESSIONIncludeFromMonsterRecursive4(TypedDict, total=False):
    """Relational arguments for Monster"""

    

class SESSIONArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class SESSIONArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class SESSIONArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class SESSIONArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class SESSIONArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    
    

class FindManySESSIONArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class FindManySESSIONArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class FindManySESSIONArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class FindManySESSIONArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class FindManySESSIONArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    
    

class SPELLSVECTORIncludeFromMonster(TypedDict, total=False):
    """Relational arguments for Monster"""


class SPELLSVECTORIncludeFromMonsterRecursive1(TypedDict, total=False):
    """Relational arguments for Monster"""


class SPELLSVECTORIncludeFromMonsterRecursive2(TypedDict, total=False):
    """Relational arguments for Monster"""


class SPELLSVECTORIncludeFromMonsterRecursive3(TypedDict, total=False):
    """Relational arguments for Monster"""


class SPELLSVECTORIncludeFromMonsterRecursive4(TypedDict, total=False):
    """Relational arguments for Monster"""

    

class SPELLSVECTORArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class SPELLSVECTORArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class SPELLSVECTORArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class SPELLSVECTORArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class SPELLSVECTORArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    
    

class FindManySPELLSVECTORArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class FindManySPELLSVECTORArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class FindManySPELLSVECTORArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class FindManySPELLSVECTORArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class FindManySPELLSVECTORArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    
    

class SpellIncludeFromMonster(TypedDict, total=False):
    """Relational arguments for Monster"""


class SpellIncludeFromMonsterRecursive1(TypedDict, total=False):
    """Relational arguments for Monster"""


class SpellIncludeFromMonsterRecursive2(TypedDict, total=False):
    """Relational arguments for Monster"""


class SpellIncludeFromMonsterRecursive3(TypedDict, total=False):
    """Relational arguments for Monster"""


class SpellIncludeFromMonsterRecursive4(TypedDict, total=False):
    """Relational arguments for Monster"""

    

class SpellArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'SpellIncludeFromSpellRecursive1'


class SpellArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'SpellIncludeFromSpellRecursive2'


class SpellArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'SpellIncludeFromSpellRecursive3'


class SpellArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'SpellIncludeFromSpellRecursive4'


class SpellArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    
    

class FindManySpellArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive1'


class FindManySpellArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive2'


class FindManySpellArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive3'


class FindManySpellArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive4'


class FindManySpellArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    
    

class USERDATAIncludeFromMonster(TypedDict, total=False):
    """Relational arguments for Monster"""


class USERDATAIncludeFromMonsterRecursive1(TypedDict, total=False):
    """Relational arguments for Monster"""


class USERDATAIncludeFromMonsterRecursive2(TypedDict, total=False):
    """Relational arguments for Monster"""


class USERDATAIncludeFromMonsterRecursive3(TypedDict, total=False):
    """Relational arguments for Monster"""


class USERDATAIncludeFromMonsterRecursive4(TypedDict, total=False):
    """Relational arguments for Monster"""

    

class USERDATAArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class USERDATAArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class USERDATAArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class USERDATAArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class USERDATAArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    
    

class FindManyUSERDATAArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class FindManyUSERDATAArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class FindManyUSERDATAArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class FindManyUSERDATAArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class FindManyUSERDATAArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    
    

class STORYVECTORIncludeFromMonster(TypedDict, total=False):
    """Relational arguments for Monster"""


class STORYVECTORIncludeFromMonsterRecursive1(TypedDict, total=False):
    """Relational arguments for Monster"""


class STORYVECTORIncludeFromMonsterRecursive2(TypedDict, total=False):
    """Relational arguments for Monster"""


class STORYVECTORIncludeFromMonsterRecursive3(TypedDict, total=False):
    """Relational arguments for Monster"""


class STORYVECTORIncludeFromMonsterRecursive4(TypedDict, total=False):
    """Relational arguments for Monster"""

    

class STORYVECTORArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class STORYVECTORArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class STORYVECTORArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class STORYVECTORArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class STORYVECTORArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    
    

class FindManySTORYVECTORArgsFromMonster(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class FindManySTORYVECTORArgsFromMonsterRecursive1(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class FindManySTORYVECTORArgsFromMonsterRecursive2(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class FindManySTORYVECTORArgsFromMonsterRecursive3(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class FindManySTORYVECTORArgsFromMonsterRecursive4(TypedDict, total=False):
    """Arguments for Monster"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    


FindManyMonsterArgs = FindManyMonsterArgsFromMonster
FindFirstMonsterArgs = FindManyMonsterArgsFromMonster


    

class MonsterWhereInput(TypedDict, total=False):
    """Monster arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    size: Union[None, _str, 'types.StringFilter']
    type: Union[None, _str, 'types.StringFilter']
    alignment: Union[None, _str, 'types.StringFilter']
    habitat: Union[None, _str, 'types.StringFilter']
    mainHabitat: Union[None, _str, 'types.StringFilter']
    otherHabitat: Union[None, _str, 'types.StringFilter']
    treasure: Union[None, _str, 'types.StringFilter']
    ac: Union[None, _str, 'types.StringFilter']
    hp: Union[None, _str, 'types.StringFilter']
    initiative: Union[None, _str, 'types.StringFilter']
    walk: Union[None, _str, 'types.StringFilter']
    burrow: Union[None, _str, 'types.StringFilter']
    climb: Union[None, _str, 'types.StringFilter']
    fly: Union[None, _str, 'types.StringFilter']
    hover: Union[None, _str, 'types.StringFilter']
    swim: Union[None, _str, 'types.StringFilter']
    strMod: Union[None, _str, 'types.StringFilter']
    intMod: Union[None, _str, 'types.StringFilter']
    dexMod: Union[None, _str, 'types.StringFilter']
    wisMod: Union[None, _str, 'types.StringFilter']
    conMod: Union[None, _str, 'types.StringFilter']
    chaMod: Union[None, _str, 'types.StringFilter']
    strSave: Union[None, _str, 'types.StringFilter']
    intSave: Union[None, _str, 'types.StringFilter']
    dexSave: Union[None, _str, 'types.StringFilter']
    wisSave: Union[None, _str, 'types.StringFilter']
    conSave: Union[None, _str, 'types.StringFilter']
    chaSave: Union[None, _str, 'types.StringFilter']
    proficient: Union[None, _str, 'types.StringFilter']
    expertise: Union[None, _str, 'types.StringFilter']
    vulnerabilities: Union[None, _str, 'types.StringFilter']
    slashing: Union[None, _str, 'types.StringFilter']
    immunitiesConditions: Union[None, _str, 'types.StringFilter']
    immunitiesDamage: Union[None, _str, 'types.StringFilter']
    blindsight: Union[None, _str, 'types.StringFilter']
    darkvision: Union[None, _str, 'types.StringFilter']
    truesight: Union[None, _str, 'types.StringFilter']
    tremorsense: Union[None, _str, 'types.StringFilter']
    passivePerception: Union[None, _str, 'types.StringFilter']
    languages: Union[None, _str, 'types.StringFilter']
    cr: Union[None, _str, 'types.StringFilter']
    XP_: Union[None, _str, 'types.StringFilter']
    pb: Union[None, _str, 'types.StringFilter']
    traits: Union[None, _str, 'types.StringFilter']
    legendaryResistanceCount: Union[None, _str, 'types.StringFilter']
    of_Atk: Union[None, _str, 'types.StringFilter']
    atk1Type: Union[None, _str, 'types.StringFilter']
    atk1Mod: Union[None, _str, 'types.StringFilter']
    atk1Range: Union[None, _str, 'types.StringFilter']
    atk1RangeShort: Union[None, _str, 'types.StringFilter']
    atk1Dam: Union[None, _str, 'types.StringFilter']
    atk1DamageType: Union[None, _str, 'types.StringFilter']
    atk2Type: Union[None, _str, 'types.StringFilter']
    atk2Mod: Union[None, _str, 'types.StringFilter']
    atk2Range: Union[None, _str, 'types.StringFilter']
    atk2RangeShort: Union[None, _str, 'types.StringFilter']
    atk2Dam: Union[None, _str, 'types.StringFilter']
    atk2DamageType: Union[None, _str, 'types.StringFilter']
    atk3Type: Union[None, _str, 'types.StringFilter']
    atk3Mod: Union[None, _str, 'types.StringFilter']
    atk3Range: Union[None, _str, 'types.StringFilter']
    atk3RangeShort: Union[None, _str, 'types.StringFilter']
    atk3Dam: Union[None, _str, 'types.StringFilter']
    atk3DamageType: Union[None, _str, 'types.StringFilter']
    atk4Type: Union[None, _str, 'types.StringFilter']
    atk4Mod: Union[None, _str, 'types.StringFilter']
    atk4Range: Union[None, _str, 'types.StringFilter']
    atk4RangeShort: Union[None, _str, 'types.StringFilter']
    atk4Dam: Union[None, _str, 'types.StringFilter']
    atk4DamageType: Union[None, _str, 'types.StringFilter']
    saveDC: Union[None, _str, 'types.StringFilter']
    savingThrow: Union[None, _str, 'types.StringFilter']
    actionNotes: Union[None, _str, 'types.StringFilter']
    ability: Union[None, _str, 'types.StringFilter']
    spellSaveDC: Union[None, _str, 'types.StringFilter']
    spellSavingThrows: Union[None, _str, 'types.StringFilter']
    spellAttack: Union[None, _str, 'types.StringFilter']
    At_Will: Union[None, _str, 'types.StringFilter']
    Day3: Union[None, _str, 'types.StringFilter']
    Day2: Union[None, _str, 'types.StringFilter']
    Day1: Union[None, _str, 'types.StringFilter']
    bonusAction: Union[None, _str, 'types.StringFilter']
    reaction: Union[None, _str, 'types.StringFilter']
    amount: Union[None, _str, 'types.StringFilter']
    legendaryActionSaveDC: Union[None, _str, 'types.StringFilter']
    legendaryActionSavingThrow: Union[None, _str, 'types.StringFilter']
    Legendary_Actions_: Union[None, _str, 'types.StringFilter']
    lair: Union[None, _str, 'types.StringFilter']
    xp: Union[None, _str, 'types.StringFilter']
    Legendary_Resistance: Union[None, _str, 'types.StringFilter']
    Legendary_Actions: Union[None, _str, 'types.StringFilter']
    lairSaveDC: Union[None, _str, 'types.StringFilter']
    lairSavingThrows: Union[None, _str, 'types.StringFilter']
    other: Union[None, _str, 'types.StringFilter']
    align: Union[None, _str, 'types.StringFilter']
    speeds: Union[None, _str, 'types.StringFilter']
    STR: Union[None, _str, 'types.StringFilter']
    DEX: Union[None, _str, 'types.StringFilter']
    CON: Union[None, _str, 'types.StringFilter']
    INT: Union[None, _str, 'types.StringFilter']
    WIS: Union[None, _str, 'types.StringFilter']
    CHA: Union[None, _str, 'types.StringFilter']
    Sav__Throws: Union[None, _str, 'types.StringFilter']
    skills: Union[None, _str, 'types.StringFilter']
    WRI: Union[None, _str, 'types.StringFilter']
    senses: Union[None, _str, 'types.StringFilter']
    additional: Union[None, _str, 'types.StringFilter']
    font: Union[None, _str, 'types.StringFilter']
    additionalInfo: Union[None, _str, 'types.StringFilter']
    author: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MonsterWhereInputRecursive1', List['MonsterWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MonsterWhereInputRecursive1']
    OR: List['MonsterWhereInputRecursive1']
    NOT: List['MonsterWhereInputRecursive1']


class MonsterWhereInputRecursive1(TypedDict, total=False):
    """Monster arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    size: Union[None, _str, 'types.StringFilter']
    type: Union[None, _str, 'types.StringFilter']
    alignment: Union[None, _str, 'types.StringFilter']
    habitat: Union[None, _str, 'types.StringFilter']
    mainHabitat: Union[None, _str, 'types.StringFilter']
    otherHabitat: Union[None, _str, 'types.StringFilter']
    treasure: Union[None, _str, 'types.StringFilter']
    ac: Union[None, _str, 'types.StringFilter']
    hp: Union[None, _str, 'types.StringFilter']
    initiative: Union[None, _str, 'types.StringFilter']
    walk: Union[None, _str, 'types.StringFilter']
    burrow: Union[None, _str, 'types.StringFilter']
    climb: Union[None, _str, 'types.StringFilter']
    fly: Union[None, _str, 'types.StringFilter']
    hover: Union[None, _str, 'types.StringFilter']
    swim: Union[None, _str, 'types.StringFilter']
    strMod: Union[None, _str, 'types.StringFilter']
    intMod: Union[None, _str, 'types.StringFilter']
    dexMod: Union[None, _str, 'types.StringFilter']
    wisMod: Union[None, _str, 'types.StringFilter']
    conMod: Union[None, _str, 'types.StringFilter']
    chaMod: Union[None, _str, 'types.StringFilter']
    strSave: Union[None, _str, 'types.StringFilter']
    intSave: Union[None, _str, 'types.StringFilter']
    dexSave: Union[None, _str, 'types.StringFilter']
    wisSave: Union[None, _str, 'types.StringFilter']
    conSave: Union[None, _str, 'types.StringFilter']
    chaSave: Union[None, _str, 'types.StringFilter']
    proficient: Union[None, _str, 'types.StringFilter']
    expertise: Union[None, _str, 'types.StringFilter']
    vulnerabilities: Union[None, _str, 'types.StringFilter']
    slashing: Union[None, _str, 'types.StringFilter']
    immunitiesConditions: Union[None, _str, 'types.StringFilter']
    immunitiesDamage: Union[None, _str, 'types.StringFilter']
    blindsight: Union[None, _str, 'types.StringFilter']
    darkvision: Union[None, _str, 'types.StringFilter']
    truesight: Union[None, _str, 'types.StringFilter']
    tremorsense: Union[None, _str, 'types.StringFilter']
    passivePerception: Union[None, _str, 'types.StringFilter']
    languages: Union[None, _str, 'types.StringFilter']
    cr: Union[None, _str, 'types.StringFilter']
    XP_: Union[None, _str, 'types.StringFilter']
    pb: Union[None, _str, 'types.StringFilter']
    traits: Union[None, _str, 'types.StringFilter']
    legendaryResistanceCount: Union[None, _str, 'types.StringFilter']
    of_Atk: Union[None, _str, 'types.StringFilter']
    atk1Type: Union[None, _str, 'types.StringFilter']
    atk1Mod: Union[None, _str, 'types.StringFilter']
    atk1Range: Union[None, _str, 'types.StringFilter']
    atk1RangeShort: Union[None, _str, 'types.StringFilter']
    atk1Dam: Union[None, _str, 'types.StringFilter']
    atk1DamageType: Union[None, _str, 'types.StringFilter']
    atk2Type: Union[None, _str, 'types.StringFilter']
    atk2Mod: Union[None, _str, 'types.StringFilter']
    atk2Range: Union[None, _str, 'types.StringFilter']
    atk2RangeShort: Union[None, _str, 'types.StringFilter']
    atk2Dam: Union[None, _str, 'types.StringFilter']
    atk2DamageType: Union[None, _str, 'types.StringFilter']
    atk3Type: Union[None, _str, 'types.StringFilter']
    atk3Mod: Union[None, _str, 'types.StringFilter']
    atk3Range: Union[None, _str, 'types.StringFilter']
    atk3RangeShort: Union[None, _str, 'types.StringFilter']
    atk3Dam: Union[None, _str, 'types.StringFilter']
    atk3DamageType: Union[None, _str, 'types.StringFilter']
    atk4Type: Union[None, _str, 'types.StringFilter']
    atk4Mod: Union[None, _str, 'types.StringFilter']
    atk4Range: Union[None, _str, 'types.StringFilter']
    atk4RangeShort: Union[None, _str, 'types.StringFilter']
    atk4Dam: Union[None, _str, 'types.StringFilter']
    atk4DamageType: Union[None, _str, 'types.StringFilter']
    saveDC: Union[None, _str, 'types.StringFilter']
    savingThrow: Union[None, _str, 'types.StringFilter']
    actionNotes: Union[None, _str, 'types.StringFilter']
    ability: Union[None, _str, 'types.StringFilter']
    spellSaveDC: Union[None, _str, 'types.StringFilter']
    spellSavingThrows: Union[None, _str, 'types.StringFilter']
    spellAttack: Union[None, _str, 'types.StringFilter']
    At_Will: Union[None, _str, 'types.StringFilter']
    Day3: Union[None, _str, 'types.StringFilter']
    Day2: Union[None, _str, 'types.StringFilter']
    Day1: Union[None, _str, 'types.StringFilter']
    bonusAction: Union[None, _str, 'types.StringFilter']
    reaction: Union[None, _str, 'types.StringFilter']
    amount: Union[None, _str, 'types.StringFilter']
    legendaryActionSaveDC: Union[None, _str, 'types.StringFilter']
    legendaryActionSavingThrow: Union[None, _str, 'types.StringFilter']
    Legendary_Actions_: Union[None, _str, 'types.StringFilter']
    lair: Union[None, _str, 'types.StringFilter']
    xp: Union[None, _str, 'types.StringFilter']
    Legendary_Resistance: Union[None, _str, 'types.StringFilter']
    Legendary_Actions: Union[None, _str, 'types.StringFilter']
    lairSaveDC: Union[None, _str, 'types.StringFilter']
    lairSavingThrows: Union[None, _str, 'types.StringFilter']
    other: Union[None, _str, 'types.StringFilter']
    align: Union[None, _str, 'types.StringFilter']
    speeds: Union[None, _str, 'types.StringFilter']
    STR: Union[None, _str, 'types.StringFilter']
    DEX: Union[None, _str, 'types.StringFilter']
    CON: Union[None, _str, 'types.StringFilter']
    INT: Union[None, _str, 'types.StringFilter']
    WIS: Union[None, _str, 'types.StringFilter']
    CHA: Union[None, _str, 'types.StringFilter']
    Sav__Throws: Union[None, _str, 'types.StringFilter']
    skills: Union[None, _str, 'types.StringFilter']
    WRI: Union[None, _str, 'types.StringFilter']
    senses: Union[None, _str, 'types.StringFilter']
    additional: Union[None, _str, 'types.StringFilter']
    font: Union[None, _str, 'types.StringFilter']
    additionalInfo: Union[None, _str, 'types.StringFilter']
    author: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MonsterWhereInputRecursive2', List['MonsterWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MonsterWhereInputRecursive2']
    OR: List['MonsterWhereInputRecursive2']
    NOT: List['MonsterWhereInputRecursive2']


class MonsterWhereInputRecursive2(TypedDict, total=False):
    """Monster arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    size: Union[None, _str, 'types.StringFilter']
    type: Union[None, _str, 'types.StringFilter']
    alignment: Union[None, _str, 'types.StringFilter']
    habitat: Union[None, _str, 'types.StringFilter']
    mainHabitat: Union[None, _str, 'types.StringFilter']
    otherHabitat: Union[None, _str, 'types.StringFilter']
    treasure: Union[None, _str, 'types.StringFilter']
    ac: Union[None, _str, 'types.StringFilter']
    hp: Union[None, _str, 'types.StringFilter']
    initiative: Union[None, _str, 'types.StringFilter']
    walk: Union[None, _str, 'types.StringFilter']
    burrow: Union[None, _str, 'types.StringFilter']
    climb: Union[None, _str, 'types.StringFilter']
    fly: Union[None, _str, 'types.StringFilter']
    hover: Union[None, _str, 'types.StringFilter']
    swim: Union[None, _str, 'types.StringFilter']
    strMod: Union[None, _str, 'types.StringFilter']
    intMod: Union[None, _str, 'types.StringFilter']
    dexMod: Union[None, _str, 'types.StringFilter']
    wisMod: Union[None, _str, 'types.StringFilter']
    conMod: Union[None, _str, 'types.StringFilter']
    chaMod: Union[None, _str, 'types.StringFilter']
    strSave: Union[None, _str, 'types.StringFilter']
    intSave: Union[None, _str, 'types.StringFilter']
    dexSave: Union[None, _str, 'types.StringFilter']
    wisSave: Union[None, _str, 'types.StringFilter']
    conSave: Union[None, _str, 'types.StringFilter']
    chaSave: Union[None, _str, 'types.StringFilter']
    proficient: Union[None, _str, 'types.StringFilter']
    expertise: Union[None, _str, 'types.StringFilter']
    vulnerabilities: Union[None, _str, 'types.StringFilter']
    slashing: Union[None, _str, 'types.StringFilter']
    immunitiesConditions: Union[None, _str, 'types.StringFilter']
    immunitiesDamage: Union[None, _str, 'types.StringFilter']
    blindsight: Union[None, _str, 'types.StringFilter']
    darkvision: Union[None, _str, 'types.StringFilter']
    truesight: Union[None, _str, 'types.StringFilter']
    tremorsense: Union[None, _str, 'types.StringFilter']
    passivePerception: Union[None, _str, 'types.StringFilter']
    languages: Union[None, _str, 'types.StringFilter']
    cr: Union[None, _str, 'types.StringFilter']
    XP_: Union[None, _str, 'types.StringFilter']
    pb: Union[None, _str, 'types.StringFilter']
    traits: Union[None, _str, 'types.StringFilter']
    legendaryResistanceCount: Union[None, _str, 'types.StringFilter']
    of_Atk: Union[None, _str, 'types.StringFilter']
    atk1Type: Union[None, _str, 'types.StringFilter']
    atk1Mod: Union[None, _str, 'types.StringFilter']
    atk1Range: Union[None, _str, 'types.StringFilter']
    atk1RangeShort: Union[None, _str, 'types.StringFilter']
    atk1Dam: Union[None, _str, 'types.StringFilter']
    atk1DamageType: Union[None, _str, 'types.StringFilter']
    atk2Type: Union[None, _str, 'types.StringFilter']
    atk2Mod: Union[None, _str, 'types.StringFilter']
    atk2Range: Union[None, _str, 'types.StringFilter']
    atk2RangeShort: Union[None, _str, 'types.StringFilter']
    atk2Dam: Union[None, _str, 'types.StringFilter']
    atk2DamageType: Union[None, _str, 'types.StringFilter']
    atk3Type: Union[None, _str, 'types.StringFilter']
    atk3Mod: Union[None, _str, 'types.StringFilter']
    atk3Range: Union[None, _str, 'types.StringFilter']
    atk3RangeShort: Union[None, _str, 'types.StringFilter']
    atk3Dam: Union[None, _str, 'types.StringFilter']
    atk3DamageType: Union[None, _str, 'types.StringFilter']
    atk4Type: Union[None, _str, 'types.StringFilter']
    atk4Mod: Union[None, _str, 'types.StringFilter']
    atk4Range: Union[None, _str, 'types.StringFilter']
    atk4RangeShort: Union[None, _str, 'types.StringFilter']
    atk4Dam: Union[None, _str, 'types.StringFilter']
    atk4DamageType: Union[None, _str, 'types.StringFilter']
    saveDC: Union[None, _str, 'types.StringFilter']
    savingThrow: Union[None, _str, 'types.StringFilter']
    actionNotes: Union[None, _str, 'types.StringFilter']
    ability: Union[None, _str, 'types.StringFilter']
    spellSaveDC: Union[None, _str, 'types.StringFilter']
    spellSavingThrows: Union[None, _str, 'types.StringFilter']
    spellAttack: Union[None, _str, 'types.StringFilter']
    At_Will: Union[None, _str, 'types.StringFilter']
    Day3: Union[None, _str, 'types.StringFilter']
    Day2: Union[None, _str, 'types.StringFilter']
    Day1: Union[None, _str, 'types.StringFilter']
    bonusAction: Union[None, _str, 'types.StringFilter']
    reaction: Union[None, _str, 'types.StringFilter']
    amount: Union[None, _str, 'types.StringFilter']
    legendaryActionSaveDC: Union[None, _str, 'types.StringFilter']
    legendaryActionSavingThrow: Union[None, _str, 'types.StringFilter']
    Legendary_Actions_: Union[None, _str, 'types.StringFilter']
    lair: Union[None, _str, 'types.StringFilter']
    xp: Union[None, _str, 'types.StringFilter']
    Legendary_Resistance: Union[None, _str, 'types.StringFilter']
    Legendary_Actions: Union[None, _str, 'types.StringFilter']
    lairSaveDC: Union[None, _str, 'types.StringFilter']
    lairSavingThrows: Union[None, _str, 'types.StringFilter']
    other: Union[None, _str, 'types.StringFilter']
    align: Union[None, _str, 'types.StringFilter']
    speeds: Union[None, _str, 'types.StringFilter']
    STR: Union[None, _str, 'types.StringFilter']
    DEX: Union[None, _str, 'types.StringFilter']
    CON: Union[None, _str, 'types.StringFilter']
    INT: Union[None, _str, 'types.StringFilter']
    WIS: Union[None, _str, 'types.StringFilter']
    CHA: Union[None, _str, 'types.StringFilter']
    Sav__Throws: Union[None, _str, 'types.StringFilter']
    skills: Union[None, _str, 'types.StringFilter']
    WRI: Union[None, _str, 'types.StringFilter']
    senses: Union[None, _str, 'types.StringFilter']
    additional: Union[None, _str, 'types.StringFilter']
    font: Union[None, _str, 'types.StringFilter']
    additionalInfo: Union[None, _str, 'types.StringFilter']
    author: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MonsterWhereInputRecursive3', List['MonsterWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MonsterWhereInputRecursive3']
    OR: List['MonsterWhereInputRecursive3']
    NOT: List['MonsterWhereInputRecursive3']


class MonsterWhereInputRecursive3(TypedDict, total=False):
    """Monster arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    size: Union[None, _str, 'types.StringFilter']
    type: Union[None, _str, 'types.StringFilter']
    alignment: Union[None, _str, 'types.StringFilter']
    habitat: Union[None, _str, 'types.StringFilter']
    mainHabitat: Union[None, _str, 'types.StringFilter']
    otherHabitat: Union[None, _str, 'types.StringFilter']
    treasure: Union[None, _str, 'types.StringFilter']
    ac: Union[None, _str, 'types.StringFilter']
    hp: Union[None, _str, 'types.StringFilter']
    initiative: Union[None, _str, 'types.StringFilter']
    walk: Union[None, _str, 'types.StringFilter']
    burrow: Union[None, _str, 'types.StringFilter']
    climb: Union[None, _str, 'types.StringFilter']
    fly: Union[None, _str, 'types.StringFilter']
    hover: Union[None, _str, 'types.StringFilter']
    swim: Union[None, _str, 'types.StringFilter']
    strMod: Union[None, _str, 'types.StringFilter']
    intMod: Union[None, _str, 'types.StringFilter']
    dexMod: Union[None, _str, 'types.StringFilter']
    wisMod: Union[None, _str, 'types.StringFilter']
    conMod: Union[None, _str, 'types.StringFilter']
    chaMod: Union[None, _str, 'types.StringFilter']
    strSave: Union[None, _str, 'types.StringFilter']
    intSave: Union[None, _str, 'types.StringFilter']
    dexSave: Union[None, _str, 'types.StringFilter']
    wisSave: Union[None, _str, 'types.StringFilter']
    conSave: Union[None, _str, 'types.StringFilter']
    chaSave: Union[None, _str, 'types.StringFilter']
    proficient: Union[None, _str, 'types.StringFilter']
    expertise: Union[None, _str, 'types.StringFilter']
    vulnerabilities: Union[None, _str, 'types.StringFilter']
    slashing: Union[None, _str, 'types.StringFilter']
    immunitiesConditions: Union[None, _str, 'types.StringFilter']
    immunitiesDamage: Union[None, _str, 'types.StringFilter']
    blindsight: Union[None, _str, 'types.StringFilter']
    darkvision: Union[None, _str, 'types.StringFilter']
    truesight: Union[None, _str, 'types.StringFilter']
    tremorsense: Union[None, _str, 'types.StringFilter']
    passivePerception: Union[None, _str, 'types.StringFilter']
    languages: Union[None, _str, 'types.StringFilter']
    cr: Union[None, _str, 'types.StringFilter']
    XP_: Union[None, _str, 'types.StringFilter']
    pb: Union[None, _str, 'types.StringFilter']
    traits: Union[None, _str, 'types.StringFilter']
    legendaryResistanceCount: Union[None, _str, 'types.StringFilter']
    of_Atk: Union[None, _str, 'types.StringFilter']
    atk1Type: Union[None, _str, 'types.StringFilter']
    atk1Mod: Union[None, _str, 'types.StringFilter']
    atk1Range: Union[None, _str, 'types.StringFilter']
    atk1RangeShort: Union[None, _str, 'types.StringFilter']
    atk1Dam: Union[None, _str, 'types.StringFilter']
    atk1DamageType: Union[None, _str, 'types.StringFilter']
    atk2Type: Union[None, _str, 'types.StringFilter']
    atk2Mod: Union[None, _str, 'types.StringFilter']
    atk2Range: Union[None, _str, 'types.StringFilter']
    atk2RangeShort: Union[None, _str, 'types.StringFilter']
    atk2Dam: Union[None, _str, 'types.StringFilter']
    atk2DamageType: Union[None, _str, 'types.StringFilter']
    atk3Type: Union[None, _str, 'types.StringFilter']
    atk3Mod: Union[None, _str, 'types.StringFilter']
    atk3Range: Union[None, _str, 'types.StringFilter']
    atk3RangeShort: Union[None, _str, 'types.StringFilter']
    atk3Dam: Union[None, _str, 'types.StringFilter']
    atk3DamageType: Union[None, _str, 'types.StringFilter']
    atk4Type: Union[None, _str, 'types.StringFilter']
    atk4Mod: Union[None, _str, 'types.StringFilter']
    atk4Range: Union[None, _str, 'types.StringFilter']
    atk4RangeShort: Union[None, _str, 'types.StringFilter']
    atk4Dam: Union[None, _str, 'types.StringFilter']
    atk4DamageType: Union[None, _str, 'types.StringFilter']
    saveDC: Union[None, _str, 'types.StringFilter']
    savingThrow: Union[None, _str, 'types.StringFilter']
    actionNotes: Union[None, _str, 'types.StringFilter']
    ability: Union[None, _str, 'types.StringFilter']
    spellSaveDC: Union[None, _str, 'types.StringFilter']
    spellSavingThrows: Union[None, _str, 'types.StringFilter']
    spellAttack: Union[None, _str, 'types.StringFilter']
    At_Will: Union[None, _str, 'types.StringFilter']
    Day3: Union[None, _str, 'types.StringFilter']
    Day2: Union[None, _str, 'types.StringFilter']
    Day1: Union[None, _str, 'types.StringFilter']
    bonusAction: Union[None, _str, 'types.StringFilter']
    reaction: Union[None, _str, 'types.StringFilter']
    amount: Union[None, _str, 'types.StringFilter']
    legendaryActionSaveDC: Union[None, _str, 'types.StringFilter']
    legendaryActionSavingThrow: Union[None, _str, 'types.StringFilter']
    Legendary_Actions_: Union[None, _str, 'types.StringFilter']
    lair: Union[None, _str, 'types.StringFilter']
    xp: Union[None, _str, 'types.StringFilter']
    Legendary_Resistance: Union[None, _str, 'types.StringFilter']
    Legendary_Actions: Union[None, _str, 'types.StringFilter']
    lairSaveDC: Union[None, _str, 'types.StringFilter']
    lairSavingThrows: Union[None, _str, 'types.StringFilter']
    other: Union[None, _str, 'types.StringFilter']
    align: Union[None, _str, 'types.StringFilter']
    speeds: Union[None, _str, 'types.StringFilter']
    STR: Union[None, _str, 'types.StringFilter']
    DEX: Union[None, _str, 'types.StringFilter']
    CON: Union[None, _str, 'types.StringFilter']
    INT: Union[None, _str, 'types.StringFilter']
    WIS: Union[None, _str, 'types.StringFilter']
    CHA: Union[None, _str, 'types.StringFilter']
    Sav__Throws: Union[None, _str, 'types.StringFilter']
    skills: Union[None, _str, 'types.StringFilter']
    WRI: Union[None, _str, 'types.StringFilter']
    senses: Union[None, _str, 'types.StringFilter']
    additional: Union[None, _str, 'types.StringFilter']
    font: Union[None, _str, 'types.StringFilter']
    additionalInfo: Union[None, _str, 'types.StringFilter']
    author: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MonsterWhereInputRecursive4', List['MonsterWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MonsterWhereInputRecursive4']
    OR: List['MonsterWhereInputRecursive4']
    NOT: List['MonsterWhereInputRecursive4']


class MonsterWhereInputRecursive4(TypedDict, total=False):
    """Monster arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    size: Union[None, _str, 'types.StringFilter']
    type: Union[None, _str, 'types.StringFilter']
    alignment: Union[None, _str, 'types.StringFilter']
    habitat: Union[None, _str, 'types.StringFilter']
    mainHabitat: Union[None, _str, 'types.StringFilter']
    otherHabitat: Union[None, _str, 'types.StringFilter']
    treasure: Union[None, _str, 'types.StringFilter']
    ac: Union[None, _str, 'types.StringFilter']
    hp: Union[None, _str, 'types.StringFilter']
    initiative: Union[None, _str, 'types.StringFilter']
    walk: Union[None, _str, 'types.StringFilter']
    burrow: Union[None, _str, 'types.StringFilter']
    climb: Union[None, _str, 'types.StringFilter']
    fly: Union[None, _str, 'types.StringFilter']
    hover: Union[None, _str, 'types.StringFilter']
    swim: Union[None, _str, 'types.StringFilter']
    strMod: Union[None, _str, 'types.StringFilter']
    intMod: Union[None, _str, 'types.StringFilter']
    dexMod: Union[None, _str, 'types.StringFilter']
    wisMod: Union[None, _str, 'types.StringFilter']
    conMod: Union[None, _str, 'types.StringFilter']
    chaMod: Union[None, _str, 'types.StringFilter']
    strSave: Union[None, _str, 'types.StringFilter']
    intSave: Union[None, _str, 'types.StringFilter']
    dexSave: Union[None, _str, 'types.StringFilter']
    wisSave: Union[None, _str, 'types.StringFilter']
    conSave: Union[None, _str, 'types.StringFilter']
    chaSave: Union[None, _str, 'types.StringFilter']
    proficient: Union[None, _str, 'types.StringFilter']
    expertise: Union[None, _str, 'types.StringFilter']
    vulnerabilities: Union[None, _str, 'types.StringFilter']
    slashing: Union[None, _str, 'types.StringFilter']
    immunitiesConditions: Union[None, _str, 'types.StringFilter']
    immunitiesDamage: Union[None, _str, 'types.StringFilter']
    blindsight: Union[None, _str, 'types.StringFilter']
    darkvision: Union[None, _str, 'types.StringFilter']
    truesight: Union[None, _str, 'types.StringFilter']
    tremorsense: Union[None, _str, 'types.StringFilter']
    passivePerception: Union[None, _str, 'types.StringFilter']
    languages: Union[None, _str, 'types.StringFilter']
    cr: Union[None, _str, 'types.StringFilter']
    XP_: Union[None, _str, 'types.StringFilter']
    pb: Union[None, _str, 'types.StringFilter']
    traits: Union[None, _str, 'types.StringFilter']
    legendaryResistanceCount: Union[None, _str, 'types.StringFilter']
    of_Atk: Union[None, _str, 'types.StringFilter']
    atk1Type: Union[None, _str, 'types.StringFilter']
    atk1Mod: Union[None, _str, 'types.StringFilter']
    atk1Range: Union[None, _str, 'types.StringFilter']
    atk1RangeShort: Union[None, _str, 'types.StringFilter']
    atk1Dam: Union[None, _str, 'types.StringFilter']
    atk1DamageType: Union[None, _str, 'types.StringFilter']
    atk2Type: Union[None, _str, 'types.StringFilter']
    atk2Mod: Union[None, _str, 'types.StringFilter']
    atk2Range: Union[None, _str, 'types.StringFilter']
    atk2RangeShort: Union[None, _str, 'types.StringFilter']
    atk2Dam: Union[None, _str, 'types.StringFilter']
    atk2DamageType: Union[None, _str, 'types.StringFilter']
    atk3Type: Union[None, _str, 'types.StringFilter']
    atk3Mod: Union[None, _str, 'types.StringFilter']
    atk3Range: Union[None, _str, 'types.StringFilter']
    atk3RangeShort: Union[None, _str, 'types.StringFilter']
    atk3Dam: Union[None, _str, 'types.StringFilter']
    atk3DamageType: Union[None, _str, 'types.StringFilter']
    atk4Type: Union[None, _str, 'types.StringFilter']
    atk4Mod: Union[None, _str, 'types.StringFilter']
    atk4Range: Union[None, _str, 'types.StringFilter']
    atk4RangeShort: Union[None, _str, 'types.StringFilter']
    atk4Dam: Union[None, _str, 'types.StringFilter']
    atk4DamageType: Union[None, _str, 'types.StringFilter']
    saveDC: Union[None, _str, 'types.StringFilter']
    savingThrow: Union[None, _str, 'types.StringFilter']
    actionNotes: Union[None, _str, 'types.StringFilter']
    ability: Union[None, _str, 'types.StringFilter']
    spellSaveDC: Union[None, _str, 'types.StringFilter']
    spellSavingThrows: Union[None, _str, 'types.StringFilter']
    spellAttack: Union[None, _str, 'types.StringFilter']
    At_Will: Union[None, _str, 'types.StringFilter']
    Day3: Union[None, _str, 'types.StringFilter']
    Day2: Union[None, _str, 'types.StringFilter']
    Day1: Union[None, _str, 'types.StringFilter']
    bonusAction: Union[None, _str, 'types.StringFilter']
    reaction: Union[None, _str, 'types.StringFilter']
    amount: Union[None, _str, 'types.StringFilter']
    legendaryActionSaveDC: Union[None, _str, 'types.StringFilter']
    legendaryActionSavingThrow: Union[None, _str, 'types.StringFilter']
    Legendary_Actions_: Union[None, _str, 'types.StringFilter']
    lair: Union[None, _str, 'types.StringFilter']
    xp: Union[None, _str, 'types.StringFilter']
    Legendary_Resistance: Union[None, _str, 'types.StringFilter']
    Legendary_Actions: Union[None, _str, 'types.StringFilter']
    lairSaveDC: Union[None, _str, 'types.StringFilter']
    lairSavingThrows: Union[None, _str, 'types.StringFilter']
    other: Union[None, _str, 'types.StringFilter']
    align: Union[None, _str, 'types.StringFilter']
    speeds: Union[None, _str, 'types.StringFilter']
    STR: Union[None, _str, 'types.StringFilter']
    DEX: Union[None, _str, 'types.StringFilter']
    CON: Union[None, _str, 'types.StringFilter']
    INT: Union[None, _str, 'types.StringFilter']
    WIS: Union[None, _str, 'types.StringFilter']
    CHA: Union[None, _str, 'types.StringFilter']
    Sav__Throws: Union[None, _str, 'types.StringFilter']
    skills: Union[None, _str, 'types.StringFilter']
    WRI: Union[None, _str, 'types.StringFilter']
    senses: Union[None, _str, 'types.StringFilter']
    additional: Union[None, _str, 'types.StringFilter']
    font: Union[None, _str, 'types.StringFilter']
    additionalInfo: Union[None, _str, 'types.StringFilter']
    author: Union[None, _str, 'types.StringFilter']



# aggregate Monster types


    

class MonsterScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Monster arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    size: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    alignment: Union[_str, 'types.StringWithAggregatesFilter']
    habitat: Union[_str, 'types.StringWithAggregatesFilter']
    mainHabitat: Union[_str, 'types.StringWithAggregatesFilter']
    otherHabitat: Union[_str, 'types.StringWithAggregatesFilter']
    treasure: Union[_str, 'types.StringWithAggregatesFilter']
    ac: Union[_str, 'types.StringWithAggregatesFilter']
    hp: Union[_str, 'types.StringWithAggregatesFilter']
    initiative: Union[_str, 'types.StringWithAggregatesFilter']
    walk: Union[_str, 'types.StringWithAggregatesFilter']
    burrow: Union[_str, 'types.StringWithAggregatesFilter']
    climb: Union[_str, 'types.StringWithAggregatesFilter']
    fly: Union[_str, 'types.StringWithAggregatesFilter']
    hover: Union[_str, 'types.StringWithAggregatesFilter']
    swim: Union[_str, 'types.StringWithAggregatesFilter']
    strMod: Union[_str, 'types.StringWithAggregatesFilter']
    intMod: Union[_str, 'types.StringWithAggregatesFilter']
    dexMod: Union[_str, 'types.StringWithAggregatesFilter']
    wisMod: Union[_str, 'types.StringWithAggregatesFilter']
    conMod: Union[_str, 'types.StringWithAggregatesFilter']
    chaMod: Union[_str, 'types.StringWithAggregatesFilter']
    strSave: Union[_str, 'types.StringWithAggregatesFilter']
    intSave: Union[_str, 'types.StringWithAggregatesFilter']
    dexSave: Union[_str, 'types.StringWithAggregatesFilter']
    wisSave: Union[_str, 'types.StringWithAggregatesFilter']
    conSave: Union[_str, 'types.StringWithAggregatesFilter']
    chaSave: Union[_str, 'types.StringWithAggregatesFilter']
    proficient: Union[_str, 'types.StringWithAggregatesFilter']
    expertise: Union[_str, 'types.StringWithAggregatesFilter']
    vulnerabilities: Union[_str, 'types.StringWithAggregatesFilter']
    slashing: Union[_str, 'types.StringWithAggregatesFilter']
    immunitiesConditions: Union[_str, 'types.StringWithAggregatesFilter']
    immunitiesDamage: Union[_str, 'types.StringWithAggregatesFilter']
    blindsight: Union[_str, 'types.StringWithAggregatesFilter']
    darkvision: Union[_str, 'types.StringWithAggregatesFilter']
    truesight: Union[_str, 'types.StringWithAggregatesFilter']
    tremorsense: Union[_str, 'types.StringWithAggregatesFilter']
    passivePerception: Union[_str, 'types.StringWithAggregatesFilter']
    languages: Union[_str, 'types.StringWithAggregatesFilter']
    cr: Union[_str, 'types.StringWithAggregatesFilter']
    XP_: Union[_str, 'types.StringWithAggregatesFilter']
    pb: Union[_str, 'types.StringWithAggregatesFilter']
    traits: Union[_str, 'types.StringWithAggregatesFilter']
    legendaryResistanceCount: Union[_str, 'types.StringWithAggregatesFilter']
    of_Atk: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk1RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk1DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk2RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk2DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk3RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk3DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk4RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk4DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    saveDC: Union[_str, 'types.StringWithAggregatesFilter']
    savingThrow: Union[_str, 'types.StringWithAggregatesFilter']
    actionNotes: Union[_str, 'types.StringWithAggregatesFilter']
    ability: Union[_str, 'types.StringWithAggregatesFilter']
    spellSaveDC: Union[_str, 'types.StringWithAggregatesFilter']
    spellSavingThrows: Union[_str, 'types.StringWithAggregatesFilter']
    spellAttack: Union[_str, 'types.StringWithAggregatesFilter']
    At_Will: Union[_str, 'types.StringWithAggregatesFilter']
    Day3: Union[_str, 'types.StringWithAggregatesFilter']
    Day2: Union[_str, 'types.StringWithAggregatesFilter']
    Day1: Union[_str, 'types.StringWithAggregatesFilter']
    bonusAction: Union[_str, 'types.StringWithAggregatesFilter']
    reaction: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_str, 'types.StringWithAggregatesFilter']
    legendaryActionSaveDC: Union[_str, 'types.StringWithAggregatesFilter']
    legendaryActionSavingThrow: Union[_str, 'types.StringWithAggregatesFilter']
    Legendary_Actions_: Union[_str, 'types.StringWithAggregatesFilter']
    lair: Union[_str, 'types.StringWithAggregatesFilter']
    xp: Union[_str, 'types.StringWithAggregatesFilter']
    Legendary_Resistance: Union[_str, 'types.StringWithAggregatesFilter']
    Legendary_Actions: Union[_str, 'types.StringWithAggregatesFilter']
    lairSaveDC: Union[_str, 'types.StringWithAggregatesFilter']
    lairSavingThrows: Union[_str, 'types.StringWithAggregatesFilter']
    other: Union[_str, 'types.StringWithAggregatesFilter']
    align: Union[_str, 'types.StringWithAggregatesFilter']
    speeds: Union[_str, 'types.StringWithAggregatesFilter']
    STR: Union[_str, 'types.StringWithAggregatesFilter']
    DEX: Union[_str, 'types.StringWithAggregatesFilter']
    CON: Union[_str, 'types.StringWithAggregatesFilter']
    INT: Union[_str, 'types.StringWithAggregatesFilter']
    WIS: Union[_str, 'types.StringWithAggregatesFilter']
    CHA: Union[_str, 'types.StringWithAggregatesFilter']
    Sav__Throws: Union[_str, 'types.StringWithAggregatesFilter']
    skills: Union[_str, 'types.StringWithAggregatesFilter']
    WRI: Union[_str, 'types.StringWithAggregatesFilter']
    senses: Union[_str, 'types.StringWithAggregatesFilter']
    additional: Union[_str, 'types.StringWithAggregatesFilter']
    font: Union[_str, 'types.StringWithAggregatesFilter']
    additionalInfo: Union[_str, 'types.StringWithAggregatesFilter']
    author: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MonsterScalarWhereWithAggregatesInputRecursive1']
    OR: List['MonsterScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MonsterScalarWhereWithAggregatesInputRecursive1']


class MonsterScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Monster arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    size: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    alignment: Union[_str, 'types.StringWithAggregatesFilter']
    habitat: Union[_str, 'types.StringWithAggregatesFilter']
    mainHabitat: Union[_str, 'types.StringWithAggregatesFilter']
    otherHabitat: Union[_str, 'types.StringWithAggregatesFilter']
    treasure: Union[_str, 'types.StringWithAggregatesFilter']
    ac: Union[_str, 'types.StringWithAggregatesFilter']
    hp: Union[_str, 'types.StringWithAggregatesFilter']
    initiative: Union[_str, 'types.StringWithAggregatesFilter']
    walk: Union[_str, 'types.StringWithAggregatesFilter']
    burrow: Union[_str, 'types.StringWithAggregatesFilter']
    climb: Union[_str, 'types.StringWithAggregatesFilter']
    fly: Union[_str, 'types.StringWithAggregatesFilter']
    hover: Union[_str, 'types.StringWithAggregatesFilter']
    swim: Union[_str, 'types.StringWithAggregatesFilter']
    strMod: Union[_str, 'types.StringWithAggregatesFilter']
    intMod: Union[_str, 'types.StringWithAggregatesFilter']
    dexMod: Union[_str, 'types.StringWithAggregatesFilter']
    wisMod: Union[_str, 'types.StringWithAggregatesFilter']
    conMod: Union[_str, 'types.StringWithAggregatesFilter']
    chaMod: Union[_str, 'types.StringWithAggregatesFilter']
    strSave: Union[_str, 'types.StringWithAggregatesFilter']
    intSave: Union[_str, 'types.StringWithAggregatesFilter']
    dexSave: Union[_str, 'types.StringWithAggregatesFilter']
    wisSave: Union[_str, 'types.StringWithAggregatesFilter']
    conSave: Union[_str, 'types.StringWithAggregatesFilter']
    chaSave: Union[_str, 'types.StringWithAggregatesFilter']
    proficient: Union[_str, 'types.StringWithAggregatesFilter']
    expertise: Union[_str, 'types.StringWithAggregatesFilter']
    vulnerabilities: Union[_str, 'types.StringWithAggregatesFilter']
    slashing: Union[_str, 'types.StringWithAggregatesFilter']
    immunitiesConditions: Union[_str, 'types.StringWithAggregatesFilter']
    immunitiesDamage: Union[_str, 'types.StringWithAggregatesFilter']
    blindsight: Union[_str, 'types.StringWithAggregatesFilter']
    darkvision: Union[_str, 'types.StringWithAggregatesFilter']
    truesight: Union[_str, 'types.StringWithAggregatesFilter']
    tremorsense: Union[_str, 'types.StringWithAggregatesFilter']
    passivePerception: Union[_str, 'types.StringWithAggregatesFilter']
    languages: Union[_str, 'types.StringWithAggregatesFilter']
    cr: Union[_str, 'types.StringWithAggregatesFilter']
    XP_: Union[_str, 'types.StringWithAggregatesFilter']
    pb: Union[_str, 'types.StringWithAggregatesFilter']
    traits: Union[_str, 'types.StringWithAggregatesFilter']
    legendaryResistanceCount: Union[_str, 'types.StringWithAggregatesFilter']
    of_Atk: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk1RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk1DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk2RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk2DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk3RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk3DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk4RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk4DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    saveDC: Union[_str, 'types.StringWithAggregatesFilter']
    savingThrow: Union[_str, 'types.StringWithAggregatesFilter']
    actionNotes: Union[_str, 'types.StringWithAggregatesFilter']
    ability: Union[_str, 'types.StringWithAggregatesFilter']
    spellSaveDC: Union[_str, 'types.StringWithAggregatesFilter']
    spellSavingThrows: Union[_str, 'types.StringWithAggregatesFilter']
    spellAttack: Union[_str, 'types.StringWithAggregatesFilter']
    At_Will: Union[_str, 'types.StringWithAggregatesFilter']
    Day3: Union[_str, 'types.StringWithAggregatesFilter']
    Day2: Union[_str, 'types.StringWithAggregatesFilter']
    Day1: Union[_str, 'types.StringWithAggregatesFilter']
    bonusAction: Union[_str, 'types.StringWithAggregatesFilter']
    reaction: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_str, 'types.StringWithAggregatesFilter']
    legendaryActionSaveDC: Union[_str, 'types.StringWithAggregatesFilter']
    legendaryActionSavingThrow: Union[_str, 'types.StringWithAggregatesFilter']
    Legendary_Actions_: Union[_str, 'types.StringWithAggregatesFilter']
    lair: Union[_str, 'types.StringWithAggregatesFilter']
    xp: Union[_str, 'types.StringWithAggregatesFilter']
    Legendary_Resistance: Union[_str, 'types.StringWithAggregatesFilter']
    Legendary_Actions: Union[_str, 'types.StringWithAggregatesFilter']
    lairSaveDC: Union[_str, 'types.StringWithAggregatesFilter']
    lairSavingThrows: Union[_str, 'types.StringWithAggregatesFilter']
    other: Union[_str, 'types.StringWithAggregatesFilter']
    align: Union[_str, 'types.StringWithAggregatesFilter']
    speeds: Union[_str, 'types.StringWithAggregatesFilter']
    STR: Union[_str, 'types.StringWithAggregatesFilter']
    DEX: Union[_str, 'types.StringWithAggregatesFilter']
    CON: Union[_str, 'types.StringWithAggregatesFilter']
    INT: Union[_str, 'types.StringWithAggregatesFilter']
    WIS: Union[_str, 'types.StringWithAggregatesFilter']
    CHA: Union[_str, 'types.StringWithAggregatesFilter']
    Sav__Throws: Union[_str, 'types.StringWithAggregatesFilter']
    skills: Union[_str, 'types.StringWithAggregatesFilter']
    WRI: Union[_str, 'types.StringWithAggregatesFilter']
    senses: Union[_str, 'types.StringWithAggregatesFilter']
    additional: Union[_str, 'types.StringWithAggregatesFilter']
    font: Union[_str, 'types.StringWithAggregatesFilter']
    additionalInfo: Union[_str, 'types.StringWithAggregatesFilter']
    author: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MonsterScalarWhereWithAggregatesInputRecursive2']
    OR: List['MonsterScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MonsterScalarWhereWithAggregatesInputRecursive2']


class MonsterScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Monster arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    size: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    alignment: Union[_str, 'types.StringWithAggregatesFilter']
    habitat: Union[_str, 'types.StringWithAggregatesFilter']
    mainHabitat: Union[_str, 'types.StringWithAggregatesFilter']
    otherHabitat: Union[_str, 'types.StringWithAggregatesFilter']
    treasure: Union[_str, 'types.StringWithAggregatesFilter']
    ac: Union[_str, 'types.StringWithAggregatesFilter']
    hp: Union[_str, 'types.StringWithAggregatesFilter']
    initiative: Union[_str, 'types.StringWithAggregatesFilter']
    walk: Union[_str, 'types.StringWithAggregatesFilter']
    burrow: Union[_str, 'types.StringWithAggregatesFilter']
    climb: Union[_str, 'types.StringWithAggregatesFilter']
    fly: Union[_str, 'types.StringWithAggregatesFilter']
    hover: Union[_str, 'types.StringWithAggregatesFilter']
    swim: Union[_str, 'types.StringWithAggregatesFilter']
    strMod: Union[_str, 'types.StringWithAggregatesFilter']
    intMod: Union[_str, 'types.StringWithAggregatesFilter']
    dexMod: Union[_str, 'types.StringWithAggregatesFilter']
    wisMod: Union[_str, 'types.StringWithAggregatesFilter']
    conMod: Union[_str, 'types.StringWithAggregatesFilter']
    chaMod: Union[_str, 'types.StringWithAggregatesFilter']
    strSave: Union[_str, 'types.StringWithAggregatesFilter']
    intSave: Union[_str, 'types.StringWithAggregatesFilter']
    dexSave: Union[_str, 'types.StringWithAggregatesFilter']
    wisSave: Union[_str, 'types.StringWithAggregatesFilter']
    conSave: Union[_str, 'types.StringWithAggregatesFilter']
    chaSave: Union[_str, 'types.StringWithAggregatesFilter']
    proficient: Union[_str, 'types.StringWithAggregatesFilter']
    expertise: Union[_str, 'types.StringWithAggregatesFilter']
    vulnerabilities: Union[_str, 'types.StringWithAggregatesFilter']
    slashing: Union[_str, 'types.StringWithAggregatesFilter']
    immunitiesConditions: Union[_str, 'types.StringWithAggregatesFilter']
    immunitiesDamage: Union[_str, 'types.StringWithAggregatesFilter']
    blindsight: Union[_str, 'types.StringWithAggregatesFilter']
    darkvision: Union[_str, 'types.StringWithAggregatesFilter']
    truesight: Union[_str, 'types.StringWithAggregatesFilter']
    tremorsense: Union[_str, 'types.StringWithAggregatesFilter']
    passivePerception: Union[_str, 'types.StringWithAggregatesFilter']
    languages: Union[_str, 'types.StringWithAggregatesFilter']
    cr: Union[_str, 'types.StringWithAggregatesFilter']
    XP_: Union[_str, 'types.StringWithAggregatesFilter']
    pb: Union[_str, 'types.StringWithAggregatesFilter']
    traits: Union[_str, 'types.StringWithAggregatesFilter']
    legendaryResistanceCount: Union[_str, 'types.StringWithAggregatesFilter']
    of_Atk: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk1RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk1DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk2RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk2DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk3RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk3DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk4RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk4DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    saveDC: Union[_str, 'types.StringWithAggregatesFilter']
    savingThrow: Union[_str, 'types.StringWithAggregatesFilter']
    actionNotes: Union[_str, 'types.StringWithAggregatesFilter']
    ability: Union[_str, 'types.StringWithAggregatesFilter']
    spellSaveDC: Union[_str, 'types.StringWithAggregatesFilter']
    spellSavingThrows: Union[_str, 'types.StringWithAggregatesFilter']
    spellAttack: Union[_str, 'types.StringWithAggregatesFilter']
    At_Will: Union[_str, 'types.StringWithAggregatesFilter']
    Day3: Union[_str, 'types.StringWithAggregatesFilter']
    Day2: Union[_str, 'types.StringWithAggregatesFilter']
    Day1: Union[_str, 'types.StringWithAggregatesFilter']
    bonusAction: Union[_str, 'types.StringWithAggregatesFilter']
    reaction: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_str, 'types.StringWithAggregatesFilter']
    legendaryActionSaveDC: Union[_str, 'types.StringWithAggregatesFilter']
    legendaryActionSavingThrow: Union[_str, 'types.StringWithAggregatesFilter']
    Legendary_Actions_: Union[_str, 'types.StringWithAggregatesFilter']
    lair: Union[_str, 'types.StringWithAggregatesFilter']
    xp: Union[_str, 'types.StringWithAggregatesFilter']
    Legendary_Resistance: Union[_str, 'types.StringWithAggregatesFilter']
    Legendary_Actions: Union[_str, 'types.StringWithAggregatesFilter']
    lairSaveDC: Union[_str, 'types.StringWithAggregatesFilter']
    lairSavingThrows: Union[_str, 'types.StringWithAggregatesFilter']
    other: Union[_str, 'types.StringWithAggregatesFilter']
    align: Union[_str, 'types.StringWithAggregatesFilter']
    speeds: Union[_str, 'types.StringWithAggregatesFilter']
    STR: Union[_str, 'types.StringWithAggregatesFilter']
    DEX: Union[_str, 'types.StringWithAggregatesFilter']
    CON: Union[_str, 'types.StringWithAggregatesFilter']
    INT: Union[_str, 'types.StringWithAggregatesFilter']
    WIS: Union[_str, 'types.StringWithAggregatesFilter']
    CHA: Union[_str, 'types.StringWithAggregatesFilter']
    Sav__Throws: Union[_str, 'types.StringWithAggregatesFilter']
    skills: Union[_str, 'types.StringWithAggregatesFilter']
    WRI: Union[_str, 'types.StringWithAggregatesFilter']
    senses: Union[_str, 'types.StringWithAggregatesFilter']
    additional: Union[_str, 'types.StringWithAggregatesFilter']
    font: Union[_str, 'types.StringWithAggregatesFilter']
    additionalInfo: Union[_str, 'types.StringWithAggregatesFilter']
    author: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MonsterScalarWhereWithAggregatesInputRecursive3']
    OR: List['MonsterScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MonsterScalarWhereWithAggregatesInputRecursive3']


class MonsterScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Monster arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    size: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    alignment: Union[_str, 'types.StringWithAggregatesFilter']
    habitat: Union[_str, 'types.StringWithAggregatesFilter']
    mainHabitat: Union[_str, 'types.StringWithAggregatesFilter']
    otherHabitat: Union[_str, 'types.StringWithAggregatesFilter']
    treasure: Union[_str, 'types.StringWithAggregatesFilter']
    ac: Union[_str, 'types.StringWithAggregatesFilter']
    hp: Union[_str, 'types.StringWithAggregatesFilter']
    initiative: Union[_str, 'types.StringWithAggregatesFilter']
    walk: Union[_str, 'types.StringWithAggregatesFilter']
    burrow: Union[_str, 'types.StringWithAggregatesFilter']
    climb: Union[_str, 'types.StringWithAggregatesFilter']
    fly: Union[_str, 'types.StringWithAggregatesFilter']
    hover: Union[_str, 'types.StringWithAggregatesFilter']
    swim: Union[_str, 'types.StringWithAggregatesFilter']
    strMod: Union[_str, 'types.StringWithAggregatesFilter']
    intMod: Union[_str, 'types.StringWithAggregatesFilter']
    dexMod: Union[_str, 'types.StringWithAggregatesFilter']
    wisMod: Union[_str, 'types.StringWithAggregatesFilter']
    conMod: Union[_str, 'types.StringWithAggregatesFilter']
    chaMod: Union[_str, 'types.StringWithAggregatesFilter']
    strSave: Union[_str, 'types.StringWithAggregatesFilter']
    intSave: Union[_str, 'types.StringWithAggregatesFilter']
    dexSave: Union[_str, 'types.StringWithAggregatesFilter']
    wisSave: Union[_str, 'types.StringWithAggregatesFilter']
    conSave: Union[_str, 'types.StringWithAggregatesFilter']
    chaSave: Union[_str, 'types.StringWithAggregatesFilter']
    proficient: Union[_str, 'types.StringWithAggregatesFilter']
    expertise: Union[_str, 'types.StringWithAggregatesFilter']
    vulnerabilities: Union[_str, 'types.StringWithAggregatesFilter']
    slashing: Union[_str, 'types.StringWithAggregatesFilter']
    immunitiesConditions: Union[_str, 'types.StringWithAggregatesFilter']
    immunitiesDamage: Union[_str, 'types.StringWithAggregatesFilter']
    blindsight: Union[_str, 'types.StringWithAggregatesFilter']
    darkvision: Union[_str, 'types.StringWithAggregatesFilter']
    truesight: Union[_str, 'types.StringWithAggregatesFilter']
    tremorsense: Union[_str, 'types.StringWithAggregatesFilter']
    passivePerception: Union[_str, 'types.StringWithAggregatesFilter']
    languages: Union[_str, 'types.StringWithAggregatesFilter']
    cr: Union[_str, 'types.StringWithAggregatesFilter']
    XP_: Union[_str, 'types.StringWithAggregatesFilter']
    pb: Union[_str, 'types.StringWithAggregatesFilter']
    traits: Union[_str, 'types.StringWithAggregatesFilter']
    legendaryResistanceCount: Union[_str, 'types.StringWithAggregatesFilter']
    of_Atk: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk1RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk1DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk2RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk2DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk3RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk3DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk4RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk4DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    saveDC: Union[_str, 'types.StringWithAggregatesFilter']
    savingThrow: Union[_str, 'types.StringWithAggregatesFilter']
    actionNotes: Union[_str, 'types.StringWithAggregatesFilter']
    ability: Union[_str, 'types.StringWithAggregatesFilter']
    spellSaveDC: Union[_str, 'types.StringWithAggregatesFilter']
    spellSavingThrows: Union[_str, 'types.StringWithAggregatesFilter']
    spellAttack: Union[_str, 'types.StringWithAggregatesFilter']
    At_Will: Union[_str, 'types.StringWithAggregatesFilter']
    Day3: Union[_str, 'types.StringWithAggregatesFilter']
    Day2: Union[_str, 'types.StringWithAggregatesFilter']
    Day1: Union[_str, 'types.StringWithAggregatesFilter']
    bonusAction: Union[_str, 'types.StringWithAggregatesFilter']
    reaction: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_str, 'types.StringWithAggregatesFilter']
    legendaryActionSaveDC: Union[_str, 'types.StringWithAggregatesFilter']
    legendaryActionSavingThrow: Union[_str, 'types.StringWithAggregatesFilter']
    Legendary_Actions_: Union[_str, 'types.StringWithAggregatesFilter']
    lair: Union[_str, 'types.StringWithAggregatesFilter']
    xp: Union[_str, 'types.StringWithAggregatesFilter']
    Legendary_Resistance: Union[_str, 'types.StringWithAggregatesFilter']
    Legendary_Actions: Union[_str, 'types.StringWithAggregatesFilter']
    lairSaveDC: Union[_str, 'types.StringWithAggregatesFilter']
    lairSavingThrows: Union[_str, 'types.StringWithAggregatesFilter']
    other: Union[_str, 'types.StringWithAggregatesFilter']
    align: Union[_str, 'types.StringWithAggregatesFilter']
    speeds: Union[_str, 'types.StringWithAggregatesFilter']
    STR: Union[_str, 'types.StringWithAggregatesFilter']
    DEX: Union[_str, 'types.StringWithAggregatesFilter']
    CON: Union[_str, 'types.StringWithAggregatesFilter']
    INT: Union[_str, 'types.StringWithAggregatesFilter']
    WIS: Union[_str, 'types.StringWithAggregatesFilter']
    CHA: Union[_str, 'types.StringWithAggregatesFilter']
    Sav__Throws: Union[_str, 'types.StringWithAggregatesFilter']
    skills: Union[_str, 'types.StringWithAggregatesFilter']
    WRI: Union[_str, 'types.StringWithAggregatesFilter']
    senses: Union[_str, 'types.StringWithAggregatesFilter']
    additional: Union[_str, 'types.StringWithAggregatesFilter']
    font: Union[_str, 'types.StringWithAggregatesFilter']
    additionalInfo: Union[_str, 'types.StringWithAggregatesFilter']
    author: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MonsterScalarWhereWithAggregatesInputRecursive4']
    OR: List['MonsterScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MonsterScalarWhereWithAggregatesInputRecursive4']


class MonsterScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Monster arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    size: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    alignment: Union[_str, 'types.StringWithAggregatesFilter']
    habitat: Union[_str, 'types.StringWithAggregatesFilter']
    mainHabitat: Union[_str, 'types.StringWithAggregatesFilter']
    otherHabitat: Union[_str, 'types.StringWithAggregatesFilter']
    treasure: Union[_str, 'types.StringWithAggregatesFilter']
    ac: Union[_str, 'types.StringWithAggregatesFilter']
    hp: Union[_str, 'types.StringWithAggregatesFilter']
    initiative: Union[_str, 'types.StringWithAggregatesFilter']
    walk: Union[_str, 'types.StringWithAggregatesFilter']
    burrow: Union[_str, 'types.StringWithAggregatesFilter']
    climb: Union[_str, 'types.StringWithAggregatesFilter']
    fly: Union[_str, 'types.StringWithAggregatesFilter']
    hover: Union[_str, 'types.StringWithAggregatesFilter']
    swim: Union[_str, 'types.StringWithAggregatesFilter']
    strMod: Union[_str, 'types.StringWithAggregatesFilter']
    intMod: Union[_str, 'types.StringWithAggregatesFilter']
    dexMod: Union[_str, 'types.StringWithAggregatesFilter']
    wisMod: Union[_str, 'types.StringWithAggregatesFilter']
    conMod: Union[_str, 'types.StringWithAggregatesFilter']
    chaMod: Union[_str, 'types.StringWithAggregatesFilter']
    strSave: Union[_str, 'types.StringWithAggregatesFilter']
    intSave: Union[_str, 'types.StringWithAggregatesFilter']
    dexSave: Union[_str, 'types.StringWithAggregatesFilter']
    wisSave: Union[_str, 'types.StringWithAggregatesFilter']
    conSave: Union[_str, 'types.StringWithAggregatesFilter']
    chaSave: Union[_str, 'types.StringWithAggregatesFilter']
    proficient: Union[_str, 'types.StringWithAggregatesFilter']
    expertise: Union[_str, 'types.StringWithAggregatesFilter']
    vulnerabilities: Union[_str, 'types.StringWithAggregatesFilter']
    slashing: Union[_str, 'types.StringWithAggregatesFilter']
    immunitiesConditions: Union[_str, 'types.StringWithAggregatesFilter']
    immunitiesDamage: Union[_str, 'types.StringWithAggregatesFilter']
    blindsight: Union[_str, 'types.StringWithAggregatesFilter']
    darkvision: Union[_str, 'types.StringWithAggregatesFilter']
    truesight: Union[_str, 'types.StringWithAggregatesFilter']
    tremorsense: Union[_str, 'types.StringWithAggregatesFilter']
    passivePerception: Union[_str, 'types.StringWithAggregatesFilter']
    languages: Union[_str, 'types.StringWithAggregatesFilter']
    cr: Union[_str, 'types.StringWithAggregatesFilter']
    XP_: Union[_str, 'types.StringWithAggregatesFilter']
    pb: Union[_str, 'types.StringWithAggregatesFilter']
    traits: Union[_str, 'types.StringWithAggregatesFilter']
    legendaryResistanceCount: Union[_str, 'types.StringWithAggregatesFilter']
    of_Atk: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk1RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk1Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk1DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk2RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk2Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk2DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk3RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk3Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk3DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Type: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Mod: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Range: Union[_str, 'types.StringWithAggregatesFilter']
    atk4RangeShort: Union[_str, 'types.StringWithAggregatesFilter']
    atk4Dam: Union[_str, 'types.StringWithAggregatesFilter']
    atk4DamageType: Union[_str, 'types.StringWithAggregatesFilter']
    saveDC: Union[_str, 'types.StringWithAggregatesFilter']
    savingThrow: Union[_str, 'types.StringWithAggregatesFilter']
    actionNotes: Union[_str, 'types.StringWithAggregatesFilter']
    ability: Union[_str, 'types.StringWithAggregatesFilter']
    spellSaveDC: Union[_str, 'types.StringWithAggregatesFilter']
    spellSavingThrows: Union[_str, 'types.StringWithAggregatesFilter']
    spellAttack: Union[_str, 'types.StringWithAggregatesFilter']
    At_Will: Union[_str, 'types.StringWithAggregatesFilter']
    Day3: Union[_str, 'types.StringWithAggregatesFilter']
    Day2: Union[_str, 'types.StringWithAggregatesFilter']
    Day1: Union[_str, 'types.StringWithAggregatesFilter']
    bonusAction: Union[_str, 'types.StringWithAggregatesFilter']
    reaction: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_str, 'types.StringWithAggregatesFilter']
    legendaryActionSaveDC: Union[_str, 'types.StringWithAggregatesFilter']
    legendaryActionSavingThrow: Union[_str, 'types.StringWithAggregatesFilter']
    Legendary_Actions_: Union[_str, 'types.StringWithAggregatesFilter']
    lair: Union[_str, 'types.StringWithAggregatesFilter']
    xp: Union[_str, 'types.StringWithAggregatesFilter']
    Legendary_Resistance: Union[_str, 'types.StringWithAggregatesFilter']
    Legendary_Actions: Union[_str, 'types.StringWithAggregatesFilter']
    lairSaveDC: Union[_str, 'types.StringWithAggregatesFilter']
    lairSavingThrows: Union[_str, 'types.StringWithAggregatesFilter']
    other: Union[_str, 'types.StringWithAggregatesFilter']
    align: Union[_str, 'types.StringWithAggregatesFilter']
    speeds: Union[_str, 'types.StringWithAggregatesFilter']
    STR: Union[_str, 'types.StringWithAggregatesFilter']
    DEX: Union[_str, 'types.StringWithAggregatesFilter']
    CON: Union[_str, 'types.StringWithAggregatesFilter']
    INT: Union[_str, 'types.StringWithAggregatesFilter']
    WIS: Union[_str, 'types.StringWithAggregatesFilter']
    CHA: Union[_str, 'types.StringWithAggregatesFilter']
    Sav__Throws: Union[_str, 'types.StringWithAggregatesFilter']
    skills: Union[_str, 'types.StringWithAggregatesFilter']
    WRI: Union[_str, 'types.StringWithAggregatesFilter']
    senses: Union[_str, 'types.StringWithAggregatesFilter']
    additional: Union[_str, 'types.StringWithAggregatesFilter']
    font: Union[_str, 'types.StringWithAggregatesFilter']
    additionalInfo: Union[_str, 'types.StringWithAggregatesFilter']
    author: Union[_str, 'types.StringWithAggregatesFilter']



class MonsterGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    size: _str
    type: _str
    alignment: _str
    habitat: _str
    mainHabitat: _str
    otherHabitat: _str
    treasure: _str
    ac: _str
    hp: _str
    initiative: _str
    walk: _str
    burrow: _str
    climb: _str
    fly: _str
    hover: _str
    swim: _str
    strMod: _str
    intMod: _str
    dexMod: _str
    wisMod: _str
    conMod: _str
    chaMod: _str
    strSave: _str
    intSave: _str
    dexSave: _str
    wisSave: _str
    conSave: _str
    chaSave: _str
    proficient: _str
    expertise: _str
    vulnerabilities: _str
    slashing: _str
    immunitiesConditions: _str
    immunitiesDamage: _str
    blindsight: _str
    darkvision: _str
    truesight: _str
    tremorsense: _str
    passivePerception: _str
    languages: _str
    cr: _str
    XP_: _str
    pb: _str
    traits: _str
    legendaryResistanceCount: _str
    of_Atk: _str
    atk1Type: _str
    atk1Mod: _str
    atk1Range: _str
    atk1RangeShort: _str
    atk1Dam: _str
    atk1DamageType: _str
    atk2Type: _str
    atk2Mod: _str
    atk2Range: _str
    atk2RangeShort: _str
    atk2Dam: _str
    atk2DamageType: _str
    atk3Type: _str
    atk3Mod: _str
    atk3Range: _str
    atk3RangeShort: _str
    atk3Dam: _str
    atk3DamageType: _str
    atk4Type: _str
    atk4Mod: _str
    atk4Range: _str
    atk4RangeShort: _str
    atk4Dam: _str
    atk4DamageType: _str
    saveDC: _str
    savingThrow: _str
    actionNotes: _str
    ability: _str
    spellSaveDC: _str
    spellSavingThrows: _str
    spellAttack: _str
    At_Will: _str
    Day3: _str
    Day2: _str
    Day1: _str
    bonusAction: _str
    reaction: _str
    amount: _str
    legendaryActionSaveDC: _str
    legendaryActionSavingThrow: _str
    Legendary_Actions_: _str
    lair: _str
    xp: _str
    Legendary_Resistance: _str
    Legendary_Actions: _str
    lairSaveDC: _str
    lairSavingThrows: _str
    other: _str
    align: _str
    speeds: _str
    STR: _str
    DEX: _str
    CON: _str
    INT: _str
    WIS: _str
    CHA: _str
    Sav__Throws: _str
    skills: _str
    WRI: _str
    senses: _str
    additional: _str
    font: _str
    additionalInfo: _str
    author: _str
    _sum: 'MonsterSumAggregateOutput'
    _avg: 'MonsterAvgAggregateOutput'
    _min: 'MonsterMinAggregateOutput'
    _max: 'MonsterMaxAggregateOutput'
    _count: 'MonsterCountAggregateOutput'


class MonsterAvgAggregateOutput(TypedDict, total=False):
    """Monster output for aggregating averages"""


class MonsterSumAggregateOutput(TypedDict, total=False):
    """Monster output for aggregating sums"""


class MonsterScalarAggregateOutput(TypedDict, total=False):
    """Monster output including scalar fields"""
    id: _str
    name: _str
    size: _str
    type: _str
    alignment: _str
    habitat: _str
    mainHabitat: _str
    otherHabitat: _str
    treasure: _str
    ac: _str
    hp: _str
    initiative: _str
    walk: _str
    burrow: _str
    climb: _str
    fly: _str
    hover: _str
    swim: _str
    strMod: _str
    intMod: _str
    dexMod: _str
    wisMod: _str
    conMod: _str
    chaMod: _str
    strSave: _str
    intSave: _str
    dexSave: _str
    wisSave: _str
    conSave: _str
    chaSave: _str
    proficient: _str
    expertise: _str
    vulnerabilities: _str
    slashing: _str
    immunitiesConditions: _str
    immunitiesDamage: _str
    blindsight: _str
    darkvision: _str
    truesight: _str
    tremorsense: _str
    passivePerception: _str
    languages: _str
    cr: _str
    XP_: _str
    pb: _str
    traits: _str
    legendaryResistanceCount: _str
    of_Atk: _str
    atk1Type: _str
    atk1Mod: _str
    atk1Range: _str
    atk1RangeShort: _str
    atk1Dam: _str
    atk1DamageType: _str
    atk2Type: _str
    atk2Mod: _str
    atk2Range: _str
    atk2RangeShort: _str
    atk2Dam: _str
    atk2DamageType: _str
    atk3Type: _str
    atk3Mod: _str
    atk3Range: _str
    atk3RangeShort: _str
    atk3Dam: _str
    atk3DamageType: _str
    atk4Type: _str
    atk4Mod: _str
    atk4Range: _str
    atk4RangeShort: _str
    atk4Dam: _str
    atk4DamageType: _str
    saveDC: _str
    savingThrow: _str
    actionNotes: _str
    ability: _str
    spellSaveDC: _str
    spellSavingThrows: _str
    spellAttack: _str
    At_Will: _str
    Day3: _str
    Day2: _str
    Day1: _str
    bonusAction: _str
    reaction: _str
    amount: _str
    legendaryActionSaveDC: _str
    legendaryActionSavingThrow: _str
    Legendary_Actions_: _str
    lair: _str
    xp: _str
    Legendary_Resistance: _str
    Legendary_Actions: _str
    lairSaveDC: _str
    lairSavingThrows: _str
    other: _str
    align: _str
    speeds: _str
    STR: _str
    DEX: _str
    CON: _str
    INT: _str
    WIS: _str
    CHA: _str
    Sav__Throws: _str
    skills: _str
    WRI: _str
    senses: _str
    additional: _str
    font: _str
    additionalInfo: _str
    author: _str


MonsterMinAggregateOutput = MonsterScalarAggregateOutput
MonsterMaxAggregateOutput = MonsterScalarAggregateOutput


class MonsterMaxAggregateInput(TypedDict, total=False):
    """Monster input for aggregating by max"""
    id: bool
    name: bool
    size: bool
    type: bool
    alignment: bool
    habitat: bool
    mainHabitat: bool
    otherHabitat: bool
    treasure: bool
    ac: bool
    hp: bool
    initiative: bool
    walk: bool
    burrow: bool
    climb: bool
    fly: bool
    hover: bool
    swim: bool
    strMod: bool
    intMod: bool
    dexMod: bool
    wisMod: bool
    conMod: bool
    chaMod: bool
    strSave: bool
    intSave: bool
    dexSave: bool
    wisSave: bool
    conSave: bool
    chaSave: bool
    proficient: bool
    expertise: bool
    vulnerabilities: bool
    slashing: bool
    immunitiesConditions: bool
    immunitiesDamage: bool
    blindsight: bool
    darkvision: bool
    truesight: bool
    tremorsense: bool
    passivePerception: bool
    languages: bool
    cr: bool
    XP_: bool
    pb: bool
    traits: bool
    legendaryResistanceCount: bool
    of_Atk: bool
    atk1Type: bool
    atk1Mod: bool
    atk1Range: bool
    atk1RangeShort: bool
    atk1Dam: bool
    atk1DamageType: bool
    atk2Type: bool
    atk2Mod: bool
    atk2Range: bool
    atk2RangeShort: bool
    atk2Dam: bool
    atk2DamageType: bool
    atk3Type: bool
    atk3Mod: bool
    atk3Range: bool
    atk3RangeShort: bool
    atk3Dam: bool
    atk3DamageType: bool
    atk4Type: bool
    atk4Mod: bool
    atk4Range: bool
    atk4RangeShort: bool
    atk4Dam: bool
    atk4DamageType: bool
    saveDC: bool
    savingThrow: bool
    actionNotes: bool
    ability: bool
    spellSaveDC: bool
    spellSavingThrows: bool
    spellAttack: bool
    At_Will: bool
    Day3: bool
    Day2: bool
    Day1: bool
    bonusAction: bool
    reaction: bool
    amount: bool
    legendaryActionSaveDC: bool
    legendaryActionSavingThrow: bool
    Legendary_Actions_: bool
    lair: bool
    xp: bool
    Legendary_Resistance: bool
    Legendary_Actions: bool
    lairSaveDC: bool
    lairSavingThrows: bool
    other: bool
    align: bool
    speeds: bool
    STR: bool
    DEX: bool
    CON: bool
    INT: bool
    WIS: bool
    CHA: bool
    Sav__Throws: bool
    skills: bool
    WRI: bool
    senses: bool
    additional: bool
    font: bool
    additionalInfo: bool
    author: bool


class MonsterMinAggregateInput(TypedDict, total=False):
    """Monster input for aggregating by min"""
    id: bool
    name: bool
    size: bool
    type: bool
    alignment: bool
    habitat: bool
    mainHabitat: bool
    otherHabitat: bool
    treasure: bool
    ac: bool
    hp: bool
    initiative: bool
    walk: bool
    burrow: bool
    climb: bool
    fly: bool
    hover: bool
    swim: bool
    strMod: bool
    intMod: bool
    dexMod: bool
    wisMod: bool
    conMod: bool
    chaMod: bool
    strSave: bool
    intSave: bool
    dexSave: bool
    wisSave: bool
    conSave: bool
    chaSave: bool
    proficient: bool
    expertise: bool
    vulnerabilities: bool
    slashing: bool
    immunitiesConditions: bool
    immunitiesDamage: bool
    blindsight: bool
    darkvision: bool
    truesight: bool
    tremorsense: bool
    passivePerception: bool
    languages: bool
    cr: bool
    XP_: bool
    pb: bool
    traits: bool
    legendaryResistanceCount: bool
    of_Atk: bool
    atk1Type: bool
    atk1Mod: bool
    atk1Range: bool
    atk1RangeShort: bool
    atk1Dam: bool
    atk1DamageType: bool
    atk2Type: bool
    atk2Mod: bool
    atk2Range: bool
    atk2RangeShort: bool
    atk2Dam: bool
    atk2DamageType: bool
    atk3Type: bool
    atk3Mod: bool
    atk3Range: bool
    atk3RangeShort: bool
    atk3Dam: bool
    atk3DamageType: bool
    atk4Type: bool
    atk4Mod: bool
    atk4Range: bool
    atk4RangeShort: bool
    atk4Dam: bool
    atk4DamageType: bool
    saveDC: bool
    savingThrow: bool
    actionNotes: bool
    ability: bool
    spellSaveDC: bool
    spellSavingThrows: bool
    spellAttack: bool
    At_Will: bool
    Day3: bool
    Day2: bool
    Day1: bool
    bonusAction: bool
    reaction: bool
    amount: bool
    legendaryActionSaveDC: bool
    legendaryActionSavingThrow: bool
    Legendary_Actions_: bool
    lair: bool
    xp: bool
    Legendary_Resistance: bool
    Legendary_Actions: bool
    lairSaveDC: bool
    lairSavingThrows: bool
    other: bool
    align: bool
    speeds: bool
    STR: bool
    DEX: bool
    CON: bool
    INT: bool
    WIS: bool
    CHA: bool
    Sav__Throws: bool
    skills: bool
    WRI: bool
    senses: bool
    additional: bool
    font: bool
    additionalInfo: bool
    author: bool


class MonsterNumberAggregateInput(TypedDict, total=False):
    """Monster input for aggregating numbers"""


MonsterAvgAggregateInput = MonsterNumberAggregateInput
MonsterSumAggregateInput = MonsterNumberAggregateInput


MonsterCountAggregateInput = TypedDict(
    'MonsterCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'size': bool,
        'type': bool,
        'alignment': bool,
        'habitat': bool,
        'mainHabitat': bool,
        'otherHabitat': bool,
        'treasure': bool,
        'ac': bool,
        'hp': bool,
        'initiative': bool,
        'walk': bool,
        'burrow': bool,
        'climb': bool,
        'fly': bool,
        'hover': bool,
        'swim': bool,
        'strMod': bool,
        'intMod': bool,
        'dexMod': bool,
        'wisMod': bool,
        'conMod': bool,
        'chaMod': bool,
        'strSave': bool,
        'intSave': bool,
        'dexSave': bool,
        'wisSave': bool,
        'conSave': bool,
        'chaSave': bool,
        'proficient': bool,
        'expertise': bool,
        'vulnerabilities': bool,
        'slashing': bool,
        'immunitiesConditions': bool,
        'immunitiesDamage': bool,
        'blindsight': bool,
        'darkvision': bool,
        'truesight': bool,
        'tremorsense': bool,
        'passivePerception': bool,
        'languages': bool,
        'cr': bool,
        'XP_': bool,
        'pb': bool,
        'traits': bool,
        'legendaryResistanceCount': bool,
        'of_Atk': bool,
        'atk1Type': bool,
        'atk1Mod': bool,
        'atk1Range': bool,
        'atk1RangeShort': bool,
        'atk1Dam': bool,
        'atk1DamageType': bool,
        'atk2Type': bool,
        'atk2Mod': bool,
        'atk2Range': bool,
        'atk2RangeShort': bool,
        'atk2Dam': bool,
        'atk2DamageType': bool,
        'atk3Type': bool,
        'atk3Mod': bool,
        'atk3Range': bool,
        'atk3RangeShort': bool,
        'atk3Dam': bool,
        'atk3DamageType': bool,
        'atk4Type': bool,
        'atk4Mod': bool,
        'atk4Range': bool,
        'atk4RangeShort': bool,
        'atk4Dam': bool,
        'atk4DamageType': bool,
        'saveDC': bool,
        'savingThrow': bool,
        'actionNotes': bool,
        'ability': bool,
        'spellSaveDC': bool,
        'spellSavingThrows': bool,
        'spellAttack': bool,
        'At_Will': bool,
        'Day3': bool,
        'Day2': bool,
        'Day1': bool,
        'bonusAction': bool,
        'reaction': bool,
        'amount': bool,
        'legendaryActionSaveDC': bool,
        'legendaryActionSavingThrow': bool,
        'Legendary_Actions_': bool,
        'lair': bool,
        'xp': bool,
        'Legendary_Resistance': bool,
        'Legendary_Actions': bool,
        'lairSaveDC': bool,
        'lairSavingThrows': bool,
        'other': bool,
        'align': bool,
        'speeds': bool,
        'STR': bool,
        'DEX': bool,
        'CON': bool,
        'INT': bool,
        'WIS': bool,
        'CHA': bool,
        'Sav__Throws': bool,
        'skills': bool,
        'WRI': bool,
        'senses': bool,
        'additional': bool,
        'font': bool,
        'additionalInfo': bool,
        'author': bool,
        '_all': bool,
    },
    total=False,
)

MonsterCountAggregateOutput = TypedDict(
    'MonsterCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'size': int,
        'type': int,
        'alignment': int,
        'habitat': int,
        'mainHabitat': int,
        'otherHabitat': int,
        'treasure': int,
        'ac': int,
        'hp': int,
        'initiative': int,
        'walk': int,
        'burrow': int,
        'climb': int,
        'fly': int,
        'hover': int,
        'swim': int,
        'strMod': int,
        'intMod': int,
        'dexMod': int,
        'wisMod': int,
        'conMod': int,
        'chaMod': int,
        'strSave': int,
        'intSave': int,
        'dexSave': int,
        'wisSave': int,
        'conSave': int,
        'chaSave': int,
        'proficient': int,
        'expertise': int,
        'vulnerabilities': int,
        'slashing': int,
        'immunitiesConditions': int,
        'immunitiesDamage': int,
        'blindsight': int,
        'darkvision': int,
        'truesight': int,
        'tremorsense': int,
        'passivePerception': int,
        'languages': int,
        'cr': int,
        'XP_': int,
        'pb': int,
        'traits': int,
        'legendaryResistanceCount': int,
        'of_Atk': int,
        'atk1Type': int,
        'atk1Mod': int,
        'atk1Range': int,
        'atk1RangeShort': int,
        'atk1Dam': int,
        'atk1DamageType': int,
        'atk2Type': int,
        'atk2Mod': int,
        'atk2Range': int,
        'atk2RangeShort': int,
        'atk2Dam': int,
        'atk2DamageType': int,
        'atk3Type': int,
        'atk3Mod': int,
        'atk3Range': int,
        'atk3RangeShort': int,
        'atk3Dam': int,
        'atk3DamageType': int,
        'atk4Type': int,
        'atk4Mod': int,
        'atk4Range': int,
        'atk4RangeShort': int,
        'atk4Dam': int,
        'atk4DamageType': int,
        'saveDC': int,
        'savingThrow': int,
        'actionNotes': int,
        'ability': int,
        'spellSaveDC': int,
        'spellSavingThrows': int,
        'spellAttack': int,
        'At_Will': int,
        'Day3': int,
        'Day2': int,
        'Day1': int,
        'bonusAction': int,
        'reaction': int,
        'amount': int,
        'legendaryActionSaveDC': int,
        'legendaryActionSavingThrow': int,
        'Legendary_Actions_': int,
        'lair': int,
        'xp': int,
        'Legendary_Resistance': int,
        'Legendary_Actions': int,
        'lairSaveDC': int,
        'lairSavingThrows': int,
        'other': int,
        'align': int,
        'speeds': int,
        'STR': int,
        'DEX': int,
        'CON': int,
        'INT': int,
        'WIS': int,
        'CHA': int,
        'Sav__Throws': int,
        'skills': int,
        'WRI': int,
        'senses': int,
        'additional': int,
        'font': int,
        'additionalInfo': int,
        'author': int,
        '_all': int,
    },
    total=False,
)


MonsterKeys = Literal[
    'id',
    'name',
    'size',
    'type',
    'alignment',
    'habitat',
    'mainHabitat',
    'otherHabitat',
    'treasure',
    'ac',
    'hp',
    'initiative',
    'walk',
    'burrow',
    'climb',
    'fly',
    'hover',
    'swim',
    'strMod',
    'intMod',
    'dexMod',
    'wisMod',
    'conMod',
    'chaMod',
    'strSave',
    'intSave',
    'dexSave',
    'wisSave',
    'conSave',
    'chaSave',
    'proficient',
    'expertise',
    'vulnerabilities',
    'slashing',
    'immunitiesConditions',
    'immunitiesDamage',
    'blindsight',
    'darkvision',
    'truesight',
    'tremorsense',
    'passivePerception',
    'languages',
    'cr',
    'XP_',
    'pb',
    'traits',
    'legendaryResistanceCount',
    'of_Atk',
    'atk1Type',
    'atk1Mod',
    'atk1Range',
    'atk1RangeShort',
    'atk1Dam',
    'atk1DamageType',
    'atk2Type',
    'atk2Mod',
    'atk2Range',
    'atk2RangeShort',
    'atk2Dam',
    'atk2DamageType',
    'atk3Type',
    'atk3Mod',
    'atk3Range',
    'atk3RangeShort',
    'atk3Dam',
    'atk3DamageType',
    'atk4Type',
    'atk4Mod',
    'atk4Range',
    'atk4RangeShort',
    'atk4Dam',
    'atk4DamageType',
    'saveDC',
    'savingThrow',
    'actionNotes',
    'ability',
    'spellSaveDC',
    'spellSavingThrows',
    'spellAttack',
    'At_Will',
    'Day3',
    'Day2',
    'Day1',
    'bonusAction',
    'reaction',
    'amount',
    'legendaryActionSaveDC',
    'legendaryActionSavingThrow',
    'Legendary_Actions_',
    'lair',
    'xp',
    'Legendary_Resistance',
    'Legendary_Actions',
    'lairSaveDC',
    'lairSavingThrows',
    'other',
    'align',
    'speeds',
    'STR',
    'DEX',
    'CON',
    'INT',
    'WIS',
    'CHA',
    'Sav__Throws',
    'skills',
    'WRI',
    'senses',
    'additional',
    'font',
    'additionalInfo',
    'author',
]
MonsterScalarFieldKeys = Literal[
    'id',
    'name',
    'size',
    'type',
    'alignment',
    'habitat',
    'mainHabitat',
    'otherHabitat',
    'treasure',
    'ac',
    'hp',
    'initiative',
    'walk',
    'burrow',
    'climb',
    'fly',
    'hover',
    'swim',
    'strMod',
    'intMod',
    'dexMod',
    'wisMod',
    'conMod',
    'chaMod',
    'strSave',
    'intSave',
    'dexSave',
    'wisSave',
    'conSave',
    'chaSave',
    'proficient',
    'expertise',
    'vulnerabilities',
    'slashing',
    'immunitiesConditions',
    'immunitiesDamage',
    'blindsight',
    'darkvision',
    'truesight',
    'tremorsense',
    'passivePerception',
    'languages',
    'cr',
    'XP_',
    'pb',
    'traits',
    'legendaryResistanceCount',
    'of_Atk',
    'atk1Type',
    'atk1Mod',
    'atk1Range',
    'atk1RangeShort',
    'atk1Dam',
    'atk1DamageType',
    'atk2Type',
    'atk2Mod',
    'atk2Range',
    'atk2RangeShort',
    'atk2Dam',
    'atk2DamageType',
    'atk3Type',
    'atk3Mod',
    'atk3Range',
    'atk3RangeShort',
    'atk3Dam',
    'atk3DamageType',
    'atk4Type',
    'atk4Mod',
    'atk4Range',
    'atk4RangeShort',
    'atk4Dam',
    'atk4DamageType',
    'saveDC',
    'savingThrow',
    'actionNotes',
    'ability',
    'spellSaveDC',
    'spellSavingThrows',
    'spellAttack',
    'At_Will',
    'Day3',
    'Day2',
    'Day1',
    'bonusAction',
    'reaction',
    'amount',
    'legendaryActionSaveDC',
    'legendaryActionSavingThrow',
    'Legendary_Actions_',
    'lair',
    'xp',
    'Legendary_Resistance',
    'Legendary_Actions',
    'lairSaveDC',
    'lairSavingThrows',
    'other',
    'align',
    'speeds',
    'STR',
    'DEX',
    'CON',
    'INT',
    'WIS',
    'CHA',
    'Sav__Throws',
    'skills',
    'WRI',
    'senses',
    'additional',
    'font',
    'additionalInfo',
    'author',
]
MonsterScalarFieldKeysT = TypeVar('MonsterScalarFieldKeysT', bound=MonsterScalarFieldKeys)

MonsterRelationalFieldKeys = _NoneType

# Race types

class RaceOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Race create method"""
    id: _int
    str: Optional[_str]
    dex: Optional[_str]
    con: Optional[_str]
    int: Optional[_str]
    wis: Optional[_str]
    cha: Optional[_str]
    special: Optional[_str]
    notes: Optional[_str]


class RaceCreateInput(RaceOptionalCreateInput):
    """Required arguments to the Race create method"""
    race: _str
    source: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RaceOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Race create method, without relations"""
    id: _int
    str: Optional[_str]
    dex: Optional[_str]
    con: Optional[_str]
    int: Optional[_str]
    wis: Optional[_str]
    cha: Optional[_str]
    special: Optional[_str]
    notes: Optional[_str]


class RaceCreateWithoutRelationsInput(RaceOptionalCreateWithoutRelationsInput):
    """Required arguments to the Race create method, without relations"""
    race: _str
    source: _str

class RaceConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'RaceCreateWithoutRelationsInput'
    where: 'RaceWhereUniqueInput'

class RaceCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RaceCreateWithoutRelationsInput'
    connect: 'RaceWhereUniqueInput'
    connect_or_create: 'RaceConnectOrCreateWithoutRelationsInput'


class RaceCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RaceCreateWithoutRelationsInput', List['RaceCreateWithoutRelationsInput']]
    connect: Union['RaceWhereUniqueInput', List['RaceWhereUniqueInput']]
    connect_or_create: Union['RaceConnectOrCreateWithoutRelationsInput', List['RaceConnectOrCreateWithoutRelationsInput']]

_RaceWhereUnique_id_Input = TypedDict(
    '_RaceWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_RaceWhereUnique_race_Input = TypedDict(
    '_RaceWhereUnique_race_Input',
    {
        'race': '_str',
    },
    total=True
)

RaceWhereUniqueInput = Union[
    '_RaceWhereUnique_id_Input',
    '_RaceWhereUnique_race_Input',
]


class RaceUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    race: _str
    str: Optional[_str]
    dex: Optional[_str]
    con: Optional[_str]
    int: Optional[_str]
    wis: Optional[_str]
    cha: Optional[_str]
    special: Optional[_str]
    source: _str
    notes: Optional[_str]


class RaceUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    race: _str
    str: Optional[_str]
    dex: Optional[_str]
    con: Optional[_str]
    int: Optional[_str]
    wis: Optional[_str]
    cha: Optional[_str]
    special: Optional[_str]
    source: _str
    notes: Optional[_str]


class RaceUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RaceCreateWithoutRelationsInput']
    connect: List['RaceWhereUniqueInput']
    connect_or_create: List['RaceConnectOrCreateWithoutRelationsInput']
    set: List['RaceWhereUniqueInput']
    disconnect: List['RaceWhereUniqueInput']
    delete: List['RaceWhereUniqueInput']

    # TODO
    # update: List['RaceUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RaceUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RaceScalarWhereInput']
    # upsert: List['RaceUpserteWithWhereUniqueWithoutRelationsInput']


class RaceUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RaceCreateWithoutRelationsInput'
    connect: 'RaceWhereUniqueInput'
    connect_or_create: 'RaceConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RaceUpdateInput'
    # upsert: 'RaceUpsertWithoutRelationsInput'


class RaceUpsertInput(TypedDict):
    create: 'RaceCreateInput'
    update: 'RaceUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Race_id_OrderByInput = TypedDict(
    '_Race_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Race_race_OrderByInput = TypedDict(
    '_Race_race_OrderByInput',
    {
        'race': 'SortOrder',
    },
    total=True
)

_Race_str_OrderByInput = TypedDict(
    '_Race_str_OrderByInput',
    {
        'str': 'SortOrder',
    },
    total=True
)

_Race_dex_OrderByInput = TypedDict(
    '_Race_dex_OrderByInput',
    {
        'dex': 'SortOrder',
    },
    total=True
)

_Race_con_OrderByInput = TypedDict(
    '_Race_con_OrderByInput',
    {
        'con': 'SortOrder',
    },
    total=True
)

_Race_int_OrderByInput = TypedDict(
    '_Race_int_OrderByInput',
    {
        'int': 'SortOrder',
    },
    total=True
)

_Race_wis_OrderByInput = TypedDict(
    '_Race_wis_OrderByInput',
    {
        'wis': 'SortOrder',
    },
    total=True
)

_Race_cha_OrderByInput = TypedDict(
    '_Race_cha_OrderByInput',
    {
        'cha': 'SortOrder',
    },
    total=True
)

_Race_special_OrderByInput = TypedDict(
    '_Race_special_OrderByInput',
    {
        'special': 'SortOrder',
    },
    total=True
)

_Race_source_OrderByInput = TypedDict(
    '_Race_source_OrderByInput',
    {
        'source': 'SortOrder',
    },
    total=True
)

_Race_notes_OrderByInput = TypedDict(
    '_Race_notes_OrderByInput',
    {
        'notes': 'SortOrder',
    },
    total=True
)

_Race_RelevanceInner = TypedDict(
    '_Race_RelevanceInner',
    {
        'fields': 'List[RaceScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Race_RelevanceOrderByInput = TypedDict(
    '_Race_RelevanceOrderByInput',
    {
        '_relevance': '_Race_RelevanceInner',
    },
    total=True
)

RaceOrderByInput = Union[
    '_Race_id_OrderByInput',
    '_Race_race_OrderByInput',
    '_Race_str_OrderByInput',
    '_Race_dex_OrderByInput',
    '_Race_con_OrderByInput',
    '_Race_int_OrderByInput',
    '_Race_wis_OrderByInput',
    '_Race_cha_OrderByInput',
    '_Race_special_OrderByInput',
    '_Race_source_OrderByInput',
    '_Race_notes_OrderByInput',
    '_Race_RelevanceOrderByInput',
]



# recursive Race types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

RaceRelationFilter = TypedDict(
    'RaceRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class RaceListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class RaceInclude(TypedDict, total=False):
    """Race relational arguments"""


    

class CHARACTERVECTORIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""


class CHARACTERVECTORIncludeFromRaceRecursive1(TypedDict, total=False):
    """Relational arguments for Race"""


class CHARACTERVECTORIncludeFromRaceRecursive2(TypedDict, total=False):
    """Relational arguments for Race"""


class CHARACTERVECTORIncludeFromRaceRecursive3(TypedDict, total=False):
    """Relational arguments for Race"""


class CHARACTERVECTORIncludeFromRaceRecursive4(TypedDict, total=False):
    """Relational arguments for Race"""

    

class CHARACTERVECTORArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class CHARACTERVECTORArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class CHARACTERVECTORArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class CHARACTERVECTORArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class CHARACTERVECTORArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    
    

class FindManyCHARACTERVECTORArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class FindManyCHARACTERVECTORArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class FindManyCHARACTERVECTORArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class FindManyCHARACTERVECTORArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class FindManyCHARACTERVECTORArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    
    

class ClassesIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""


class ClassesIncludeFromRaceRecursive1(TypedDict, total=False):
    """Relational arguments for Race"""


class ClassesIncludeFromRaceRecursive2(TypedDict, total=False):
    """Relational arguments for Race"""


class ClassesIncludeFromRaceRecursive3(TypedDict, total=False):
    """Relational arguments for Race"""


class ClassesIncludeFromRaceRecursive4(TypedDict, total=False):
    """Relational arguments for Race"""

    

class ClassesArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'ClassesIncludeFromClassesRecursive1'


class ClassesArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    include: 'ClassesIncludeFromClassesRecursive2'


class ClassesArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    include: 'ClassesIncludeFromClassesRecursive3'


class ClassesArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    include: 'ClassesIncludeFromClassesRecursive4'


class ClassesArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    
    

class FindManyClassesArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive1'


class FindManyClassesArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive2'


class FindManyClassesArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive3'


class FindManyClassesArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive4'


class FindManyClassesArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    
    

class GeneralEquipmentIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""


class GeneralEquipmentIncludeFromRaceRecursive1(TypedDict, total=False):
    """Relational arguments for Race"""


class GeneralEquipmentIncludeFromRaceRecursive2(TypedDict, total=False):
    """Relational arguments for Race"""


class GeneralEquipmentIncludeFromRaceRecursive3(TypedDict, total=False):
    """Relational arguments for Race"""


class GeneralEquipmentIncludeFromRaceRecursive4(TypedDict, total=False):
    """Relational arguments for Race"""

    

class GeneralEquipmentArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class GeneralEquipmentArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class GeneralEquipmentArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class GeneralEquipmentArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class GeneralEquipmentArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    
    

class FindManyGeneralEquipmentArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class FindManyGeneralEquipmentArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class FindManyGeneralEquipmentArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class FindManyGeneralEquipmentArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class FindManyGeneralEquipmentArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    
    

class ITEMSVECTORIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""


class ITEMSVECTORIncludeFromRaceRecursive1(TypedDict, total=False):
    """Relational arguments for Race"""


class ITEMSVECTORIncludeFromRaceRecursive2(TypedDict, total=False):
    """Relational arguments for Race"""


class ITEMSVECTORIncludeFromRaceRecursive3(TypedDict, total=False):
    """Relational arguments for Race"""


class ITEMSVECTORIncludeFromRaceRecursive4(TypedDict, total=False):
    """Relational arguments for Race"""

    

class ITEMSVECTORArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class ITEMSVECTORArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class ITEMSVECTORArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class ITEMSVECTORArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class ITEMSVECTORArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    
    

class FindManyITEMSVECTORArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class FindManyITEMSVECTORArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class FindManyITEMSVECTORArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class FindManyITEMSVECTORArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class FindManyITEMSVECTORArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    
    

class MONSTERVECTORIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""


class MONSTERVECTORIncludeFromRaceRecursive1(TypedDict, total=False):
    """Relational arguments for Race"""


class MONSTERVECTORIncludeFromRaceRecursive2(TypedDict, total=False):
    """Relational arguments for Race"""


class MONSTERVECTORIncludeFromRaceRecursive3(TypedDict, total=False):
    """Relational arguments for Race"""


class MONSTERVECTORIncludeFromRaceRecursive4(TypedDict, total=False):
    """Relational arguments for Race"""

    

class MONSTERVECTORArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class MONSTERVECTORArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class MONSTERVECTORArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class MONSTERVECTORArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class MONSTERVECTORArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    
    

class FindManyMONSTERVECTORArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class FindManyMONSTERVECTORArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class FindManyMONSTERVECTORArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class FindManyMONSTERVECTORArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class FindManyMONSTERVECTORArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    
    

class MagicItemIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""


class MagicItemIncludeFromRaceRecursive1(TypedDict, total=False):
    """Relational arguments for Race"""


class MagicItemIncludeFromRaceRecursive2(TypedDict, total=False):
    """Relational arguments for Race"""


class MagicItemIncludeFromRaceRecursive3(TypedDict, total=False):
    """Relational arguments for Race"""


class MagicItemIncludeFromRaceRecursive4(TypedDict, total=False):
    """Relational arguments for Race"""

    

class MagicItemArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class MagicItemArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class MagicItemArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class MagicItemArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class MagicItemArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    
    

class FindManyMagicItemArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class FindManyMagicItemArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class FindManyMagicItemArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class FindManyMagicItemArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class FindManyMagicItemArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    
    

class MonsterIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""


class MonsterIncludeFromRaceRecursive1(TypedDict, total=False):
    """Relational arguments for Race"""


class MonsterIncludeFromRaceRecursive2(TypedDict, total=False):
    """Relational arguments for Race"""


class MonsterIncludeFromRaceRecursive3(TypedDict, total=False):
    """Relational arguments for Race"""


class MonsterIncludeFromRaceRecursive4(TypedDict, total=False):
    """Relational arguments for Race"""

    

class MonsterArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'MonsterIncludeFromMonsterRecursive1'


class MonsterArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    include: 'MonsterIncludeFromMonsterRecursive2'


class MonsterArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    include: 'MonsterIncludeFromMonsterRecursive3'


class MonsterArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    include: 'MonsterIncludeFromMonsterRecursive4'


class MonsterArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    
    

class FindManyMonsterArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive1'


class FindManyMonsterArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive2'


class FindManyMonsterArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive3'


class FindManyMonsterArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive4'


class FindManyMonsterArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    
    

class RaceIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""


class RaceIncludeFromRaceRecursive1(TypedDict, total=False):
    """Relational arguments for Race"""


class RaceIncludeFromRaceRecursive2(TypedDict, total=False):
    """Relational arguments for Race"""


class RaceIncludeFromRaceRecursive3(TypedDict, total=False):
    """Relational arguments for Race"""


class RaceIncludeFromRaceRecursive4(TypedDict, total=False):
    """Relational arguments for Race"""

    

class RaceArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'RaceIncludeFromRaceRecursive1'


class RaceArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    include: 'RaceIncludeFromRaceRecursive2'


class RaceArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    include: 'RaceIncludeFromRaceRecursive3'


class RaceArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    include: 'RaceIncludeFromRaceRecursive4'


class RaceArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    
    

class FindManyRaceArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive1'


class FindManyRaceArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive2'


class FindManyRaceArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive3'


class FindManyRaceArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive4'


class FindManyRaceArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    
    

class SESSIONIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""


class SESSIONIncludeFromRaceRecursive1(TypedDict, total=False):
    """Relational arguments for Race"""


class SESSIONIncludeFromRaceRecursive2(TypedDict, total=False):
    """Relational arguments for Race"""


class SESSIONIncludeFromRaceRecursive3(TypedDict, total=False):
    """Relational arguments for Race"""


class SESSIONIncludeFromRaceRecursive4(TypedDict, total=False):
    """Relational arguments for Race"""

    

class SESSIONArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class SESSIONArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class SESSIONArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class SESSIONArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class SESSIONArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    
    

class FindManySESSIONArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class FindManySESSIONArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class FindManySESSIONArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class FindManySESSIONArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class FindManySESSIONArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    
    

class SPELLSVECTORIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""


class SPELLSVECTORIncludeFromRaceRecursive1(TypedDict, total=False):
    """Relational arguments for Race"""


class SPELLSVECTORIncludeFromRaceRecursive2(TypedDict, total=False):
    """Relational arguments for Race"""


class SPELLSVECTORIncludeFromRaceRecursive3(TypedDict, total=False):
    """Relational arguments for Race"""


class SPELLSVECTORIncludeFromRaceRecursive4(TypedDict, total=False):
    """Relational arguments for Race"""

    

class SPELLSVECTORArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class SPELLSVECTORArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class SPELLSVECTORArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class SPELLSVECTORArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class SPELLSVECTORArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    
    

class FindManySPELLSVECTORArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class FindManySPELLSVECTORArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class FindManySPELLSVECTORArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class FindManySPELLSVECTORArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class FindManySPELLSVECTORArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    
    

class SpellIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""


class SpellIncludeFromRaceRecursive1(TypedDict, total=False):
    """Relational arguments for Race"""


class SpellIncludeFromRaceRecursive2(TypedDict, total=False):
    """Relational arguments for Race"""


class SpellIncludeFromRaceRecursive3(TypedDict, total=False):
    """Relational arguments for Race"""


class SpellIncludeFromRaceRecursive4(TypedDict, total=False):
    """Relational arguments for Race"""

    

class SpellArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'SpellIncludeFromSpellRecursive1'


class SpellArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    include: 'SpellIncludeFromSpellRecursive2'


class SpellArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    include: 'SpellIncludeFromSpellRecursive3'


class SpellArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    include: 'SpellIncludeFromSpellRecursive4'


class SpellArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    
    

class FindManySpellArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive1'


class FindManySpellArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive2'


class FindManySpellArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive3'


class FindManySpellArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive4'


class FindManySpellArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    
    

class USERDATAIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""


class USERDATAIncludeFromRaceRecursive1(TypedDict, total=False):
    """Relational arguments for Race"""


class USERDATAIncludeFromRaceRecursive2(TypedDict, total=False):
    """Relational arguments for Race"""


class USERDATAIncludeFromRaceRecursive3(TypedDict, total=False):
    """Relational arguments for Race"""


class USERDATAIncludeFromRaceRecursive4(TypedDict, total=False):
    """Relational arguments for Race"""

    

class USERDATAArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class USERDATAArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class USERDATAArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class USERDATAArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class USERDATAArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    
    

class FindManyUSERDATAArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class FindManyUSERDATAArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class FindManyUSERDATAArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class FindManyUSERDATAArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class FindManyUSERDATAArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    
    

class STORYVECTORIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""


class STORYVECTORIncludeFromRaceRecursive1(TypedDict, total=False):
    """Relational arguments for Race"""


class STORYVECTORIncludeFromRaceRecursive2(TypedDict, total=False):
    """Relational arguments for Race"""


class STORYVECTORIncludeFromRaceRecursive3(TypedDict, total=False):
    """Relational arguments for Race"""


class STORYVECTORIncludeFromRaceRecursive4(TypedDict, total=False):
    """Relational arguments for Race"""

    

class STORYVECTORArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class STORYVECTORArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class STORYVECTORArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class STORYVECTORArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class STORYVECTORArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    
    

class FindManySTORYVECTORArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class FindManySTORYVECTORArgsFromRaceRecursive1(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class FindManySTORYVECTORArgsFromRaceRecursive2(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class FindManySTORYVECTORArgsFromRaceRecursive3(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class FindManySTORYVECTORArgsFromRaceRecursive4(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    


FindManyRaceArgs = FindManyRaceArgsFromRace
FindFirstRaceArgs = FindManyRaceArgsFromRace


    

class RaceWhereInput(TypedDict, total=False):
    """Race arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    race: Union[_str, 'types.StringFilter']
    str: Union[None, _str, 'types.StringFilter']
    dex: Union[None, _str, 'types.StringFilter']
    con: Union[None, _str, 'types.StringFilter']
    int: Union[None, _str, 'types.StringFilter']
    wis: Union[None, _str, 'types.StringFilter']
    cha: Union[None, _str, 'types.StringFilter']
    special: Union[None, _str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']
    notes: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['RaceWhereInputRecursive1', List['RaceWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['RaceWhereInputRecursive1']
    OR: List['RaceWhereInputRecursive1']
    NOT: List['RaceWhereInputRecursive1']


class RaceWhereInputRecursive1(TypedDict, total=False):
    """Race arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    race: Union[_str, 'types.StringFilter']
    str: Union[None, _str, 'types.StringFilter']
    dex: Union[None, _str, 'types.StringFilter']
    con: Union[None, _str, 'types.StringFilter']
    int: Union[None, _str, 'types.StringFilter']
    wis: Union[None, _str, 'types.StringFilter']
    cha: Union[None, _str, 'types.StringFilter']
    special: Union[None, _str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']
    notes: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['RaceWhereInputRecursive2', List['RaceWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['RaceWhereInputRecursive2']
    OR: List['RaceWhereInputRecursive2']
    NOT: List['RaceWhereInputRecursive2']


class RaceWhereInputRecursive2(TypedDict, total=False):
    """Race arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    race: Union[_str, 'types.StringFilter']
    str: Union[None, _str, 'types.StringFilter']
    dex: Union[None, _str, 'types.StringFilter']
    con: Union[None, _str, 'types.StringFilter']
    int: Union[None, _str, 'types.StringFilter']
    wis: Union[None, _str, 'types.StringFilter']
    cha: Union[None, _str, 'types.StringFilter']
    special: Union[None, _str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']
    notes: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['RaceWhereInputRecursive3', List['RaceWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['RaceWhereInputRecursive3']
    OR: List['RaceWhereInputRecursive3']
    NOT: List['RaceWhereInputRecursive3']


class RaceWhereInputRecursive3(TypedDict, total=False):
    """Race arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    race: Union[_str, 'types.StringFilter']
    str: Union[None, _str, 'types.StringFilter']
    dex: Union[None, _str, 'types.StringFilter']
    con: Union[None, _str, 'types.StringFilter']
    int: Union[None, _str, 'types.StringFilter']
    wis: Union[None, _str, 'types.StringFilter']
    cha: Union[None, _str, 'types.StringFilter']
    special: Union[None, _str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']
    notes: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['RaceWhereInputRecursive4', List['RaceWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['RaceWhereInputRecursive4']
    OR: List['RaceWhereInputRecursive4']
    NOT: List['RaceWhereInputRecursive4']


class RaceWhereInputRecursive4(TypedDict, total=False):
    """Race arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    race: Union[_str, 'types.StringFilter']
    str: Union[None, _str, 'types.StringFilter']
    dex: Union[None, _str, 'types.StringFilter']
    con: Union[None, _str, 'types.StringFilter']
    int: Union[None, _str, 'types.StringFilter']
    wis: Union[None, _str, 'types.StringFilter']
    cha: Union[None, _str, 'types.StringFilter']
    special: Union[None, _str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']
    notes: Union[None, _str, 'types.StringFilter']



# aggregate Race types


    

class RaceScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Race arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    race: Union[_str, 'types.StringWithAggregatesFilter']
    str: Union[_str, 'types.StringWithAggregatesFilter']
    dex: Union[_str, 'types.StringWithAggregatesFilter']
    con: Union[_str, 'types.StringWithAggregatesFilter']
    int: Union[_str, 'types.StringWithAggregatesFilter']
    wis: Union[_str, 'types.StringWithAggregatesFilter']
    cha: Union[_str, 'types.StringWithAggregatesFilter']
    special: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RaceScalarWhereWithAggregatesInputRecursive1']
    OR: List['RaceScalarWhereWithAggregatesInputRecursive1']
    NOT: List['RaceScalarWhereWithAggregatesInputRecursive1']


class RaceScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Race arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    race: Union[_str, 'types.StringWithAggregatesFilter']
    str: Union[_str, 'types.StringWithAggregatesFilter']
    dex: Union[_str, 'types.StringWithAggregatesFilter']
    con: Union[_str, 'types.StringWithAggregatesFilter']
    int: Union[_str, 'types.StringWithAggregatesFilter']
    wis: Union[_str, 'types.StringWithAggregatesFilter']
    cha: Union[_str, 'types.StringWithAggregatesFilter']
    special: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RaceScalarWhereWithAggregatesInputRecursive2']
    OR: List['RaceScalarWhereWithAggregatesInputRecursive2']
    NOT: List['RaceScalarWhereWithAggregatesInputRecursive2']


class RaceScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Race arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    race: Union[_str, 'types.StringWithAggregatesFilter']
    str: Union[_str, 'types.StringWithAggregatesFilter']
    dex: Union[_str, 'types.StringWithAggregatesFilter']
    con: Union[_str, 'types.StringWithAggregatesFilter']
    int: Union[_str, 'types.StringWithAggregatesFilter']
    wis: Union[_str, 'types.StringWithAggregatesFilter']
    cha: Union[_str, 'types.StringWithAggregatesFilter']
    special: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RaceScalarWhereWithAggregatesInputRecursive3']
    OR: List['RaceScalarWhereWithAggregatesInputRecursive3']
    NOT: List['RaceScalarWhereWithAggregatesInputRecursive3']


class RaceScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Race arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    race: Union[_str, 'types.StringWithAggregatesFilter']
    str: Union[_str, 'types.StringWithAggregatesFilter']
    dex: Union[_str, 'types.StringWithAggregatesFilter']
    con: Union[_str, 'types.StringWithAggregatesFilter']
    int: Union[_str, 'types.StringWithAggregatesFilter']
    wis: Union[_str, 'types.StringWithAggregatesFilter']
    cha: Union[_str, 'types.StringWithAggregatesFilter']
    special: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RaceScalarWhereWithAggregatesInputRecursive4']
    OR: List['RaceScalarWhereWithAggregatesInputRecursive4']
    NOT: List['RaceScalarWhereWithAggregatesInputRecursive4']


class RaceScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Race arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    race: Union[_str, 'types.StringWithAggregatesFilter']
    str: Union[_str, 'types.StringWithAggregatesFilter']
    dex: Union[_str, 'types.StringWithAggregatesFilter']
    con: Union[_str, 'types.StringWithAggregatesFilter']
    int: Union[_str, 'types.StringWithAggregatesFilter']
    wis: Union[_str, 'types.StringWithAggregatesFilter']
    cha: Union[_str, 'types.StringWithAggregatesFilter']
    special: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']



class RaceGroupByOutput(TypedDict, total=False):
    id: _int
    race: _str
    str: _str
    dex: _str
    con: _str
    int: _str
    wis: _str
    cha: _str
    special: _str
    source: _str
    notes: _str
    _sum: 'RaceSumAggregateOutput'
    _avg: 'RaceAvgAggregateOutput'
    _min: 'RaceMinAggregateOutput'
    _max: 'RaceMaxAggregateOutput'
    _count: 'RaceCountAggregateOutput'


class RaceAvgAggregateOutput(TypedDict, total=False):
    """Race output for aggregating averages"""
    id: float


class RaceSumAggregateOutput(TypedDict, total=False):
    """Race output for aggregating sums"""
    id: _int


class RaceScalarAggregateOutput(TypedDict, total=False):
    """Race output including scalar fields"""
    id: _int
    race: _str
    str: _str
    dex: _str
    con: _str
    int: _str
    wis: _str
    cha: _str
    special: _str
    source: _str
    notes: _str


RaceMinAggregateOutput = RaceScalarAggregateOutput
RaceMaxAggregateOutput = RaceScalarAggregateOutput


class RaceMaxAggregateInput(TypedDict, total=False):
    """Race input for aggregating by max"""
    id: bool
    race: bool
    str: bool
    dex: bool
    con: bool
    int: bool
    wis: bool
    cha: bool
    special: bool
    source: bool
    notes: bool


class RaceMinAggregateInput(TypedDict, total=False):
    """Race input for aggregating by min"""
    id: bool
    race: bool
    str: bool
    dex: bool
    con: bool
    int: bool
    wis: bool
    cha: bool
    special: bool
    source: bool
    notes: bool


class RaceNumberAggregateInput(TypedDict, total=False):
    """Race input for aggregating numbers"""
    id: bool


RaceAvgAggregateInput = RaceNumberAggregateInput
RaceSumAggregateInput = RaceNumberAggregateInput


RaceCountAggregateInput = TypedDict(
    'RaceCountAggregateInput',
    {
        'id': bool,
        'race': bool,
        'str': bool,
        'dex': bool,
        'con': bool,
        'int': bool,
        'wis': bool,
        'cha': bool,
        'special': bool,
        'source': bool,
        'notes': bool,
        '_all': bool,
    },
    total=False,
)

RaceCountAggregateOutput = TypedDict(
    'RaceCountAggregateOutput',
    {
        'id': int,
        'race': int,
        'str': int,
        'dex': int,
        'con': int,
        'int': int,
        'wis': int,
        'cha': int,
        'special': int,
        'source': int,
        'notes': int,
        '_all': int,
    },
    total=False,
)


RaceKeys = Literal[
    'id',
    'race',
    'str',
    'dex',
    'con',
    'int',
    'wis',
    'cha',
    'special',
    'source',
    'notes',
]
RaceScalarFieldKeys = Literal[
    'id',
    'race',
    'str',
    'dex',
    'con',
    'int',
    'wis',
    'cha',
    'special',
    'source',
    'notes',
]
RaceScalarFieldKeysT = TypeVar('RaceScalarFieldKeysT', bound=RaceScalarFieldKeys)

RaceRelationalFieldKeys = _NoneType

# SESSION types

class SESSIONOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the SESSION create method"""
    id: _int


class SESSIONCreateInput(SESSIONOptionalCreateInput):
    """Required arguments to the SESSION create method"""
    sessionID: _int
    text: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SESSIONOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the SESSION create method, without relations"""
    id: _int


class SESSIONCreateWithoutRelationsInput(SESSIONOptionalCreateWithoutRelationsInput):
    """Required arguments to the SESSION create method, without relations"""
    sessionID: _int
    text: _str

class SESSIONConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SESSIONCreateWithoutRelationsInput'
    where: 'SESSIONWhereUniqueInput'

class SESSIONCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SESSIONCreateWithoutRelationsInput'
    connect: 'SESSIONWhereUniqueInput'
    connect_or_create: 'SESSIONConnectOrCreateWithoutRelationsInput'


class SESSIONCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SESSIONCreateWithoutRelationsInput', List['SESSIONCreateWithoutRelationsInput']]
    connect: Union['SESSIONWhereUniqueInput', List['SESSIONWhereUniqueInput']]
    connect_or_create: Union['SESSIONConnectOrCreateWithoutRelationsInput', List['SESSIONConnectOrCreateWithoutRelationsInput']]

_SESSIONWhereUnique_id_Input = TypedDict(
    '_SESSIONWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

SESSIONWhereUniqueInput = _SESSIONWhereUnique_id_Input


class SESSIONUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    sessionID: Union[AtomicIntInput, _int]
    text: _str


class SESSIONUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    sessionID: Union[AtomicIntInput, _int]
    text: _str


class SESSIONUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SESSIONCreateWithoutRelationsInput']
    connect: List['SESSIONWhereUniqueInput']
    connect_or_create: List['SESSIONConnectOrCreateWithoutRelationsInput']
    set: List['SESSIONWhereUniqueInput']
    disconnect: List['SESSIONWhereUniqueInput']
    delete: List['SESSIONWhereUniqueInput']

    # TODO
    # update: List['SESSIONUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SESSIONUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SESSIONScalarWhereInput']
    # upsert: List['SESSIONUpserteWithWhereUniqueWithoutRelationsInput']


class SESSIONUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SESSIONCreateWithoutRelationsInput'
    connect: 'SESSIONWhereUniqueInput'
    connect_or_create: 'SESSIONConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SESSIONUpdateInput'
    # upsert: 'SESSIONUpsertWithoutRelationsInput'


class SESSIONUpsertInput(TypedDict):
    create: 'SESSIONCreateInput'
    update: 'SESSIONUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_SESSION_id_OrderByInput = TypedDict(
    '_SESSION_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_SESSION_sessionID_OrderByInput = TypedDict(
    '_SESSION_sessionID_OrderByInput',
    {
        'sessionID': 'SortOrder',
    },
    total=True
)

_SESSION_text_OrderByInput = TypedDict(
    '_SESSION_text_OrderByInput',
    {
        'text': 'SortOrder',
    },
    total=True
)

_SESSION_RelevanceInner = TypedDict(
    '_SESSION_RelevanceInner',
    {
        'fields': 'List[SESSIONScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_SESSION_RelevanceOrderByInput = TypedDict(
    '_SESSION_RelevanceOrderByInput',
    {
        '_relevance': '_SESSION_RelevanceInner',
    },
    total=True
)

SESSIONOrderByInput = Union[
    '_SESSION_id_OrderByInput',
    '_SESSION_sessionID_OrderByInput',
    '_SESSION_text_OrderByInput',
    '_SESSION_RelevanceOrderByInput',
]



# recursive SESSION types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SESSIONRelationFilter = TypedDict(
    'SESSIONRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SESSIONListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SESSIONInclude(TypedDict, total=False):
    """SESSION relational arguments"""


    

class CHARACTERVECTORIncludeFromSESSION(TypedDict, total=False):
    """Relational arguments for SESSION"""


class CHARACTERVECTORIncludeFromSESSIONRecursive1(TypedDict, total=False):
    """Relational arguments for SESSION"""


class CHARACTERVECTORIncludeFromSESSIONRecursive2(TypedDict, total=False):
    """Relational arguments for SESSION"""


class CHARACTERVECTORIncludeFromSESSIONRecursive3(TypedDict, total=False):
    """Relational arguments for SESSION"""


class CHARACTERVECTORIncludeFromSESSIONRecursive4(TypedDict, total=False):
    """Relational arguments for SESSION"""

    

class CHARACTERVECTORArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class CHARACTERVECTORArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class CHARACTERVECTORArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class CHARACTERVECTORArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class CHARACTERVECTORArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    
    

class FindManyCHARACTERVECTORArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class FindManyCHARACTERVECTORArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class FindManyCHARACTERVECTORArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class FindManyCHARACTERVECTORArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class FindManyCHARACTERVECTORArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    
    

class ClassesIncludeFromSESSION(TypedDict, total=False):
    """Relational arguments for SESSION"""


class ClassesIncludeFromSESSIONRecursive1(TypedDict, total=False):
    """Relational arguments for SESSION"""


class ClassesIncludeFromSESSIONRecursive2(TypedDict, total=False):
    """Relational arguments for SESSION"""


class ClassesIncludeFromSESSIONRecursive3(TypedDict, total=False):
    """Relational arguments for SESSION"""


class ClassesIncludeFromSESSIONRecursive4(TypedDict, total=False):
    """Relational arguments for SESSION"""

    

class ClassesArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'ClassesIncludeFromClassesRecursive1'


class ClassesArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'ClassesIncludeFromClassesRecursive2'


class ClassesArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'ClassesIncludeFromClassesRecursive3'


class ClassesArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'ClassesIncludeFromClassesRecursive4'


class ClassesArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    
    

class FindManyClassesArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive1'


class FindManyClassesArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive2'


class FindManyClassesArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive3'


class FindManyClassesArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive4'


class FindManyClassesArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    
    

class GeneralEquipmentIncludeFromSESSION(TypedDict, total=False):
    """Relational arguments for SESSION"""


class GeneralEquipmentIncludeFromSESSIONRecursive1(TypedDict, total=False):
    """Relational arguments for SESSION"""


class GeneralEquipmentIncludeFromSESSIONRecursive2(TypedDict, total=False):
    """Relational arguments for SESSION"""


class GeneralEquipmentIncludeFromSESSIONRecursive3(TypedDict, total=False):
    """Relational arguments for SESSION"""


class GeneralEquipmentIncludeFromSESSIONRecursive4(TypedDict, total=False):
    """Relational arguments for SESSION"""

    

class GeneralEquipmentArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class GeneralEquipmentArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class GeneralEquipmentArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class GeneralEquipmentArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class GeneralEquipmentArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    
    

class FindManyGeneralEquipmentArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class FindManyGeneralEquipmentArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class FindManyGeneralEquipmentArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class FindManyGeneralEquipmentArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class FindManyGeneralEquipmentArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    
    

class ITEMSVECTORIncludeFromSESSION(TypedDict, total=False):
    """Relational arguments for SESSION"""


class ITEMSVECTORIncludeFromSESSIONRecursive1(TypedDict, total=False):
    """Relational arguments for SESSION"""


class ITEMSVECTORIncludeFromSESSIONRecursive2(TypedDict, total=False):
    """Relational arguments for SESSION"""


class ITEMSVECTORIncludeFromSESSIONRecursive3(TypedDict, total=False):
    """Relational arguments for SESSION"""


class ITEMSVECTORIncludeFromSESSIONRecursive4(TypedDict, total=False):
    """Relational arguments for SESSION"""

    

class ITEMSVECTORArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class ITEMSVECTORArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class ITEMSVECTORArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class ITEMSVECTORArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class ITEMSVECTORArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    
    

class FindManyITEMSVECTORArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class FindManyITEMSVECTORArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class FindManyITEMSVECTORArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class FindManyITEMSVECTORArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class FindManyITEMSVECTORArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    
    

class MONSTERVECTORIncludeFromSESSION(TypedDict, total=False):
    """Relational arguments for SESSION"""


class MONSTERVECTORIncludeFromSESSIONRecursive1(TypedDict, total=False):
    """Relational arguments for SESSION"""


class MONSTERVECTORIncludeFromSESSIONRecursive2(TypedDict, total=False):
    """Relational arguments for SESSION"""


class MONSTERVECTORIncludeFromSESSIONRecursive3(TypedDict, total=False):
    """Relational arguments for SESSION"""


class MONSTERVECTORIncludeFromSESSIONRecursive4(TypedDict, total=False):
    """Relational arguments for SESSION"""

    

class MONSTERVECTORArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class MONSTERVECTORArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class MONSTERVECTORArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class MONSTERVECTORArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class MONSTERVECTORArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    
    

class FindManyMONSTERVECTORArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class FindManyMONSTERVECTORArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class FindManyMONSTERVECTORArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class FindManyMONSTERVECTORArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class FindManyMONSTERVECTORArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    
    

class MagicItemIncludeFromSESSION(TypedDict, total=False):
    """Relational arguments for SESSION"""


class MagicItemIncludeFromSESSIONRecursive1(TypedDict, total=False):
    """Relational arguments for SESSION"""


class MagicItemIncludeFromSESSIONRecursive2(TypedDict, total=False):
    """Relational arguments for SESSION"""


class MagicItemIncludeFromSESSIONRecursive3(TypedDict, total=False):
    """Relational arguments for SESSION"""


class MagicItemIncludeFromSESSIONRecursive4(TypedDict, total=False):
    """Relational arguments for SESSION"""

    

class MagicItemArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class MagicItemArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class MagicItemArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class MagicItemArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class MagicItemArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    
    

class FindManyMagicItemArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class FindManyMagicItemArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class FindManyMagicItemArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class FindManyMagicItemArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class FindManyMagicItemArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    
    

class MonsterIncludeFromSESSION(TypedDict, total=False):
    """Relational arguments for SESSION"""


class MonsterIncludeFromSESSIONRecursive1(TypedDict, total=False):
    """Relational arguments for SESSION"""


class MonsterIncludeFromSESSIONRecursive2(TypedDict, total=False):
    """Relational arguments for SESSION"""


class MonsterIncludeFromSESSIONRecursive3(TypedDict, total=False):
    """Relational arguments for SESSION"""


class MonsterIncludeFromSESSIONRecursive4(TypedDict, total=False):
    """Relational arguments for SESSION"""

    

class MonsterArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'MonsterIncludeFromMonsterRecursive1'


class MonsterArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'MonsterIncludeFromMonsterRecursive2'


class MonsterArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'MonsterIncludeFromMonsterRecursive3'


class MonsterArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'MonsterIncludeFromMonsterRecursive4'


class MonsterArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    
    

class FindManyMonsterArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive1'


class FindManyMonsterArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive2'


class FindManyMonsterArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive3'


class FindManyMonsterArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive4'


class FindManyMonsterArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    
    

class RaceIncludeFromSESSION(TypedDict, total=False):
    """Relational arguments for SESSION"""


class RaceIncludeFromSESSIONRecursive1(TypedDict, total=False):
    """Relational arguments for SESSION"""


class RaceIncludeFromSESSIONRecursive2(TypedDict, total=False):
    """Relational arguments for SESSION"""


class RaceIncludeFromSESSIONRecursive3(TypedDict, total=False):
    """Relational arguments for SESSION"""


class RaceIncludeFromSESSIONRecursive4(TypedDict, total=False):
    """Relational arguments for SESSION"""

    

class RaceArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'RaceIncludeFromRaceRecursive1'


class RaceArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'RaceIncludeFromRaceRecursive2'


class RaceArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'RaceIncludeFromRaceRecursive3'


class RaceArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'RaceIncludeFromRaceRecursive4'


class RaceArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    
    

class FindManyRaceArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive1'


class FindManyRaceArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive2'


class FindManyRaceArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive3'


class FindManyRaceArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive4'


class FindManyRaceArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    
    

class SESSIONIncludeFromSESSION(TypedDict, total=False):
    """Relational arguments for SESSION"""


class SESSIONIncludeFromSESSIONRecursive1(TypedDict, total=False):
    """Relational arguments for SESSION"""


class SESSIONIncludeFromSESSIONRecursive2(TypedDict, total=False):
    """Relational arguments for SESSION"""


class SESSIONIncludeFromSESSIONRecursive3(TypedDict, total=False):
    """Relational arguments for SESSION"""


class SESSIONIncludeFromSESSIONRecursive4(TypedDict, total=False):
    """Relational arguments for SESSION"""

    

class SESSIONArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class SESSIONArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class SESSIONArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class SESSIONArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class SESSIONArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    
    

class FindManySESSIONArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class FindManySESSIONArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class FindManySESSIONArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class FindManySESSIONArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class FindManySESSIONArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    
    

class SPELLSVECTORIncludeFromSESSION(TypedDict, total=False):
    """Relational arguments for SESSION"""


class SPELLSVECTORIncludeFromSESSIONRecursive1(TypedDict, total=False):
    """Relational arguments for SESSION"""


class SPELLSVECTORIncludeFromSESSIONRecursive2(TypedDict, total=False):
    """Relational arguments for SESSION"""


class SPELLSVECTORIncludeFromSESSIONRecursive3(TypedDict, total=False):
    """Relational arguments for SESSION"""


class SPELLSVECTORIncludeFromSESSIONRecursive4(TypedDict, total=False):
    """Relational arguments for SESSION"""

    

class SPELLSVECTORArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class SPELLSVECTORArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class SPELLSVECTORArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class SPELLSVECTORArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class SPELLSVECTORArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    
    

class FindManySPELLSVECTORArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class FindManySPELLSVECTORArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class FindManySPELLSVECTORArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class FindManySPELLSVECTORArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class FindManySPELLSVECTORArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    
    

class SpellIncludeFromSESSION(TypedDict, total=False):
    """Relational arguments for SESSION"""


class SpellIncludeFromSESSIONRecursive1(TypedDict, total=False):
    """Relational arguments for SESSION"""


class SpellIncludeFromSESSIONRecursive2(TypedDict, total=False):
    """Relational arguments for SESSION"""


class SpellIncludeFromSESSIONRecursive3(TypedDict, total=False):
    """Relational arguments for SESSION"""


class SpellIncludeFromSESSIONRecursive4(TypedDict, total=False):
    """Relational arguments for SESSION"""

    

class SpellArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'SpellIncludeFromSpellRecursive1'


class SpellArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'SpellIncludeFromSpellRecursive2'


class SpellArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'SpellIncludeFromSpellRecursive3'


class SpellArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'SpellIncludeFromSpellRecursive4'


class SpellArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    
    

class FindManySpellArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive1'


class FindManySpellArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive2'


class FindManySpellArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive3'


class FindManySpellArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive4'


class FindManySpellArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    
    

class USERDATAIncludeFromSESSION(TypedDict, total=False):
    """Relational arguments for SESSION"""


class USERDATAIncludeFromSESSIONRecursive1(TypedDict, total=False):
    """Relational arguments for SESSION"""


class USERDATAIncludeFromSESSIONRecursive2(TypedDict, total=False):
    """Relational arguments for SESSION"""


class USERDATAIncludeFromSESSIONRecursive3(TypedDict, total=False):
    """Relational arguments for SESSION"""


class USERDATAIncludeFromSESSIONRecursive4(TypedDict, total=False):
    """Relational arguments for SESSION"""

    

class USERDATAArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class USERDATAArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class USERDATAArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class USERDATAArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class USERDATAArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    
    

class FindManyUSERDATAArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class FindManyUSERDATAArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class FindManyUSERDATAArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class FindManyUSERDATAArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class FindManyUSERDATAArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    
    

class STORYVECTORIncludeFromSESSION(TypedDict, total=False):
    """Relational arguments for SESSION"""


class STORYVECTORIncludeFromSESSIONRecursive1(TypedDict, total=False):
    """Relational arguments for SESSION"""


class STORYVECTORIncludeFromSESSIONRecursive2(TypedDict, total=False):
    """Relational arguments for SESSION"""


class STORYVECTORIncludeFromSESSIONRecursive3(TypedDict, total=False):
    """Relational arguments for SESSION"""


class STORYVECTORIncludeFromSESSIONRecursive4(TypedDict, total=False):
    """Relational arguments for SESSION"""

    

class STORYVECTORArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class STORYVECTORArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class STORYVECTORArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class STORYVECTORArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class STORYVECTORArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    
    

class FindManySTORYVECTORArgsFromSESSION(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class FindManySTORYVECTORArgsFromSESSIONRecursive1(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class FindManySTORYVECTORArgsFromSESSIONRecursive2(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class FindManySTORYVECTORArgsFromSESSIONRecursive3(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class FindManySTORYVECTORArgsFromSESSIONRecursive4(TypedDict, total=False):
    """Arguments for SESSION"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    


FindManySESSIONArgs = FindManySESSIONArgsFromSESSION
FindFirstSESSIONArgs = FindManySESSIONArgsFromSESSION


    

class SESSIONWhereInput(TypedDict, total=False):
    """SESSION arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    sessionID: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SESSIONWhereInputRecursive1', List['SESSIONWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SESSIONWhereInputRecursive1']
    OR: List['SESSIONWhereInputRecursive1']
    NOT: List['SESSIONWhereInputRecursive1']


class SESSIONWhereInputRecursive1(TypedDict, total=False):
    """SESSION arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    sessionID: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SESSIONWhereInputRecursive2', List['SESSIONWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SESSIONWhereInputRecursive2']
    OR: List['SESSIONWhereInputRecursive2']
    NOT: List['SESSIONWhereInputRecursive2']


class SESSIONWhereInputRecursive2(TypedDict, total=False):
    """SESSION arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    sessionID: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SESSIONWhereInputRecursive3', List['SESSIONWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SESSIONWhereInputRecursive3']
    OR: List['SESSIONWhereInputRecursive3']
    NOT: List['SESSIONWhereInputRecursive3']


class SESSIONWhereInputRecursive3(TypedDict, total=False):
    """SESSION arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    sessionID: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SESSIONWhereInputRecursive4', List['SESSIONWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SESSIONWhereInputRecursive4']
    OR: List['SESSIONWhereInputRecursive4']
    NOT: List['SESSIONWhereInputRecursive4']


class SESSIONWhereInputRecursive4(TypedDict, total=False):
    """SESSION arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    sessionID: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']



# aggregate SESSION types


    

class SESSIONScalarWhereWithAggregatesInput(TypedDict, total=False):
    """SESSION arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    sessionID: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SESSIONScalarWhereWithAggregatesInputRecursive1']
    OR: List['SESSIONScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SESSIONScalarWhereWithAggregatesInputRecursive1']


class SESSIONScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """SESSION arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    sessionID: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SESSIONScalarWhereWithAggregatesInputRecursive2']
    OR: List['SESSIONScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SESSIONScalarWhereWithAggregatesInputRecursive2']


class SESSIONScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """SESSION arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    sessionID: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SESSIONScalarWhereWithAggregatesInputRecursive3']
    OR: List['SESSIONScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SESSIONScalarWhereWithAggregatesInputRecursive3']


class SESSIONScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """SESSION arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    sessionID: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SESSIONScalarWhereWithAggregatesInputRecursive4']
    OR: List['SESSIONScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SESSIONScalarWhereWithAggregatesInputRecursive4']


class SESSIONScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """SESSION arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    sessionID: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']



class SESSIONGroupByOutput(TypedDict, total=False):
    id: _int
    sessionID: _int
    text: _str
    _sum: 'SESSIONSumAggregateOutput'
    _avg: 'SESSIONAvgAggregateOutput'
    _min: 'SESSIONMinAggregateOutput'
    _max: 'SESSIONMaxAggregateOutput'
    _count: 'SESSIONCountAggregateOutput'


class SESSIONAvgAggregateOutput(TypedDict, total=False):
    """SESSION output for aggregating averages"""
    id: float
    sessionID: float


class SESSIONSumAggregateOutput(TypedDict, total=False):
    """SESSION output for aggregating sums"""
    id: _int
    sessionID: _int


class SESSIONScalarAggregateOutput(TypedDict, total=False):
    """SESSION output including scalar fields"""
    id: _int
    sessionID: _int
    text: _str


SESSIONMinAggregateOutput = SESSIONScalarAggregateOutput
SESSIONMaxAggregateOutput = SESSIONScalarAggregateOutput


class SESSIONMaxAggregateInput(TypedDict, total=False):
    """SESSION input for aggregating by max"""
    id: bool
    sessionID: bool
    text: bool


class SESSIONMinAggregateInput(TypedDict, total=False):
    """SESSION input for aggregating by min"""
    id: bool
    sessionID: bool
    text: bool


class SESSIONNumberAggregateInput(TypedDict, total=False):
    """SESSION input for aggregating numbers"""
    id: bool
    sessionID: bool


SESSIONAvgAggregateInput = SESSIONNumberAggregateInput
SESSIONSumAggregateInput = SESSIONNumberAggregateInput


SESSIONCountAggregateInput = TypedDict(
    'SESSIONCountAggregateInput',
    {
        'id': bool,
        'sessionID': bool,
        'text': bool,
        '_all': bool,
    },
    total=False,
)

SESSIONCountAggregateOutput = TypedDict(
    'SESSIONCountAggregateOutput',
    {
        'id': int,
        'sessionID': int,
        'text': int,
        '_all': int,
    },
    total=False,
)


SESSIONKeys = Literal[
    'id',
    'sessionID',
    'text',
]
SESSIONScalarFieldKeys = Literal[
    'id',
    'sessionID',
    'text',
]
SESSIONScalarFieldKeysT = TypeVar('SESSIONScalarFieldKeysT', bound=SESSIONScalarFieldKeys)

SESSIONRelationalFieldKeys = _NoneType

# SPELLSVECTOR types

class SPELLSVECTOROptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the SPELLSVECTOR create method"""
    id: _int


class SPELLSVECTORCreateInput(SPELLSVECTOROptionalCreateInput):
    """Required arguments to the SPELLSVECTOR create method"""
    text: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SPELLSVECTOROptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the SPELLSVECTOR create method, without relations"""
    id: _int


class SPELLSVECTORCreateWithoutRelationsInput(SPELLSVECTOROptionalCreateWithoutRelationsInput):
    """Required arguments to the SPELLSVECTOR create method, without relations"""
    text: _str

class SPELLSVECTORConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SPELLSVECTORCreateWithoutRelationsInput'
    where: 'SPELLSVECTORWhereUniqueInput'

class SPELLSVECTORCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SPELLSVECTORCreateWithoutRelationsInput'
    connect: 'SPELLSVECTORWhereUniqueInput'
    connect_or_create: 'SPELLSVECTORConnectOrCreateWithoutRelationsInput'


class SPELLSVECTORCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SPELLSVECTORCreateWithoutRelationsInput', List['SPELLSVECTORCreateWithoutRelationsInput']]
    connect: Union['SPELLSVECTORWhereUniqueInput', List['SPELLSVECTORWhereUniqueInput']]
    connect_or_create: Union['SPELLSVECTORConnectOrCreateWithoutRelationsInput', List['SPELLSVECTORConnectOrCreateWithoutRelationsInput']]

_SPELLSVECTORWhereUnique_id_Input = TypedDict(
    '_SPELLSVECTORWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

SPELLSVECTORWhereUniqueInput = _SPELLSVECTORWhereUnique_id_Input


class SPELLSVECTORUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    text: _str


class SPELLSVECTORUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    text: _str


class SPELLSVECTORUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SPELLSVECTORCreateWithoutRelationsInput']
    connect: List['SPELLSVECTORWhereUniqueInput']
    connect_or_create: List['SPELLSVECTORConnectOrCreateWithoutRelationsInput']
    set: List['SPELLSVECTORWhereUniqueInput']
    disconnect: List['SPELLSVECTORWhereUniqueInput']
    delete: List['SPELLSVECTORWhereUniqueInput']

    # TODO
    # update: List['SPELLSVECTORUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SPELLSVECTORUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SPELLSVECTORScalarWhereInput']
    # upsert: List['SPELLSVECTORUpserteWithWhereUniqueWithoutRelationsInput']


class SPELLSVECTORUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SPELLSVECTORCreateWithoutRelationsInput'
    connect: 'SPELLSVECTORWhereUniqueInput'
    connect_or_create: 'SPELLSVECTORConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SPELLSVECTORUpdateInput'
    # upsert: 'SPELLSVECTORUpsertWithoutRelationsInput'


class SPELLSVECTORUpsertInput(TypedDict):
    create: 'SPELLSVECTORCreateInput'
    update: 'SPELLSVECTORUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_SPELLSVECTOR_id_OrderByInput = TypedDict(
    '_SPELLSVECTOR_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_SPELLSVECTOR_text_OrderByInput = TypedDict(
    '_SPELLSVECTOR_text_OrderByInput',
    {
        'text': 'SortOrder',
    },
    total=True
)

_SPELLSVECTOR_RelevanceInner = TypedDict(
    '_SPELLSVECTOR_RelevanceInner',
    {
        'fields': 'List[SPELLSVECTORScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_SPELLSVECTOR_RelevanceOrderByInput = TypedDict(
    '_SPELLSVECTOR_RelevanceOrderByInput',
    {
        '_relevance': '_SPELLSVECTOR_RelevanceInner',
    },
    total=True
)

SPELLSVECTOROrderByInput = Union[
    '_SPELLSVECTOR_id_OrderByInput',
    '_SPELLSVECTOR_text_OrderByInput',
    '_SPELLSVECTOR_RelevanceOrderByInput',
]



# recursive SPELLSVECTOR types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SPELLSVECTORRelationFilter = TypedDict(
    'SPELLSVECTORRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SPELLSVECTORListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SPELLSVECTORInclude(TypedDict, total=False):
    """SPELLSVECTOR relational arguments"""


    

class CHARACTERVECTORIncludeFromSPELLSVECTOR(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class CHARACTERVECTORIncludeFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class CHARACTERVECTORIncludeFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class CHARACTERVECTORIncludeFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class CHARACTERVECTORIncludeFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""

    

class CHARACTERVECTORArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class CHARACTERVECTORArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class CHARACTERVECTORArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class CHARACTERVECTORArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class CHARACTERVECTORArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    
    

class FindManyCHARACTERVECTORArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class FindManyCHARACTERVECTORArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class FindManyCHARACTERVECTORArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class FindManyCHARACTERVECTORArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class FindManyCHARACTERVECTORArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    
    

class ClassesIncludeFromSPELLSVECTOR(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class ClassesIncludeFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class ClassesIncludeFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class ClassesIncludeFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class ClassesIncludeFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""

    

class ClassesArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive1'


class ClassesArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive2'


class ClassesArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive3'


class ClassesArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive4'


class ClassesArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    
    

class FindManyClassesArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive1'


class FindManyClassesArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive2'


class FindManyClassesArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive3'


class FindManyClassesArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive4'


class FindManyClassesArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    
    

class GeneralEquipmentIncludeFromSPELLSVECTOR(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class GeneralEquipmentIncludeFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class GeneralEquipmentIncludeFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class GeneralEquipmentIncludeFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class GeneralEquipmentIncludeFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""

    

class GeneralEquipmentArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class GeneralEquipmentArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class GeneralEquipmentArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class GeneralEquipmentArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class GeneralEquipmentArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    
    

class FindManyGeneralEquipmentArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class FindManyGeneralEquipmentArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class FindManyGeneralEquipmentArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class FindManyGeneralEquipmentArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class FindManyGeneralEquipmentArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    
    

class ITEMSVECTORIncludeFromSPELLSVECTOR(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class ITEMSVECTORIncludeFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class ITEMSVECTORIncludeFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class ITEMSVECTORIncludeFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class ITEMSVECTORIncludeFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""

    

class ITEMSVECTORArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class ITEMSVECTORArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class ITEMSVECTORArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class ITEMSVECTORArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class ITEMSVECTORArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    
    

class FindManyITEMSVECTORArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class FindManyITEMSVECTORArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class FindManyITEMSVECTORArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class FindManyITEMSVECTORArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class FindManyITEMSVECTORArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    
    

class MONSTERVECTORIncludeFromSPELLSVECTOR(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class MONSTERVECTORIncludeFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class MONSTERVECTORIncludeFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class MONSTERVECTORIncludeFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class MONSTERVECTORIncludeFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""

    

class MONSTERVECTORArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class MONSTERVECTORArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class MONSTERVECTORArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class MONSTERVECTORArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class MONSTERVECTORArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    
    

class FindManyMONSTERVECTORArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class FindManyMONSTERVECTORArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class FindManyMONSTERVECTORArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class FindManyMONSTERVECTORArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class FindManyMONSTERVECTORArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    
    

class MagicItemIncludeFromSPELLSVECTOR(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class MagicItemIncludeFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class MagicItemIncludeFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class MagicItemIncludeFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class MagicItemIncludeFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""

    

class MagicItemArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class MagicItemArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class MagicItemArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class MagicItemArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class MagicItemArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    
    

class FindManyMagicItemArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class FindManyMagicItemArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class FindManyMagicItemArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class FindManyMagicItemArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class FindManyMagicItemArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    
    

class MonsterIncludeFromSPELLSVECTOR(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class MonsterIncludeFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class MonsterIncludeFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class MonsterIncludeFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class MonsterIncludeFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""

    

class MonsterArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive1'


class MonsterArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive2'


class MonsterArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive3'


class MonsterArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive4'


class MonsterArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    
    

class FindManyMonsterArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive1'


class FindManyMonsterArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive2'


class FindManyMonsterArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive3'


class FindManyMonsterArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive4'


class FindManyMonsterArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    
    

class RaceIncludeFromSPELLSVECTOR(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class RaceIncludeFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class RaceIncludeFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class RaceIncludeFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class RaceIncludeFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""

    

class RaceArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'RaceIncludeFromRaceRecursive1'


class RaceArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'RaceIncludeFromRaceRecursive2'


class RaceArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'RaceIncludeFromRaceRecursive3'


class RaceArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'RaceIncludeFromRaceRecursive4'


class RaceArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    
    

class FindManyRaceArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive1'


class FindManyRaceArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive2'


class FindManyRaceArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive3'


class FindManyRaceArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive4'


class FindManyRaceArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    
    

class SESSIONIncludeFromSPELLSVECTOR(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class SESSIONIncludeFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class SESSIONIncludeFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class SESSIONIncludeFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class SESSIONIncludeFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""

    

class SESSIONArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class SESSIONArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class SESSIONArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class SESSIONArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class SESSIONArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    
    

class FindManySESSIONArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class FindManySESSIONArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class FindManySESSIONArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class FindManySESSIONArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class FindManySESSIONArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    
    

class SPELLSVECTORIncludeFromSPELLSVECTOR(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class SPELLSVECTORIncludeFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class SPELLSVECTORIncludeFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class SPELLSVECTORIncludeFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class SPELLSVECTORIncludeFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""

    

class SPELLSVECTORArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class SPELLSVECTORArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class SPELLSVECTORArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class SPELLSVECTORArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class SPELLSVECTORArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    
    

class FindManySPELLSVECTORArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class FindManySPELLSVECTORArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class FindManySPELLSVECTORArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class FindManySPELLSVECTORArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class FindManySPELLSVECTORArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    
    

class SpellIncludeFromSPELLSVECTOR(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class SpellIncludeFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class SpellIncludeFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class SpellIncludeFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class SpellIncludeFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""

    

class SpellArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'SpellIncludeFromSpellRecursive1'


class SpellArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'SpellIncludeFromSpellRecursive2'


class SpellArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'SpellIncludeFromSpellRecursive3'


class SpellArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'SpellIncludeFromSpellRecursive4'


class SpellArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    
    

class FindManySpellArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive1'


class FindManySpellArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive2'


class FindManySpellArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive3'


class FindManySpellArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive4'


class FindManySpellArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    
    

class USERDATAIncludeFromSPELLSVECTOR(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class USERDATAIncludeFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class USERDATAIncludeFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class USERDATAIncludeFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class USERDATAIncludeFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""

    

class USERDATAArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class USERDATAArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class USERDATAArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class USERDATAArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class USERDATAArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    
    

class FindManyUSERDATAArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class FindManyUSERDATAArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class FindManyUSERDATAArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class FindManyUSERDATAArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class FindManyUSERDATAArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    
    

class STORYVECTORIncludeFromSPELLSVECTOR(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class STORYVECTORIncludeFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class STORYVECTORIncludeFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class STORYVECTORIncludeFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""


class STORYVECTORIncludeFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for SPELLSVECTOR"""

    

class STORYVECTORArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class STORYVECTORArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class STORYVECTORArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class STORYVECTORArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class STORYVECTORArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    
    

class FindManySTORYVECTORArgsFromSPELLSVECTOR(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class FindManySTORYVECTORArgsFromSPELLSVECTORRecursive1(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class FindManySTORYVECTORArgsFromSPELLSVECTORRecursive2(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class FindManySTORYVECTORArgsFromSPELLSVECTORRecursive3(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class FindManySTORYVECTORArgsFromSPELLSVECTORRecursive4(TypedDict, total=False):
    """Arguments for SPELLSVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    


FindManySPELLSVECTORArgs = FindManySPELLSVECTORArgsFromSPELLSVECTOR
FindFirstSPELLSVECTORArgs = FindManySPELLSVECTORArgsFromSPELLSVECTOR


    

class SPELLSVECTORWhereInput(TypedDict, total=False):
    """SPELLSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SPELLSVECTORWhereInputRecursive1', List['SPELLSVECTORWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SPELLSVECTORWhereInputRecursive1']
    OR: List['SPELLSVECTORWhereInputRecursive1']
    NOT: List['SPELLSVECTORWhereInputRecursive1']


class SPELLSVECTORWhereInputRecursive1(TypedDict, total=False):
    """SPELLSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SPELLSVECTORWhereInputRecursive2', List['SPELLSVECTORWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SPELLSVECTORWhereInputRecursive2']
    OR: List['SPELLSVECTORWhereInputRecursive2']
    NOT: List['SPELLSVECTORWhereInputRecursive2']


class SPELLSVECTORWhereInputRecursive2(TypedDict, total=False):
    """SPELLSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SPELLSVECTORWhereInputRecursive3', List['SPELLSVECTORWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SPELLSVECTORWhereInputRecursive3']
    OR: List['SPELLSVECTORWhereInputRecursive3']
    NOT: List['SPELLSVECTORWhereInputRecursive3']


class SPELLSVECTORWhereInputRecursive3(TypedDict, total=False):
    """SPELLSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SPELLSVECTORWhereInputRecursive4', List['SPELLSVECTORWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SPELLSVECTORWhereInputRecursive4']
    OR: List['SPELLSVECTORWhereInputRecursive4']
    NOT: List['SPELLSVECTORWhereInputRecursive4']


class SPELLSVECTORWhereInputRecursive4(TypedDict, total=False):
    """SPELLSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']



# aggregate SPELLSVECTOR types


    

class SPELLSVECTORScalarWhereWithAggregatesInput(TypedDict, total=False):
    """SPELLSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SPELLSVECTORScalarWhereWithAggregatesInputRecursive1']
    OR: List['SPELLSVECTORScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SPELLSVECTORScalarWhereWithAggregatesInputRecursive1']


class SPELLSVECTORScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """SPELLSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SPELLSVECTORScalarWhereWithAggregatesInputRecursive2']
    OR: List['SPELLSVECTORScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SPELLSVECTORScalarWhereWithAggregatesInputRecursive2']


class SPELLSVECTORScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """SPELLSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SPELLSVECTORScalarWhereWithAggregatesInputRecursive3']
    OR: List['SPELLSVECTORScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SPELLSVECTORScalarWhereWithAggregatesInputRecursive3']


class SPELLSVECTORScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """SPELLSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SPELLSVECTORScalarWhereWithAggregatesInputRecursive4']
    OR: List['SPELLSVECTORScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SPELLSVECTORScalarWhereWithAggregatesInputRecursive4']


class SPELLSVECTORScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """SPELLSVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']



class SPELLSVECTORGroupByOutput(TypedDict, total=False):
    id: _int
    text: _str
    _sum: 'SPELLSVECTORSumAggregateOutput'
    _avg: 'SPELLSVECTORAvgAggregateOutput'
    _min: 'SPELLSVECTORMinAggregateOutput'
    _max: 'SPELLSVECTORMaxAggregateOutput'
    _count: 'SPELLSVECTORCountAggregateOutput'


class SPELLSVECTORAvgAggregateOutput(TypedDict, total=False):
    """SPELLSVECTOR output for aggregating averages"""
    id: float


class SPELLSVECTORSumAggregateOutput(TypedDict, total=False):
    """SPELLSVECTOR output for aggregating sums"""
    id: _int


class SPELLSVECTORScalarAggregateOutput(TypedDict, total=False):
    """SPELLSVECTOR output including scalar fields"""
    id: _int
    text: _str


SPELLSVECTORMinAggregateOutput = SPELLSVECTORScalarAggregateOutput
SPELLSVECTORMaxAggregateOutput = SPELLSVECTORScalarAggregateOutput


class SPELLSVECTORMaxAggregateInput(TypedDict, total=False):
    """SPELLSVECTOR input for aggregating by max"""
    id: bool
    text: bool


class SPELLSVECTORMinAggregateInput(TypedDict, total=False):
    """SPELLSVECTOR input for aggregating by min"""
    id: bool
    text: bool


class SPELLSVECTORNumberAggregateInput(TypedDict, total=False):
    """SPELLSVECTOR input for aggregating numbers"""
    id: bool


SPELLSVECTORAvgAggregateInput = SPELLSVECTORNumberAggregateInput
SPELLSVECTORSumAggregateInput = SPELLSVECTORNumberAggregateInput


SPELLSVECTORCountAggregateInput = TypedDict(
    'SPELLSVECTORCountAggregateInput',
    {
        'id': bool,
        'text': bool,
        '_all': bool,
    },
    total=False,
)

SPELLSVECTORCountAggregateOutput = TypedDict(
    'SPELLSVECTORCountAggregateOutput',
    {
        'id': int,
        'text': int,
        '_all': int,
    },
    total=False,
)


SPELLSVECTORKeys = Literal[
    'id',
    'text',
]
SPELLSVECTORScalarFieldKeys = Literal[
    'id',
    'text',
]
SPELLSVECTORScalarFieldKeysT = TypeVar('SPELLSVECTORScalarFieldKeysT', bound=SPELLSVECTORScalarFieldKeys)

SPELLSVECTORRelationalFieldKeys = _NoneType

# Spell types

class SpellOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Spell create method"""
    id: _int
    area: Optional[_str]
    attack: Optional[_str]
    save: Optional[_str]
    ritual: Optional[_str]
    concentration: Optional[_str]
    verbal: Optional[_str]
    somatic: Optional[_str]
    material: Optional[_str]
    material_: Optional[_str]


class SpellCreateInput(SpellOptionalCreateInput):
    """Required arguments to the Spell create method"""
    name: _str
    level: _str
    school: _str
    castingTime: _str
    duration: _str
    range: _str
    damageEffect: _str
    source: _str
    details: _str
    link: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SpellOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Spell create method, without relations"""
    id: _int
    area: Optional[_str]
    attack: Optional[_str]
    save: Optional[_str]
    ritual: Optional[_str]
    concentration: Optional[_str]
    verbal: Optional[_str]
    somatic: Optional[_str]
    material: Optional[_str]
    material_: Optional[_str]


class SpellCreateWithoutRelationsInput(SpellOptionalCreateWithoutRelationsInput):
    """Required arguments to the Spell create method, without relations"""
    name: _str
    level: _str
    school: _str
    castingTime: _str
    duration: _str
    range: _str
    damageEffect: _str
    source: _str
    details: _str
    link: _str

class SpellConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SpellCreateWithoutRelationsInput'
    where: 'SpellWhereUniqueInput'

class SpellCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SpellCreateWithoutRelationsInput'
    connect: 'SpellWhereUniqueInput'
    connect_or_create: 'SpellConnectOrCreateWithoutRelationsInput'


class SpellCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SpellCreateWithoutRelationsInput', List['SpellCreateWithoutRelationsInput']]
    connect: Union['SpellWhereUniqueInput', List['SpellWhereUniqueInput']]
    connect_or_create: Union['SpellConnectOrCreateWithoutRelationsInput', List['SpellConnectOrCreateWithoutRelationsInput']]

_SpellWhereUnique_id_Input = TypedDict(
    '_SpellWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

SpellWhereUniqueInput = _SpellWhereUnique_id_Input


class SpellUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    level: _str
    school: _str
    castingTime: _str
    duration: _str
    range: _str
    area: Optional[_str]
    attack: Optional[_str]
    save: Optional[_str]
    damageEffect: _str
    ritual: Optional[_str]
    concentration: Optional[_str]
    verbal: Optional[_str]
    somatic: Optional[_str]
    material: Optional[_str]
    material_: Optional[_str]
    source: _str
    details: _str
    link: _str


class SpellUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    level: _str
    school: _str
    castingTime: _str
    duration: _str
    range: _str
    area: Optional[_str]
    attack: Optional[_str]
    save: Optional[_str]
    damageEffect: _str
    ritual: Optional[_str]
    concentration: Optional[_str]
    verbal: Optional[_str]
    somatic: Optional[_str]
    material: Optional[_str]
    material_: Optional[_str]
    source: _str
    details: _str
    link: _str


class SpellUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SpellCreateWithoutRelationsInput']
    connect: List['SpellWhereUniqueInput']
    connect_or_create: List['SpellConnectOrCreateWithoutRelationsInput']
    set: List['SpellWhereUniqueInput']
    disconnect: List['SpellWhereUniqueInput']
    delete: List['SpellWhereUniqueInput']

    # TODO
    # update: List['SpellUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SpellUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SpellScalarWhereInput']
    # upsert: List['SpellUpserteWithWhereUniqueWithoutRelationsInput']


class SpellUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SpellCreateWithoutRelationsInput'
    connect: 'SpellWhereUniqueInput'
    connect_or_create: 'SpellConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SpellUpdateInput'
    # upsert: 'SpellUpsertWithoutRelationsInput'


class SpellUpsertInput(TypedDict):
    create: 'SpellCreateInput'
    update: 'SpellUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Spell_id_OrderByInput = TypedDict(
    '_Spell_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Spell_name_OrderByInput = TypedDict(
    '_Spell_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Spell_level_OrderByInput = TypedDict(
    '_Spell_level_OrderByInput',
    {
        'level': 'SortOrder',
    },
    total=True
)

_Spell_school_OrderByInput = TypedDict(
    '_Spell_school_OrderByInput',
    {
        'school': 'SortOrder',
    },
    total=True
)

_Spell_castingTime_OrderByInput = TypedDict(
    '_Spell_castingTime_OrderByInput',
    {
        'castingTime': 'SortOrder',
    },
    total=True
)

_Spell_duration_OrderByInput = TypedDict(
    '_Spell_duration_OrderByInput',
    {
        'duration': 'SortOrder',
    },
    total=True
)

_Spell_range_OrderByInput = TypedDict(
    '_Spell_range_OrderByInput',
    {
        'range': 'SortOrder',
    },
    total=True
)

_Spell_area_OrderByInput = TypedDict(
    '_Spell_area_OrderByInput',
    {
        'area': 'SortOrder',
    },
    total=True
)

_Spell_attack_OrderByInput = TypedDict(
    '_Spell_attack_OrderByInput',
    {
        'attack': 'SortOrder',
    },
    total=True
)

_Spell_save_OrderByInput = TypedDict(
    '_Spell_save_OrderByInput',
    {
        'save': 'SortOrder',
    },
    total=True
)

_Spell_damageEffect_OrderByInput = TypedDict(
    '_Spell_damageEffect_OrderByInput',
    {
        'damageEffect': 'SortOrder',
    },
    total=True
)

_Spell_ritual_OrderByInput = TypedDict(
    '_Spell_ritual_OrderByInput',
    {
        'ritual': 'SortOrder',
    },
    total=True
)

_Spell_concentration_OrderByInput = TypedDict(
    '_Spell_concentration_OrderByInput',
    {
        'concentration': 'SortOrder',
    },
    total=True
)

_Spell_verbal_OrderByInput = TypedDict(
    '_Spell_verbal_OrderByInput',
    {
        'verbal': 'SortOrder',
    },
    total=True
)

_Spell_somatic_OrderByInput = TypedDict(
    '_Spell_somatic_OrderByInput',
    {
        'somatic': 'SortOrder',
    },
    total=True
)

_Spell_material_OrderByInput = TypedDict(
    '_Spell_material_OrderByInput',
    {
        'material': 'SortOrder',
    },
    total=True
)

_Spell_material__OrderByInput = TypedDict(
    '_Spell_material__OrderByInput',
    {
        'material_': 'SortOrder',
    },
    total=True
)

_Spell_source_OrderByInput = TypedDict(
    '_Spell_source_OrderByInput',
    {
        'source': 'SortOrder',
    },
    total=True
)

_Spell_details_OrderByInput = TypedDict(
    '_Spell_details_OrderByInput',
    {
        'details': 'SortOrder',
    },
    total=True
)

_Spell_link_OrderByInput = TypedDict(
    '_Spell_link_OrderByInput',
    {
        'link': 'SortOrder',
    },
    total=True
)

_Spell_RelevanceInner = TypedDict(
    '_Spell_RelevanceInner',
    {
        'fields': 'List[SpellScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Spell_RelevanceOrderByInput = TypedDict(
    '_Spell_RelevanceOrderByInput',
    {
        '_relevance': '_Spell_RelevanceInner',
    },
    total=True
)

SpellOrderByInput = Union[
    '_Spell_id_OrderByInput',
    '_Spell_name_OrderByInput',
    '_Spell_level_OrderByInput',
    '_Spell_school_OrderByInput',
    '_Spell_castingTime_OrderByInput',
    '_Spell_duration_OrderByInput',
    '_Spell_range_OrderByInput',
    '_Spell_area_OrderByInput',
    '_Spell_attack_OrderByInput',
    '_Spell_save_OrderByInput',
    '_Spell_damageEffect_OrderByInput',
    '_Spell_ritual_OrderByInput',
    '_Spell_concentration_OrderByInput',
    '_Spell_verbal_OrderByInput',
    '_Spell_somatic_OrderByInput',
    '_Spell_material_OrderByInput',
    '_Spell_material__OrderByInput',
    '_Spell_source_OrderByInput',
    '_Spell_details_OrderByInput',
    '_Spell_link_OrderByInput',
    '_Spell_RelevanceOrderByInput',
]



# recursive Spell types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SpellRelationFilter = TypedDict(
    'SpellRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SpellListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SpellInclude(TypedDict, total=False):
    """Spell relational arguments"""


    

class CHARACTERVECTORIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""


class CHARACTERVECTORIncludeFromSpellRecursive1(TypedDict, total=False):
    """Relational arguments for Spell"""


class CHARACTERVECTORIncludeFromSpellRecursive2(TypedDict, total=False):
    """Relational arguments for Spell"""


class CHARACTERVECTORIncludeFromSpellRecursive3(TypedDict, total=False):
    """Relational arguments for Spell"""


class CHARACTERVECTORIncludeFromSpellRecursive4(TypedDict, total=False):
    """Relational arguments for Spell"""

    

class CHARACTERVECTORArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class CHARACTERVECTORArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class CHARACTERVECTORArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class CHARACTERVECTORArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class CHARACTERVECTORArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    
    

class FindManyCHARACTERVECTORArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class FindManyCHARACTERVECTORArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class FindManyCHARACTERVECTORArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class FindManyCHARACTERVECTORArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class FindManyCHARACTERVECTORArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    
    

class ClassesIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""


class ClassesIncludeFromSpellRecursive1(TypedDict, total=False):
    """Relational arguments for Spell"""


class ClassesIncludeFromSpellRecursive2(TypedDict, total=False):
    """Relational arguments for Spell"""


class ClassesIncludeFromSpellRecursive3(TypedDict, total=False):
    """Relational arguments for Spell"""


class ClassesIncludeFromSpellRecursive4(TypedDict, total=False):
    """Relational arguments for Spell"""

    

class ClassesArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'ClassesIncludeFromClassesRecursive1'


class ClassesArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'ClassesIncludeFromClassesRecursive2'


class ClassesArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'ClassesIncludeFromClassesRecursive3'


class ClassesArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'ClassesIncludeFromClassesRecursive4'


class ClassesArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    
    

class FindManyClassesArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive1'


class FindManyClassesArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive2'


class FindManyClassesArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive3'


class FindManyClassesArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive4'


class FindManyClassesArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    
    

class GeneralEquipmentIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""


class GeneralEquipmentIncludeFromSpellRecursive1(TypedDict, total=False):
    """Relational arguments for Spell"""


class GeneralEquipmentIncludeFromSpellRecursive2(TypedDict, total=False):
    """Relational arguments for Spell"""


class GeneralEquipmentIncludeFromSpellRecursive3(TypedDict, total=False):
    """Relational arguments for Spell"""


class GeneralEquipmentIncludeFromSpellRecursive4(TypedDict, total=False):
    """Relational arguments for Spell"""

    

class GeneralEquipmentArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class GeneralEquipmentArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class GeneralEquipmentArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class GeneralEquipmentArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class GeneralEquipmentArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    
    

class FindManyGeneralEquipmentArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class FindManyGeneralEquipmentArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class FindManyGeneralEquipmentArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class FindManyGeneralEquipmentArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class FindManyGeneralEquipmentArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    
    

class ITEMSVECTORIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""


class ITEMSVECTORIncludeFromSpellRecursive1(TypedDict, total=False):
    """Relational arguments for Spell"""


class ITEMSVECTORIncludeFromSpellRecursive2(TypedDict, total=False):
    """Relational arguments for Spell"""


class ITEMSVECTORIncludeFromSpellRecursive3(TypedDict, total=False):
    """Relational arguments for Spell"""


class ITEMSVECTORIncludeFromSpellRecursive4(TypedDict, total=False):
    """Relational arguments for Spell"""

    

class ITEMSVECTORArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class ITEMSVECTORArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class ITEMSVECTORArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class ITEMSVECTORArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class ITEMSVECTORArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    
    

class FindManyITEMSVECTORArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class FindManyITEMSVECTORArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class FindManyITEMSVECTORArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class FindManyITEMSVECTORArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class FindManyITEMSVECTORArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    
    

class MONSTERVECTORIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""


class MONSTERVECTORIncludeFromSpellRecursive1(TypedDict, total=False):
    """Relational arguments for Spell"""


class MONSTERVECTORIncludeFromSpellRecursive2(TypedDict, total=False):
    """Relational arguments for Spell"""


class MONSTERVECTORIncludeFromSpellRecursive3(TypedDict, total=False):
    """Relational arguments for Spell"""


class MONSTERVECTORIncludeFromSpellRecursive4(TypedDict, total=False):
    """Relational arguments for Spell"""

    

class MONSTERVECTORArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class MONSTERVECTORArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class MONSTERVECTORArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class MONSTERVECTORArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class MONSTERVECTORArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    
    

class FindManyMONSTERVECTORArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class FindManyMONSTERVECTORArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class FindManyMONSTERVECTORArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class FindManyMONSTERVECTORArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class FindManyMONSTERVECTORArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    
    

class MagicItemIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""


class MagicItemIncludeFromSpellRecursive1(TypedDict, total=False):
    """Relational arguments for Spell"""


class MagicItemIncludeFromSpellRecursive2(TypedDict, total=False):
    """Relational arguments for Spell"""


class MagicItemIncludeFromSpellRecursive3(TypedDict, total=False):
    """Relational arguments for Spell"""


class MagicItemIncludeFromSpellRecursive4(TypedDict, total=False):
    """Relational arguments for Spell"""

    

class MagicItemArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class MagicItemArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class MagicItemArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class MagicItemArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class MagicItemArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    
    

class FindManyMagicItemArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class FindManyMagicItemArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class FindManyMagicItemArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class FindManyMagicItemArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class FindManyMagicItemArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    
    

class MonsterIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""


class MonsterIncludeFromSpellRecursive1(TypedDict, total=False):
    """Relational arguments for Spell"""


class MonsterIncludeFromSpellRecursive2(TypedDict, total=False):
    """Relational arguments for Spell"""


class MonsterIncludeFromSpellRecursive3(TypedDict, total=False):
    """Relational arguments for Spell"""


class MonsterIncludeFromSpellRecursive4(TypedDict, total=False):
    """Relational arguments for Spell"""

    

class MonsterArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'MonsterIncludeFromMonsterRecursive1'


class MonsterArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'MonsterIncludeFromMonsterRecursive2'


class MonsterArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'MonsterIncludeFromMonsterRecursive3'


class MonsterArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'MonsterIncludeFromMonsterRecursive4'


class MonsterArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    
    

class FindManyMonsterArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive1'


class FindManyMonsterArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive2'


class FindManyMonsterArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive3'


class FindManyMonsterArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive4'


class FindManyMonsterArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    
    

class RaceIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""


class RaceIncludeFromSpellRecursive1(TypedDict, total=False):
    """Relational arguments for Spell"""


class RaceIncludeFromSpellRecursive2(TypedDict, total=False):
    """Relational arguments for Spell"""


class RaceIncludeFromSpellRecursive3(TypedDict, total=False):
    """Relational arguments for Spell"""


class RaceIncludeFromSpellRecursive4(TypedDict, total=False):
    """Relational arguments for Spell"""

    

class RaceArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'RaceIncludeFromRaceRecursive1'


class RaceArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'RaceIncludeFromRaceRecursive2'


class RaceArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'RaceIncludeFromRaceRecursive3'


class RaceArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'RaceIncludeFromRaceRecursive4'


class RaceArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    
    

class FindManyRaceArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive1'


class FindManyRaceArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive2'


class FindManyRaceArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive3'


class FindManyRaceArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive4'


class FindManyRaceArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    
    

class SESSIONIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""


class SESSIONIncludeFromSpellRecursive1(TypedDict, total=False):
    """Relational arguments for Spell"""


class SESSIONIncludeFromSpellRecursive2(TypedDict, total=False):
    """Relational arguments for Spell"""


class SESSIONIncludeFromSpellRecursive3(TypedDict, total=False):
    """Relational arguments for Spell"""


class SESSIONIncludeFromSpellRecursive4(TypedDict, total=False):
    """Relational arguments for Spell"""

    

class SESSIONArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class SESSIONArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class SESSIONArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class SESSIONArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class SESSIONArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    
    

class FindManySESSIONArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class FindManySESSIONArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class FindManySESSIONArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class FindManySESSIONArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class FindManySESSIONArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    
    

class SPELLSVECTORIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""


class SPELLSVECTORIncludeFromSpellRecursive1(TypedDict, total=False):
    """Relational arguments for Spell"""


class SPELLSVECTORIncludeFromSpellRecursive2(TypedDict, total=False):
    """Relational arguments for Spell"""


class SPELLSVECTORIncludeFromSpellRecursive3(TypedDict, total=False):
    """Relational arguments for Spell"""


class SPELLSVECTORIncludeFromSpellRecursive4(TypedDict, total=False):
    """Relational arguments for Spell"""

    

class SPELLSVECTORArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class SPELLSVECTORArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class SPELLSVECTORArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class SPELLSVECTORArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class SPELLSVECTORArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    
    

class FindManySPELLSVECTORArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class FindManySPELLSVECTORArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class FindManySPELLSVECTORArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class FindManySPELLSVECTORArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class FindManySPELLSVECTORArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    
    

class SpellIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""


class SpellIncludeFromSpellRecursive1(TypedDict, total=False):
    """Relational arguments for Spell"""


class SpellIncludeFromSpellRecursive2(TypedDict, total=False):
    """Relational arguments for Spell"""


class SpellIncludeFromSpellRecursive3(TypedDict, total=False):
    """Relational arguments for Spell"""


class SpellIncludeFromSpellRecursive4(TypedDict, total=False):
    """Relational arguments for Spell"""

    

class SpellArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'SpellIncludeFromSpellRecursive1'


class SpellArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'SpellIncludeFromSpellRecursive2'


class SpellArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'SpellIncludeFromSpellRecursive3'


class SpellArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'SpellIncludeFromSpellRecursive4'


class SpellArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    
    

class FindManySpellArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive1'


class FindManySpellArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive2'


class FindManySpellArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive3'


class FindManySpellArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive4'


class FindManySpellArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    
    

class USERDATAIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""


class USERDATAIncludeFromSpellRecursive1(TypedDict, total=False):
    """Relational arguments for Spell"""


class USERDATAIncludeFromSpellRecursive2(TypedDict, total=False):
    """Relational arguments for Spell"""


class USERDATAIncludeFromSpellRecursive3(TypedDict, total=False):
    """Relational arguments for Spell"""


class USERDATAIncludeFromSpellRecursive4(TypedDict, total=False):
    """Relational arguments for Spell"""

    

class USERDATAArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class USERDATAArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class USERDATAArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class USERDATAArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class USERDATAArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    
    

class FindManyUSERDATAArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class FindManyUSERDATAArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class FindManyUSERDATAArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class FindManyUSERDATAArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class FindManyUSERDATAArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    
    

class STORYVECTORIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""


class STORYVECTORIncludeFromSpellRecursive1(TypedDict, total=False):
    """Relational arguments for Spell"""


class STORYVECTORIncludeFromSpellRecursive2(TypedDict, total=False):
    """Relational arguments for Spell"""


class STORYVECTORIncludeFromSpellRecursive3(TypedDict, total=False):
    """Relational arguments for Spell"""


class STORYVECTORIncludeFromSpellRecursive4(TypedDict, total=False):
    """Relational arguments for Spell"""

    

class STORYVECTORArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class STORYVECTORArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class STORYVECTORArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class STORYVECTORArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class STORYVECTORArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    
    

class FindManySTORYVECTORArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class FindManySTORYVECTORArgsFromSpellRecursive1(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class FindManySTORYVECTORArgsFromSpellRecursive2(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class FindManySTORYVECTORArgsFromSpellRecursive3(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class FindManySTORYVECTORArgsFromSpellRecursive4(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    


FindManySpellArgs = FindManySpellArgsFromSpell
FindFirstSpellArgs = FindManySpellArgsFromSpell


    

class SpellWhereInput(TypedDict, total=False):
    """Spell arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    level: Union[_str, 'types.StringFilter']
    school: Union[_str, 'types.StringFilter']
    castingTime: Union[_str, 'types.StringFilter']
    duration: Union[_str, 'types.StringFilter']
    range: Union[_str, 'types.StringFilter']
    area: Union[None, _str, 'types.StringFilter']
    attack: Union[None, _str, 'types.StringFilter']
    save: Union[None, _str, 'types.StringFilter']
    damageEffect: Union[_str, 'types.StringFilter']
    ritual: Union[None, _str, 'types.StringFilter']
    concentration: Union[None, _str, 'types.StringFilter']
    verbal: Union[None, _str, 'types.StringFilter']
    somatic: Union[None, _str, 'types.StringFilter']
    material: Union[None, _str, 'types.StringFilter']
    material_: Union[None, _str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']
    details: Union[_str, 'types.StringFilter']
    link: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SpellWhereInputRecursive1', List['SpellWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SpellWhereInputRecursive1']
    OR: List['SpellWhereInputRecursive1']
    NOT: List['SpellWhereInputRecursive1']


class SpellWhereInputRecursive1(TypedDict, total=False):
    """Spell arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    level: Union[_str, 'types.StringFilter']
    school: Union[_str, 'types.StringFilter']
    castingTime: Union[_str, 'types.StringFilter']
    duration: Union[_str, 'types.StringFilter']
    range: Union[_str, 'types.StringFilter']
    area: Union[None, _str, 'types.StringFilter']
    attack: Union[None, _str, 'types.StringFilter']
    save: Union[None, _str, 'types.StringFilter']
    damageEffect: Union[_str, 'types.StringFilter']
    ritual: Union[None, _str, 'types.StringFilter']
    concentration: Union[None, _str, 'types.StringFilter']
    verbal: Union[None, _str, 'types.StringFilter']
    somatic: Union[None, _str, 'types.StringFilter']
    material: Union[None, _str, 'types.StringFilter']
    material_: Union[None, _str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']
    details: Union[_str, 'types.StringFilter']
    link: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SpellWhereInputRecursive2', List['SpellWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SpellWhereInputRecursive2']
    OR: List['SpellWhereInputRecursive2']
    NOT: List['SpellWhereInputRecursive2']


class SpellWhereInputRecursive2(TypedDict, total=False):
    """Spell arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    level: Union[_str, 'types.StringFilter']
    school: Union[_str, 'types.StringFilter']
    castingTime: Union[_str, 'types.StringFilter']
    duration: Union[_str, 'types.StringFilter']
    range: Union[_str, 'types.StringFilter']
    area: Union[None, _str, 'types.StringFilter']
    attack: Union[None, _str, 'types.StringFilter']
    save: Union[None, _str, 'types.StringFilter']
    damageEffect: Union[_str, 'types.StringFilter']
    ritual: Union[None, _str, 'types.StringFilter']
    concentration: Union[None, _str, 'types.StringFilter']
    verbal: Union[None, _str, 'types.StringFilter']
    somatic: Union[None, _str, 'types.StringFilter']
    material: Union[None, _str, 'types.StringFilter']
    material_: Union[None, _str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']
    details: Union[_str, 'types.StringFilter']
    link: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SpellWhereInputRecursive3', List['SpellWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SpellWhereInputRecursive3']
    OR: List['SpellWhereInputRecursive3']
    NOT: List['SpellWhereInputRecursive3']


class SpellWhereInputRecursive3(TypedDict, total=False):
    """Spell arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    level: Union[_str, 'types.StringFilter']
    school: Union[_str, 'types.StringFilter']
    castingTime: Union[_str, 'types.StringFilter']
    duration: Union[_str, 'types.StringFilter']
    range: Union[_str, 'types.StringFilter']
    area: Union[None, _str, 'types.StringFilter']
    attack: Union[None, _str, 'types.StringFilter']
    save: Union[None, _str, 'types.StringFilter']
    damageEffect: Union[_str, 'types.StringFilter']
    ritual: Union[None, _str, 'types.StringFilter']
    concentration: Union[None, _str, 'types.StringFilter']
    verbal: Union[None, _str, 'types.StringFilter']
    somatic: Union[None, _str, 'types.StringFilter']
    material: Union[None, _str, 'types.StringFilter']
    material_: Union[None, _str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']
    details: Union[_str, 'types.StringFilter']
    link: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SpellWhereInputRecursive4', List['SpellWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SpellWhereInputRecursive4']
    OR: List['SpellWhereInputRecursive4']
    NOT: List['SpellWhereInputRecursive4']


class SpellWhereInputRecursive4(TypedDict, total=False):
    """Spell arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    level: Union[_str, 'types.StringFilter']
    school: Union[_str, 'types.StringFilter']
    castingTime: Union[_str, 'types.StringFilter']
    duration: Union[_str, 'types.StringFilter']
    range: Union[_str, 'types.StringFilter']
    area: Union[None, _str, 'types.StringFilter']
    attack: Union[None, _str, 'types.StringFilter']
    save: Union[None, _str, 'types.StringFilter']
    damageEffect: Union[_str, 'types.StringFilter']
    ritual: Union[None, _str, 'types.StringFilter']
    concentration: Union[None, _str, 'types.StringFilter']
    verbal: Union[None, _str, 'types.StringFilter']
    somatic: Union[None, _str, 'types.StringFilter']
    material: Union[None, _str, 'types.StringFilter']
    material_: Union[None, _str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']
    details: Union[_str, 'types.StringFilter']
    link: Union[_str, 'types.StringFilter']



# aggregate Spell types


    

class SpellScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Spell arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    level: Union[_str, 'types.StringWithAggregatesFilter']
    school: Union[_str, 'types.StringWithAggregatesFilter']
    castingTime: Union[_str, 'types.StringWithAggregatesFilter']
    duration: Union[_str, 'types.StringWithAggregatesFilter']
    range: Union[_str, 'types.StringWithAggregatesFilter']
    area: Union[_str, 'types.StringWithAggregatesFilter']
    attack: Union[_str, 'types.StringWithAggregatesFilter']
    save: Union[_str, 'types.StringWithAggregatesFilter']
    damageEffect: Union[_str, 'types.StringWithAggregatesFilter']
    ritual: Union[_str, 'types.StringWithAggregatesFilter']
    concentration: Union[_str, 'types.StringWithAggregatesFilter']
    verbal: Union[_str, 'types.StringWithAggregatesFilter']
    somatic: Union[_str, 'types.StringWithAggregatesFilter']
    material: Union[_str, 'types.StringWithAggregatesFilter']
    material_: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    details: Union[_str, 'types.StringWithAggregatesFilter']
    link: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SpellScalarWhereWithAggregatesInputRecursive1']
    OR: List['SpellScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SpellScalarWhereWithAggregatesInputRecursive1']


class SpellScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Spell arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    level: Union[_str, 'types.StringWithAggregatesFilter']
    school: Union[_str, 'types.StringWithAggregatesFilter']
    castingTime: Union[_str, 'types.StringWithAggregatesFilter']
    duration: Union[_str, 'types.StringWithAggregatesFilter']
    range: Union[_str, 'types.StringWithAggregatesFilter']
    area: Union[_str, 'types.StringWithAggregatesFilter']
    attack: Union[_str, 'types.StringWithAggregatesFilter']
    save: Union[_str, 'types.StringWithAggregatesFilter']
    damageEffect: Union[_str, 'types.StringWithAggregatesFilter']
    ritual: Union[_str, 'types.StringWithAggregatesFilter']
    concentration: Union[_str, 'types.StringWithAggregatesFilter']
    verbal: Union[_str, 'types.StringWithAggregatesFilter']
    somatic: Union[_str, 'types.StringWithAggregatesFilter']
    material: Union[_str, 'types.StringWithAggregatesFilter']
    material_: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    details: Union[_str, 'types.StringWithAggregatesFilter']
    link: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SpellScalarWhereWithAggregatesInputRecursive2']
    OR: List['SpellScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SpellScalarWhereWithAggregatesInputRecursive2']


class SpellScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Spell arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    level: Union[_str, 'types.StringWithAggregatesFilter']
    school: Union[_str, 'types.StringWithAggregatesFilter']
    castingTime: Union[_str, 'types.StringWithAggregatesFilter']
    duration: Union[_str, 'types.StringWithAggregatesFilter']
    range: Union[_str, 'types.StringWithAggregatesFilter']
    area: Union[_str, 'types.StringWithAggregatesFilter']
    attack: Union[_str, 'types.StringWithAggregatesFilter']
    save: Union[_str, 'types.StringWithAggregatesFilter']
    damageEffect: Union[_str, 'types.StringWithAggregatesFilter']
    ritual: Union[_str, 'types.StringWithAggregatesFilter']
    concentration: Union[_str, 'types.StringWithAggregatesFilter']
    verbal: Union[_str, 'types.StringWithAggregatesFilter']
    somatic: Union[_str, 'types.StringWithAggregatesFilter']
    material: Union[_str, 'types.StringWithAggregatesFilter']
    material_: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    details: Union[_str, 'types.StringWithAggregatesFilter']
    link: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SpellScalarWhereWithAggregatesInputRecursive3']
    OR: List['SpellScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SpellScalarWhereWithAggregatesInputRecursive3']


class SpellScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Spell arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    level: Union[_str, 'types.StringWithAggregatesFilter']
    school: Union[_str, 'types.StringWithAggregatesFilter']
    castingTime: Union[_str, 'types.StringWithAggregatesFilter']
    duration: Union[_str, 'types.StringWithAggregatesFilter']
    range: Union[_str, 'types.StringWithAggregatesFilter']
    area: Union[_str, 'types.StringWithAggregatesFilter']
    attack: Union[_str, 'types.StringWithAggregatesFilter']
    save: Union[_str, 'types.StringWithAggregatesFilter']
    damageEffect: Union[_str, 'types.StringWithAggregatesFilter']
    ritual: Union[_str, 'types.StringWithAggregatesFilter']
    concentration: Union[_str, 'types.StringWithAggregatesFilter']
    verbal: Union[_str, 'types.StringWithAggregatesFilter']
    somatic: Union[_str, 'types.StringWithAggregatesFilter']
    material: Union[_str, 'types.StringWithAggregatesFilter']
    material_: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    details: Union[_str, 'types.StringWithAggregatesFilter']
    link: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SpellScalarWhereWithAggregatesInputRecursive4']
    OR: List['SpellScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SpellScalarWhereWithAggregatesInputRecursive4']


class SpellScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Spell arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    level: Union[_str, 'types.StringWithAggregatesFilter']
    school: Union[_str, 'types.StringWithAggregatesFilter']
    castingTime: Union[_str, 'types.StringWithAggregatesFilter']
    duration: Union[_str, 'types.StringWithAggregatesFilter']
    range: Union[_str, 'types.StringWithAggregatesFilter']
    area: Union[_str, 'types.StringWithAggregatesFilter']
    attack: Union[_str, 'types.StringWithAggregatesFilter']
    save: Union[_str, 'types.StringWithAggregatesFilter']
    damageEffect: Union[_str, 'types.StringWithAggregatesFilter']
    ritual: Union[_str, 'types.StringWithAggregatesFilter']
    concentration: Union[_str, 'types.StringWithAggregatesFilter']
    verbal: Union[_str, 'types.StringWithAggregatesFilter']
    somatic: Union[_str, 'types.StringWithAggregatesFilter']
    material: Union[_str, 'types.StringWithAggregatesFilter']
    material_: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    details: Union[_str, 'types.StringWithAggregatesFilter']
    link: Union[_str, 'types.StringWithAggregatesFilter']



class SpellGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    level: _str
    school: _str
    castingTime: _str
    duration: _str
    range: _str
    area: _str
    attack: _str
    save: _str
    damageEffect: _str
    ritual: _str
    concentration: _str
    verbal: _str
    somatic: _str
    material: _str
    material_: _str
    source: _str
    details: _str
    link: _str
    _sum: 'SpellSumAggregateOutput'
    _avg: 'SpellAvgAggregateOutput'
    _min: 'SpellMinAggregateOutput'
    _max: 'SpellMaxAggregateOutput'
    _count: 'SpellCountAggregateOutput'


class SpellAvgAggregateOutput(TypedDict, total=False):
    """Spell output for aggregating averages"""
    id: float


class SpellSumAggregateOutput(TypedDict, total=False):
    """Spell output for aggregating sums"""
    id: _int


class SpellScalarAggregateOutput(TypedDict, total=False):
    """Spell output including scalar fields"""
    id: _int
    name: _str
    level: _str
    school: _str
    castingTime: _str
    duration: _str
    range: _str
    area: _str
    attack: _str
    save: _str
    damageEffect: _str
    ritual: _str
    concentration: _str
    verbal: _str
    somatic: _str
    material: _str
    material_: _str
    source: _str
    details: _str
    link: _str


SpellMinAggregateOutput = SpellScalarAggregateOutput
SpellMaxAggregateOutput = SpellScalarAggregateOutput


class SpellMaxAggregateInput(TypedDict, total=False):
    """Spell input for aggregating by max"""
    id: bool
    name: bool
    level: bool
    school: bool
    castingTime: bool
    duration: bool
    range: bool
    area: bool
    attack: bool
    save: bool
    damageEffect: bool
    ritual: bool
    concentration: bool
    verbal: bool
    somatic: bool
    material: bool
    material_: bool
    source: bool
    details: bool
    link: bool


class SpellMinAggregateInput(TypedDict, total=False):
    """Spell input for aggregating by min"""
    id: bool
    name: bool
    level: bool
    school: bool
    castingTime: bool
    duration: bool
    range: bool
    area: bool
    attack: bool
    save: bool
    damageEffect: bool
    ritual: bool
    concentration: bool
    verbal: bool
    somatic: bool
    material: bool
    material_: bool
    source: bool
    details: bool
    link: bool


class SpellNumberAggregateInput(TypedDict, total=False):
    """Spell input for aggregating numbers"""
    id: bool


SpellAvgAggregateInput = SpellNumberAggregateInput
SpellSumAggregateInput = SpellNumberAggregateInput


SpellCountAggregateInput = TypedDict(
    'SpellCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'level': bool,
        'school': bool,
        'castingTime': bool,
        'duration': bool,
        'range': bool,
        'area': bool,
        'attack': bool,
        'save': bool,
        'damageEffect': bool,
        'ritual': bool,
        'concentration': bool,
        'verbal': bool,
        'somatic': bool,
        'material': bool,
        'material_': bool,
        'source': bool,
        'details': bool,
        'link': bool,
        '_all': bool,
    },
    total=False,
)

SpellCountAggregateOutput = TypedDict(
    'SpellCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'level': int,
        'school': int,
        'castingTime': int,
        'duration': int,
        'range': int,
        'area': int,
        'attack': int,
        'save': int,
        'damageEffect': int,
        'ritual': int,
        'concentration': int,
        'verbal': int,
        'somatic': int,
        'material': int,
        'material_': int,
        'source': int,
        'details': int,
        'link': int,
        '_all': int,
    },
    total=False,
)


SpellKeys = Literal[
    'id',
    'name',
    'level',
    'school',
    'castingTime',
    'duration',
    'range',
    'area',
    'attack',
    'save',
    'damageEffect',
    'ritual',
    'concentration',
    'verbal',
    'somatic',
    'material',
    'material_',
    'source',
    'details',
    'link',
]
SpellScalarFieldKeys = Literal[
    'id',
    'name',
    'level',
    'school',
    'castingTime',
    'duration',
    'range',
    'area',
    'attack',
    'save',
    'damageEffect',
    'ritual',
    'concentration',
    'verbal',
    'somatic',
    'material',
    'material_',
    'source',
    'details',
    'link',
]
SpellScalarFieldKeysT = TypeVar('SpellScalarFieldKeysT', bound=SpellScalarFieldKeys)

SpellRelationalFieldKeys = _NoneType

# USERDATA types

class USERDATAOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the USERDATA create method"""
    id: _int


class USERDATACreateInput(USERDATAOptionalCreateInput):
    """Required arguments to the USERDATA create method"""
    name: _str
    username: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class USERDATAOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the USERDATA create method, without relations"""
    id: _int


class USERDATACreateWithoutRelationsInput(USERDATAOptionalCreateWithoutRelationsInput):
    """Required arguments to the USERDATA create method, without relations"""
    name: _str
    username: _str
    password: _str

class USERDATAConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'USERDATACreateWithoutRelationsInput'
    where: 'USERDATAWhereUniqueInput'

class USERDATACreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'USERDATACreateWithoutRelationsInput'
    connect: 'USERDATAWhereUniqueInput'
    connect_or_create: 'USERDATAConnectOrCreateWithoutRelationsInput'


class USERDATACreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['USERDATACreateWithoutRelationsInput', List['USERDATACreateWithoutRelationsInput']]
    connect: Union['USERDATAWhereUniqueInput', List['USERDATAWhereUniqueInput']]
    connect_or_create: Union['USERDATAConnectOrCreateWithoutRelationsInput', List['USERDATAConnectOrCreateWithoutRelationsInput']]

_USERDATAWhereUnique_id_Input = TypedDict(
    '_USERDATAWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

USERDATAWhereUniqueInput = _USERDATAWhereUnique_id_Input


class USERDATAUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    username: _str
    password: _str


class USERDATAUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    username: _str
    password: _str


class USERDATAUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['USERDATACreateWithoutRelationsInput']
    connect: List['USERDATAWhereUniqueInput']
    connect_or_create: List['USERDATAConnectOrCreateWithoutRelationsInput']
    set: List['USERDATAWhereUniqueInput']
    disconnect: List['USERDATAWhereUniqueInput']
    delete: List['USERDATAWhereUniqueInput']

    # TODO
    # update: List['USERDATAUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['USERDATAUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['USERDATAScalarWhereInput']
    # upsert: List['USERDATAUpserteWithWhereUniqueWithoutRelationsInput']


class USERDATAUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'USERDATACreateWithoutRelationsInput'
    connect: 'USERDATAWhereUniqueInput'
    connect_or_create: 'USERDATAConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'USERDATAUpdateInput'
    # upsert: 'USERDATAUpsertWithoutRelationsInput'


class USERDATAUpsertInput(TypedDict):
    create: 'USERDATACreateInput'
    update: 'USERDATAUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_USERDATA_id_OrderByInput = TypedDict(
    '_USERDATA_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_USERDATA_name_OrderByInput = TypedDict(
    '_USERDATA_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_USERDATA_username_OrderByInput = TypedDict(
    '_USERDATA_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_USERDATA_password_OrderByInput = TypedDict(
    '_USERDATA_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_USERDATA_RelevanceInner = TypedDict(
    '_USERDATA_RelevanceInner',
    {
        'fields': 'List[USERDATAScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_USERDATA_RelevanceOrderByInput = TypedDict(
    '_USERDATA_RelevanceOrderByInput',
    {
        '_relevance': '_USERDATA_RelevanceInner',
    },
    total=True
)

USERDATAOrderByInput = Union[
    '_USERDATA_id_OrderByInput',
    '_USERDATA_name_OrderByInput',
    '_USERDATA_username_OrderByInput',
    '_USERDATA_password_OrderByInput',
    '_USERDATA_RelevanceOrderByInput',
]



# recursive USERDATA types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

USERDATARelationFilter = TypedDict(
    'USERDATARelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class USERDATAListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class USERDATAInclude(TypedDict, total=False):
    """USERDATA relational arguments"""


    

class CHARACTERVECTORIncludeFromUSERDATA(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class CHARACTERVECTORIncludeFromUSERDATARecursive1(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class CHARACTERVECTORIncludeFromUSERDATARecursive2(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class CHARACTERVECTORIncludeFromUSERDATARecursive3(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class CHARACTERVECTORIncludeFromUSERDATARecursive4(TypedDict, total=False):
    """Relational arguments for USERDATA"""

    

class CHARACTERVECTORArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class CHARACTERVECTORArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class CHARACTERVECTORArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class CHARACTERVECTORArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class CHARACTERVECTORArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    
    

class FindManyCHARACTERVECTORArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class FindManyCHARACTERVECTORArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class FindManyCHARACTERVECTORArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class FindManyCHARACTERVECTORArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class FindManyCHARACTERVECTORArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    
    

class ClassesIncludeFromUSERDATA(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class ClassesIncludeFromUSERDATARecursive1(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class ClassesIncludeFromUSERDATARecursive2(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class ClassesIncludeFromUSERDATARecursive3(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class ClassesIncludeFromUSERDATARecursive4(TypedDict, total=False):
    """Relational arguments for USERDATA"""

    

class ClassesArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'ClassesIncludeFromClassesRecursive1'


class ClassesArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'ClassesIncludeFromClassesRecursive2'


class ClassesArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'ClassesIncludeFromClassesRecursive3'


class ClassesArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'ClassesIncludeFromClassesRecursive4'


class ClassesArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    
    

class FindManyClassesArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive1'


class FindManyClassesArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive2'


class FindManyClassesArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive3'


class FindManyClassesArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive4'


class FindManyClassesArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    
    

class GeneralEquipmentIncludeFromUSERDATA(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class GeneralEquipmentIncludeFromUSERDATARecursive1(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class GeneralEquipmentIncludeFromUSERDATARecursive2(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class GeneralEquipmentIncludeFromUSERDATARecursive3(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class GeneralEquipmentIncludeFromUSERDATARecursive4(TypedDict, total=False):
    """Relational arguments for USERDATA"""

    

class GeneralEquipmentArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class GeneralEquipmentArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class GeneralEquipmentArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class GeneralEquipmentArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class GeneralEquipmentArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    
    

class FindManyGeneralEquipmentArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class FindManyGeneralEquipmentArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class FindManyGeneralEquipmentArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class FindManyGeneralEquipmentArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class FindManyGeneralEquipmentArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    
    

class ITEMSVECTORIncludeFromUSERDATA(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class ITEMSVECTORIncludeFromUSERDATARecursive1(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class ITEMSVECTORIncludeFromUSERDATARecursive2(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class ITEMSVECTORIncludeFromUSERDATARecursive3(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class ITEMSVECTORIncludeFromUSERDATARecursive4(TypedDict, total=False):
    """Relational arguments for USERDATA"""

    

class ITEMSVECTORArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class ITEMSVECTORArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class ITEMSVECTORArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class ITEMSVECTORArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class ITEMSVECTORArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    
    

class FindManyITEMSVECTORArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class FindManyITEMSVECTORArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class FindManyITEMSVECTORArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class FindManyITEMSVECTORArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class FindManyITEMSVECTORArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    
    

class MONSTERVECTORIncludeFromUSERDATA(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class MONSTERVECTORIncludeFromUSERDATARecursive1(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class MONSTERVECTORIncludeFromUSERDATARecursive2(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class MONSTERVECTORIncludeFromUSERDATARecursive3(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class MONSTERVECTORIncludeFromUSERDATARecursive4(TypedDict, total=False):
    """Relational arguments for USERDATA"""

    

class MONSTERVECTORArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class MONSTERVECTORArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class MONSTERVECTORArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class MONSTERVECTORArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class MONSTERVECTORArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    
    

class FindManyMONSTERVECTORArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class FindManyMONSTERVECTORArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class FindManyMONSTERVECTORArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class FindManyMONSTERVECTORArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class FindManyMONSTERVECTORArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    
    

class MagicItemIncludeFromUSERDATA(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class MagicItemIncludeFromUSERDATARecursive1(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class MagicItemIncludeFromUSERDATARecursive2(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class MagicItemIncludeFromUSERDATARecursive3(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class MagicItemIncludeFromUSERDATARecursive4(TypedDict, total=False):
    """Relational arguments for USERDATA"""

    

class MagicItemArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class MagicItemArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class MagicItemArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class MagicItemArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class MagicItemArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    
    

class FindManyMagicItemArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class FindManyMagicItemArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class FindManyMagicItemArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class FindManyMagicItemArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class FindManyMagicItemArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    
    

class MonsterIncludeFromUSERDATA(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class MonsterIncludeFromUSERDATARecursive1(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class MonsterIncludeFromUSERDATARecursive2(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class MonsterIncludeFromUSERDATARecursive3(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class MonsterIncludeFromUSERDATARecursive4(TypedDict, total=False):
    """Relational arguments for USERDATA"""

    

class MonsterArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'MonsterIncludeFromMonsterRecursive1'


class MonsterArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'MonsterIncludeFromMonsterRecursive2'


class MonsterArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'MonsterIncludeFromMonsterRecursive3'


class MonsterArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'MonsterIncludeFromMonsterRecursive4'


class MonsterArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    
    

class FindManyMonsterArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive1'


class FindManyMonsterArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive2'


class FindManyMonsterArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive3'


class FindManyMonsterArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive4'


class FindManyMonsterArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    
    

class RaceIncludeFromUSERDATA(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class RaceIncludeFromUSERDATARecursive1(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class RaceIncludeFromUSERDATARecursive2(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class RaceIncludeFromUSERDATARecursive3(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class RaceIncludeFromUSERDATARecursive4(TypedDict, total=False):
    """Relational arguments for USERDATA"""

    

class RaceArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'RaceIncludeFromRaceRecursive1'


class RaceArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'RaceIncludeFromRaceRecursive2'


class RaceArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'RaceIncludeFromRaceRecursive3'


class RaceArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'RaceIncludeFromRaceRecursive4'


class RaceArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    
    

class FindManyRaceArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive1'


class FindManyRaceArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive2'


class FindManyRaceArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive3'


class FindManyRaceArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive4'


class FindManyRaceArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    
    

class SESSIONIncludeFromUSERDATA(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class SESSIONIncludeFromUSERDATARecursive1(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class SESSIONIncludeFromUSERDATARecursive2(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class SESSIONIncludeFromUSERDATARecursive3(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class SESSIONIncludeFromUSERDATARecursive4(TypedDict, total=False):
    """Relational arguments for USERDATA"""

    

class SESSIONArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class SESSIONArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class SESSIONArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class SESSIONArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class SESSIONArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    
    

class FindManySESSIONArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class FindManySESSIONArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class FindManySESSIONArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class FindManySESSIONArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class FindManySESSIONArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    
    

class SPELLSVECTORIncludeFromUSERDATA(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class SPELLSVECTORIncludeFromUSERDATARecursive1(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class SPELLSVECTORIncludeFromUSERDATARecursive2(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class SPELLSVECTORIncludeFromUSERDATARecursive3(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class SPELLSVECTORIncludeFromUSERDATARecursive4(TypedDict, total=False):
    """Relational arguments for USERDATA"""

    

class SPELLSVECTORArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class SPELLSVECTORArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class SPELLSVECTORArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class SPELLSVECTORArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class SPELLSVECTORArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    
    

class FindManySPELLSVECTORArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class FindManySPELLSVECTORArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class FindManySPELLSVECTORArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class FindManySPELLSVECTORArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class FindManySPELLSVECTORArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    
    

class SpellIncludeFromUSERDATA(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class SpellIncludeFromUSERDATARecursive1(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class SpellIncludeFromUSERDATARecursive2(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class SpellIncludeFromUSERDATARecursive3(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class SpellIncludeFromUSERDATARecursive4(TypedDict, total=False):
    """Relational arguments for USERDATA"""

    

class SpellArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'SpellIncludeFromSpellRecursive1'


class SpellArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'SpellIncludeFromSpellRecursive2'


class SpellArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'SpellIncludeFromSpellRecursive3'


class SpellArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'SpellIncludeFromSpellRecursive4'


class SpellArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    
    

class FindManySpellArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive1'


class FindManySpellArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive2'


class FindManySpellArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive3'


class FindManySpellArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive4'


class FindManySpellArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    
    

class USERDATAIncludeFromUSERDATA(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class USERDATAIncludeFromUSERDATARecursive1(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class USERDATAIncludeFromUSERDATARecursive2(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class USERDATAIncludeFromUSERDATARecursive3(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class USERDATAIncludeFromUSERDATARecursive4(TypedDict, total=False):
    """Relational arguments for USERDATA"""

    

class USERDATAArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class USERDATAArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class USERDATAArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class USERDATAArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class USERDATAArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    
    

class FindManyUSERDATAArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class FindManyUSERDATAArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class FindManyUSERDATAArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class FindManyUSERDATAArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class FindManyUSERDATAArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    
    

class STORYVECTORIncludeFromUSERDATA(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class STORYVECTORIncludeFromUSERDATARecursive1(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class STORYVECTORIncludeFromUSERDATARecursive2(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class STORYVECTORIncludeFromUSERDATARecursive3(TypedDict, total=False):
    """Relational arguments for USERDATA"""


class STORYVECTORIncludeFromUSERDATARecursive4(TypedDict, total=False):
    """Relational arguments for USERDATA"""

    

class STORYVECTORArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class STORYVECTORArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class STORYVECTORArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class STORYVECTORArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class STORYVECTORArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    
    

class FindManySTORYVECTORArgsFromUSERDATA(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class FindManySTORYVECTORArgsFromUSERDATARecursive1(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class FindManySTORYVECTORArgsFromUSERDATARecursive2(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class FindManySTORYVECTORArgsFromUSERDATARecursive3(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class FindManySTORYVECTORArgsFromUSERDATARecursive4(TypedDict, total=False):
    """Arguments for USERDATA"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    


FindManyUSERDATAArgs = FindManyUSERDATAArgsFromUSERDATA
FindFirstUSERDATAArgs = FindManyUSERDATAArgsFromUSERDATA


    

class USERDATAWhereInput(TypedDict, total=False):
    """USERDATA arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['USERDATAWhereInputRecursive1', List['USERDATAWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['USERDATAWhereInputRecursive1']
    OR: List['USERDATAWhereInputRecursive1']
    NOT: List['USERDATAWhereInputRecursive1']


class USERDATAWhereInputRecursive1(TypedDict, total=False):
    """USERDATA arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['USERDATAWhereInputRecursive2', List['USERDATAWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['USERDATAWhereInputRecursive2']
    OR: List['USERDATAWhereInputRecursive2']
    NOT: List['USERDATAWhereInputRecursive2']


class USERDATAWhereInputRecursive2(TypedDict, total=False):
    """USERDATA arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['USERDATAWhereInputRecursive3', List['USERDATAWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['USERDATAWhereInputRecursive3']
    OR: List['USERDATAWhereInputRecursive3']
    NOT: List['USERDATAWhereInputRecursive3']


class USERDATAWhereInputRecursive3(TypedDict, total=False):
    """USERDATA arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['USERDATAWhereInputRecursive4', List['USERDATAWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['USERDATAWhereInputRecursive4']
    OR: List['USERDATAWhereInputRecursive4']
    NOT: List['USERDATAWhereInputRecursive4']


class USERDATAWhereInputRecursive4(TypedDict, total=False):
    """USERDATA arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']



# aggregate USERDATA types


    

class USERDATAScalarWhereWithAggregatesInput(TypedDict, total=False):
    """USERDATA arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['USERDATAScalarWhereWithAggregatesInputRecursive1']
    OR: List['USERDATAScalarWhereWithAggregatesInputRecursive1']
    NOT: List['USERDATAScalarWhereWithAggregatesInputRecursive1']


class USERDATAScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """USERDATA arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['USERDATAScalarWhereWithAggregatesInputRecursive2']
    OR: List['USERDATAScalarWhereWithAggregatesInputRecursive2']
    NOT: List['USERDATAScalarWhereWithAggregatesInputRecursive2']


class USERDATAScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """USERDATA arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['USERDATAScalarWhereWithAggregatesInputRecursive3']
    OR: List['USERDATAScalarWhereWithAggregatesInputRecursive3']
    NOT: List['USERDATAScalarWhereWithAggregatesInputRecursive3']


class USERDATAScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """USERDATA arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['USERDATAScalarWhereWithAggregatesInputRecursive4']
    OR: List['USERDATAScalarWhereWithAggregatesInputRecursive4']
    NOT: List['USERDATAScalarWhereWithAggregatesInputRecursive4']


class USERDATAScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """USERDATA arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']



class USERDATAGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    username: _str
    password: _str
    _sum: 'USERDATASumAggregateOutput'
    _avg: 'USERDATAAvgAggregateOutput'
    _min: 'USERDATAMinAggregateOutput'
    _max: 'USERDATAMaxAggregateOutput'
    _count: 'USERDATACountAggregateOutput'


class USERDATAAvgAggregateOutput(TypedDict, total=False):
    """USERDATA output for aggregating averages"""
    id: float


class USERDATASumAggregateOutput(TypedDict, total=False):
    """USERDATA output for aggregating sums"""
    id: _int


class USERDATAScalarAggregateOutput(TypedDict, total=False):
    """USERDATA output including scalar fields"""
    id: _int
    name: _str
    username: _str
    password: _str


USERDATAMinAggregateOutput = USERDATAScalarAggregateOutput
USERDATAMaxAggregateOutput = USERDATAScalarAggregateOutput


class USERDATAMaxAggregateInput(TypedDict, total=False):
    """USERDATA input for aggregating by max"""
    id: bool
    name: bool
    username: bool
    password: bool


class USERDATAMinAggregateInput(TypedDict, total=False):
    """USERDATA input for aggregating by min"""
    id: bool
    name: bool
    username: bool
    password: bool


class USERDATANumberAggregateInput(TypedDict, total=False):
    """USERDATA input for aggregating numbers"""
    id: bool


USERDATAAvgAggregateInput = USERDATANumberAggregateInput
USERDATASumAggregateInput = USERDATANumberAggregateInput


USERDATACountAggregateInput = TypedDict(
    'USERDATACountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'username': bool,
        'password': bool,
        '_all': bool,
    },
    total=False,
)

USERDATACountAggregateOutput = TypedDict(
    'USERDATACountAggregateOutput',
    {
        'id': int,
        'name': int,
        'username': int,
        'password': int,
        '_all': int,
    },
    total=False,
)


USERDATAKeys = Literal[
    'id',
    'name',
    'username',
    'password',
]
USERDATAScalarFieldKeys = Literal[
    'id',
    'name',
    'username',
    'password',
]
USERDATAScalarFieldKeysT = TypeVar('USERDATAScalarFieldKeysT', bound=USERDATAScalarFieldKeys)

USERDATARelationalFieldKeys = _NoneType

# STORYVECTOR types

class STORYVECTOROptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the STORYVECTOR create method"""
    id: _int


class STORYVECTORCreateInput(STORYVECTOROptionalCreateInput):
    """Required arguments to the STORYVECTOR create method"""
    text: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class STORYVECTOROptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the STORYVECTOR create method, without relations"""
    id: _int


class STORYVECTORCreateWithoutRelationsInput(STORYVECTOROptionalCreateWithoutRelationsInput):
    """Required arguments to the STORYVECTOR create method, without relations"""
    text: _str

class STORYVECTORConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'STORYVECTORCreateWithoutRelationsInput'
    where: 'STORYVECTORWhereUniqueInput'

class STORYVECTORCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'STORYVECTORCreateWithoutRelationsInput'
    connect: 'STORYVECTORWhereUniqueInput'
    connect_or_create: 'STORYVECTORConnectOrCreateWithoutRelationsInput'


class STORYVECTORCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['STORYVECTORCreateWithoutRelationsInput', List['STORYVECTORCreateWithoutRelationsInput']]
    connect: Union['STORYVECTORWhereUniqueInput', List['STORYVECTORWhereUniqueInput']]
    connect_or_create: Union['STORYVECTORConnectOrCreateWithoutRelationsInput', List['STORYVECTORConnectOrCreateWithoutRelationsInput']]

_STORYVECTORWhereUnique_id_Input = TypedDict(
    '_STORYVECTORWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

STORYVECTORWhereUniqueInput = _STORYVECTORWhereUnique_id_Input


class STORYVECTORUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    text: _str


class STORYVECTORUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    text: _str


class STORYVECTORUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['STORYVECTORCreateWithoutRelationsInput']
    connect: List['STORYVECTORWhereUniqueInput']
    connect_or_create: List['STORYVECTORConnectOrCreateWithoutRelationsInput']
    set: List['STORYVECTORWhereUniqueInput']
    disconnect: List['STORYVECTORWhereUniqueInput']
    delete: List['STORYVECTORWhereUniqueInput']

    # TODO
    # update: List['STORYVECTORUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['STORYVECTORUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['STORYVECTORScalarWhereInput']
    # upsert: List['STORYVECTORUpserteWithWhereUniqueWithoutRelationsInput']


class STORYVECTORUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'STORYVECTORCreateWithoutRelationsInput'
    connect: 'STORYVECTORWhereUniqueInput'
    connect_or_create: 'STORYVECTORConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'STORYVECTORUpdateInput'
    # upsert: 'STORYVECTORUpsertWithoutRelationsInput'


class STORYVECTORUpsertInput(TypedDict):
    create: 'STORYVECTORCreateInput'
    update: 'STORYVECTORUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_STORYVECTOR_id_OrderByInput = TypedDict(
    '_STORYVECTOR_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_STORYVECTOR_text_OrderByInput = TypedDict(
    '_STORYVECTOR_text_OrderByInput',
    {
        'text': 'SortOrder',
    },
    total=True
)

_STORYVECTOR_RelevanceInner = TypedDict(
    '_STORYVECTOR_RelevanceInner',
    {
        'fields': 'List[STORYVECTORScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_STORYVECTOR_RelevanceOrderByInput = TypedDict(
    '_STORYVECTOR_RelevanceOrderByInput',
    {
        '_relevance': '_STORYVECTOR_RelevanceInner',
    },
    total=True
)

STORYVECTOROrderByInput = Union[
    '_STORYVECTOR_id_OrderByInput',
    '_STORYVECTOR_text_OrderByInput',
    '_STORYVECTOR_RelevanceOrderByInput',
]



# recursive STORYVECTOR types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

STORYVECTORRelationFilter = TypedDict(
    'STORYVECTORRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class STORYVECTORListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class STORYVECTORInclude(TypedDict, total=False):
    """STORYVECTOR relational arguments"""


    

class CHARACTERVECTORIncludeFromSTORYVECTOR(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class CHARACTERVECTORIncludeFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class CHARACTERVECTORIncludeFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class CHARACTERVECTORIncludeFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class CHARACTERVECTORIncludeFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""

    

class CHARACTERVECTORArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class CHARACTERVECTORArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class CHARACTERVECTORArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class CHARACTERVECTORArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class CHARACTERVECTORArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    
    

class FindManyCHARACTERVECTORArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive1'


class FindManyCHARACTERVECTORArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive2'


class FindManyCHARACTERVECTORArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive3'


class FindManyCHARACTERVECTORArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    include: 'CHARACTERVECTORIncludeFromCHARACTERVECTORRecursive4'


class FindManyCHARACTERVECTORArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['CHARACTERVECTOROrderByInput', List['CHARACTERVECTOROrderByInput']]
    where: 'CHARACTERVECTORWhereInput'
    cursor: 'CHARACTERVECTORWhereUniqueInput'
    distinct: List['CHARACTERVECTORScalarFieldKeys']
    
    

class ClassesIncludeFromSTORYVECTOR(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class ClassesIncludeFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class ClassesIncludeFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class ClassesIncludeFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class ClassesIncludeFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""

    

class ClassesArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive1'


class ClassesArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive2'


class ClassesArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive3'


class ClassesArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'ClassesIncludeFromClassesRecursive4'


class ClassesArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    
    

class FindManyClassesArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive1'


class FindManyClassesArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive2'


class FindManyClassesArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive3'


class FindManyClassesArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    include: 'ClassesIncludeFromClassesRecursive4'


class FindManyClassesArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['ClassesOrderByInput', List['ClassesOrderByInput']]
    where: 'ClassesWhereInput'
    cursor: 'ClassesWhereUniqueInput'
    distinct: List['ClassesScalarFieldKeys']
    
    

class GeneralEquipmentIncludeFromSTORYVECTOR(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class GeneralEquipmentIncludeFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class GeneralEquipmentIncludeFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class GeneralEquipmentIncludeFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class GeneralEquipmentIncludeFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""

    

class GeneralEquipmentArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class GeneralEquipmentArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class GeneralEquipmentArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class GeneralEquipmentArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class GeneralEquipmentArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    
    

class FindManyGeneralEquipmentArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive1'


class FindManyGeneralEquipmentArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive2'


class FindManyGeneralEquipmentArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive3'


class FindManyGeneralEquipmentArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    include: 'GeneralEquipmentIncludeFromGeneralEquipmentRecursive4'


class FindManyGeneralEquipmentArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['GeneralEquipmentOrderByInput', List['GeneralEquipmentOrderByInput']]
    where: 'GeneralEquipmentWhereInput'
    cursor: 'GeneralEquipmentWhereUniqueInput'
    distinct: List['GeneralEquipmentScalarFieldKeys']
    
    

class ITEMSVECTORIncludeFromSTORYVECTOR(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class ITEMSVECTORIncludeFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class ITEMSVECTORIncludeFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class ITEMSVECTORIncludeFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class ITEMSVECTORIncludeFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""

    

class ITEMSVECTORArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class ITEMSVECTORArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class ITEMSVECTORArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class ITEMSVECTORArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class ITEMSVECTORArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    
    

class FindManyITEMSVECTORArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive1'


class FindManyITEMSVECTORArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive2'


class FindManyITEMSVECTORArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive3'


class FindManyITEMSVECTORArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    include: 'ITEMSVECTORIncludeFromITEMSVECTORRecursive4'


class FindManyITEMSVECTORArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['ITEMSVECTOROrderByInput', List['ITEMSVECTOROrderByInput']]
    where: 'ITEMSVECTORWhereInput'
    cursor: 'ITEMSVECTORWhereUniqueInput'
    distinct: List['ITEMSVECTORScalarFieldKeys']
    
    

class MONSTERVECTORIncludeFromSTORYVECTOR(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class MONSTERVECTORIncludeFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class MONSTERVECTORIncludeFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class MONSTERVECTORIncludeFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class MONSTERVECTORIncludeFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""

    

class MONSTERVECTORArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class MONSTERVECTORArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class MONSTERVECTORArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class MONSTERVECTORArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class MONSTERVECTORArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    
    

class FindManyMONSTERVECTORArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive1'


class FindManyMONSTERVECTORArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive2'


class FindManyMONSTERVECTORArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive3'


class FindManyMONSTERVECTORArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    include: 'MONSTERVECTORIncludeFromMONSTERVECTORRecursive4'


class FindManyMONSTERVECTORArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['MONSTERVECTOROrderByInput', List['MONSTERVECTOROrderByInput']]
    where: 'MONSTERVECTORWhereInput'
    cursor: 'MONSTERVECTORWhereUniqueInput'
    distinct: List['MONSTERVECTORScalarFieldKeys']
    
    

class MagicItemIncludeFromSTORYVECTOR(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class MagicItemIncludeFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class MagicItemIncludeFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class MagicItemIncludeFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class MagicItemIncludeFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""

    

class MagicItemArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class MagicItemArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class MagicItemArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class MagicItemArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class MagicItemArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    
    

class FindManyMagicItemArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive1'


class FindManyMagicItemArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive2'


class FindManyMagicItemArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive3'


class FindManyMagicItemArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    include: 'MagicItemIncludeFromMagicItemRecursive4'


class FindManyMagicItemArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['MagicItemOrderByInput', List['MagicItemOrderByInput']]
    where: 'MagicItemWhereInput'
    cursor: 'MagicItemWhereUniqueInput'
    distinct: List['MagicItemScalarFieldKeys']
    
    

class MonsterIncludeFromSTORYVECTOR(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class MonsterIncludeFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class MonsterIncludeFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class MonsterIncludeFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class MonsterIncludeFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""

    

class MonsterArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive1'


class MonsterArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive2'


class MonsterArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive3'


class MonsterArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'MonsterIncludeFromMonsterRecursive4'


class MonsterArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    
    

class FindManyMonsterArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive1'


class FindManyMonsterArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive2'


class FindManyMonsterArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive3'


class FindManyMonsterArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    include: 'MonsterIncludeFromMonsterRecursive4'


class FindManyMonsterArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['MonsterOrderByInput', List['MonsterOrderByInput']]
    where: 'MonsterWhereInput'
    cursor: 'MonsterWhereUniqueInput'
    distinct: List['MonsterScalarFieldKeys']
    
    

class RaceIncludeFromSTORYVECTOR(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class RaceIncludeFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class RaceIncludeFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class RaceIncludeFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class RaceIncludeFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""

    

class RaceArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'RaceIncludeFromRaceRecursive1'


class RaceArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'RaceIncludeFromRaceRecursive2'


class RaceArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'RaceIncludeFromRaceRecursive3'


class RaceArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'RaceIncludeFromRaceRecursive4'


class RaceArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    
    

class FindManyRaceArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive1'


class FindManyRaceArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive2'


class FindManyRaceArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive3'


class FindManyRaceArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRaceRecursive4'


class FindManyRaceArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    
    

class SESSIONIncludeFromSTORYVECTOR(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class SESSIONIncludeFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class SESSIONIncludeFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class SESSIONIncludeFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class SESSIONIncludeFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""

    

class SESSIONArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class SESSIONArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class SESSIONArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class SESSIONArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class SESSIONArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    
    

class FindManySESSIONArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive1'


class FindManySESSIONArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive2'


class FindManySESSIONArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive3'


class FindManySESSIONArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    include: 'SESSIONIncludeFromSESSIONRecursive4'


class FindManySESSIONArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['SESSIONOrderByInput', List['SESSIONOrderByInput']]
    where: 'SESSIONWhereInput'
    cursor: 'SESSIONWhereUniqueInput'
    distinct: List['SESSIONScalarFieldKeys']
    
    

class SPELLSVECTORIncludeFromSTORYVECTOR(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class SPELLSVECTORIncludeFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class SPELLSVECTORIncludeFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class SPELLSVECTORIncludeFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class SPELLSVECTORIncludeFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""

    

class SPELLSVECTORArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class SPELLSVECTORArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class SPELLSVECTORArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class SPELLSVECTORArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class SPELLSVECTORArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    
    

class FindManySPELLSVECTORArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive1'


class FindManySPELLSVECTORArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive2'


class FindManySPELLSVECTORArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive3'


class FindManySPELLSVECTORArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    include: 'SPELLSVECTORIncludeFromSPELLSVECTORRecursive4'


class FindManySPELLSVECTORArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['SPELLSVECTOROrderByInput', List['SPELLSVECTOROrderByInput']]
    where: 'SPELLSVECTORWhereInput'
    cursor: 'SPELLSVECTORWhereUniqueInput'
    distinct: List['SPELLSVECTORScalarFieldKeys']
    
    

class SpellIncludeFromSTORYVECTOR(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class SpellIncludeFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class SpellIncludeFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class SpellIncludeFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class SpellIncludeFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""

    

class SpellArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'SpellIncludeFromSpellRecursive1'


class SpellArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'SpellIncludeFromSpellRecursive2'


class SpellArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'SpellIncludeFromSpellRecursive3'


class SpellArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'SpellIncludeFromSpellRecursive4'


class SpellArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    
    

class FindManySpellArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive1'


class FindManySpellArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive2'


class FindManySpellArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive3'


class FindManySpellArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpellRecursive4'


class FindManySpellArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    
    

class USERDATAIncludeFromSTORYVECTOR(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class USERDATAIncludeFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class USERDATAIncludeFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class USERDATAIncludeFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class USERDATAIncludeFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""

    

class USERDATAArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class USERDATAArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class USERDATAArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class USERDATAArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class USERDATAArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    
    

class FindManyUSERDATAArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive1'


class FindManyUSERDATAArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive2'


class FindManyUSERDATAArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive3'


class FindManyUSERDATAArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    include: 'USERDATAIncludeFromUSERDATARecursive4'


class FindManyUSERDATAArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['USERDATAOrderByInput', List['USERDATAOrderByInput']]
    where: 'USERDATAWhereInput'
    cursor: 'USERDATAWhereUniqueInput'
    distinct: List['USERDATAScalarFieldKeys']
    
    

class STORYVECTORIncludeFromSTORYVECTOR(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class STORYVECTORIncludeFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class STORYVECTORIncludeFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class STORYVECTORIncludeFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""


class STORYVECTORIncludeFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Relational arguments for STORYVECTOR"""

    

class STORYVECTORArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class STORYVECTORArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class STORYVECTORArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class STORYVECTORArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class STORYVECTORArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    
    

class FindManySTORYVECTORArgsFromSTORYVECTOR(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive1'


class FindManySTORYVECTORArgsFromSTORYVECTORRecursive1(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive2'


class FindManySTORYVECTORArgsFromSTORYVECTORRecursive2(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive3'


class FindManySTORYVECTORArgsFromSTORYVECTORRecursive3(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    include: 'STORYVECTORIncludeFromSTORYVECTORRecursive4'


class FindManySTORYVECTORArgsFromSTORYVECTORRecursive4(TypedDict, total=False):
    """Arguments for STORYVECTOR"""
    take: int
    skip: int
    order_by: Union['STORYVECTOROrderByInput', List['STORYVECTOROrderByInput']]
    where: 'STORYVECTORWhereInput'
    cursor: 'STORYVECTORWhereUniqueInput'
    distinct: List['STORYVECTORScalarFieldKeys']
    


FindManySTORYVECTORArgs = FindManySTORYVECTORArgsFromSTORYVECTOR
FindFirstSTORYVECTORArgs = FindManySTORYVECTORArgsFromSTORYVECTOR


    

class STORYVECTORWhereInput(TypedDict, total=False):
    """STORYVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['STORYVECTORWhereInputRecursive1', List['STORYVECTORWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['STORYVECTORWhereInputRecursive1']
    OR: List['STORYVECTORWhereInputRecursive1']
    NOT: List['STORYVECTORWhereInputRecursive1']


class STORYVECTORWhereInputRecursive1(TypedDict, total=False):
    """STORYVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['STORYVECTORWhereInputRecursive2', List['STORYVECTORWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['STORYVECTORWhereInputRecursive2']
    OR: List['STORYVECTORWhereInputRecursive2']
    NOT: List['STORYVECTORWhereInputRecursive2']


class STORYVECTORWhereInputRecursive2(TypedDict, total=False):
    """STORYVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['STORYVECTORWhereInputRecursive3', List['STORYVECTORWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['STORYVECTORWhereInputRecursive3']
    OR: List['STORYVECTORWhereInputRecursive3']
    NOT: List['STORYVECTORWhereInputRecursive3']


class STORYVECTORWhereInputRecursive3(TypedDict, total=False):
    """STORYVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['STORYVECTORWhereInputRecursive4', List['STORYVECTORWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['STORYVECTORWhereInputRecursive4']
    OR: List['STORYVECTORWhereInputRecursive4']
    NOT: List['STORYVECTORWhereInputRecursive4']


class STORYVECTORWhereInputRecursive4(TypedDict, total=False):
    """STORYVECTOR arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']



# aggregate STORYVECTOR types


    

class STORYVECTORScalarWhereWithAggregatesInput(TypedDict, total=False):
    """STORYVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['STORYVECTORScalarWhereWithAggregatesInputRecursive1']
    OR: List['STORYVECTORScalarWhereWithAggregatesInputRecursive1']
    NOT: List['STORYVECTORScalarWhereWithAggregatesInputRecursive1']


class STORYVECTORScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """STORYVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['STORYVECTORScalarWhereWithAggregatesInputRecursive2']
    OR: List['STORYVECTORScalarWhereWithAggregatesInputRecursive2']
    NOT: List['STORYVECTORScalarWhereWithAggregatesInputRecursive2']


class STORYVECTORScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """STORYVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['STORYVECTORScalarWhereWithAggregatesInputRecursive3']
    OR: List['STORYVECTORScalarWhereWithAggregatesInputRecursive3']
    NOT: List['STORYVECTORScalarWhereWithAggregatesInputRecursive3']


class STORYVECTORScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """STORYVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['STORYVECTORScalarWhereWithAggregatesInputRecursive4']
    OR: List['STORYVECTORScalarWhereWithAggregatesInputRecursive4']
    NOT: List['STORYVECTORScalarWhereWithAggregatesInputRecursive4']


class STORYVECTORScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """STORYVECTOR arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']



class STORYVECTORGroupByOutput(TypedDict, total=False):
    id: _int
    text: _str
    _sum: 'STORYVECTORSumAggregateOutput'
    _avg: 'STORYVECTORAvgAggregateOutput'
    _min: 'STORYVECTORMinAggregateOutput'
    _max: 'STORYVECTORMaxAggregateOutput'
    _count: 'STORYVECTORCountAggregateOutput'


class STORYVECTORAvgAggregateOutput(TypedDict, total=False):
    """STORYVECTOR output for aggregating averages"""
    id: float


class STORYVECTORSumAggregateOutput(TypedDict, total=False):
    """STORYVECTOR output for aggregating sums"""
    id: _int


class STORYVECTORScalarAggregateOutput(TypedDict, total=False):
    """STORYVECTOR output including scalar fields"""
    id: _int
    text: _str


STORYVECTORMinAggregateOutput = STORYVECTORScalarAggregateOutput
STORYVECTORMaxAggregateOutput = STORYVECTORScalarAggregateOutput


class STORYVECTORMaxAggregateInput(TypedDict, total=False):
    """STORYVECTOR input for aggregating by max"""
    id: bool
    text: bool


class STORYVECTORMinAggregateInput(TypedDict, total=False):
    """STORYVECTOR input for aggregating by min"""
    id: bool
    text: bool


class STORYVECTORNumberAggregateInput(TypedDict, total=False):
    """STORYVECTOR input for aggregating numbers"""
    id: bool


STORYVECTORAvgAggregateInput = STORYVECTORNumberAggregateInput
STORYVECTORSumAggregateInput = STORYVECTORNumberAggregateInput


STORYVECTORCountAggregateInput = TypedDict(
    'STORYVECTORCountAggregateInput',
    {
        'id': bool,
        'text': bool,
        '_all': bool,
    },
    total=False,
)

STORYVECTORCountAggregateOutput = TypedDict(
    'STORYVECTORCountAggregateOutput',
    {
        'id': int,
        'text': int,
        '_all': int,
    },
    total=False,
)


STORYVECTORKeys = Literal[
    'id',
    'text',
]
STORYVECTORScalarFieldKeys = Literal[
    'id',
    'text',
]
STORYVECTORScalarFieldKeysT = TypeVar('STORYVECTORScalarFieldKeysT', bound=STORYVECTORScalarFieldKeys)

STORYVECTORRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields