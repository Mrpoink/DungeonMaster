# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from ._builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BaseCHARACTERVECTOR(_PrismaModel):
    __prisma_model__: ClassVar[Literal['CHARACTERVECTOR']] = 'CHARACTERVECTOR'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CHARACTERVECTORActions[_PrismaModelT]':
        from .client import get_client

        return actions.CHARACTERVECTORActions[_PrismaModelT](client or get_client(), cls)


class BaseClasses(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Classes']] = 'Classes'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ClassesActions[_PrismaModelT]':
        from .client import get_client

        return actions.ClassesActions[_PrismaModelT](client or get_client(), cls)


class BaseGeneralEquipment(_PrismaModel):
    __prisma_model__: ClassVar[Literal['GeneralEquipment']] = 'GeneralEquipment'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.GeneralEquipmentActions[_PrismaModelT]':
        from .client import get_client

        return actions.GeneralEquipmentActions[_PrismaModelT](client or get_client(), cls)


class BaseITEMSVECTOR(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ITEMSVECTOR']] = 'ITEMSVECTOR'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ITEMSVECTORActions[_PrismaModelT]':
        from .client import get_client

        return actions.ITEMSVECTORActions[_PrismaModelT](client or get_client(), cls)


class BaseMONSTERVECTOR(_PrismaModel):
    __prisma_model__: ClassVar[Literal['MONSTERVECTOR']] = 'MONSTERVECTOR'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.MONSTERVECTORActions[_PrismaModelT]':
        from .client import get_client

        return actions.MONSTERVECTORActions[_PrismaModelT](client or get_client(), cls)


class BaseMagicItem(_PrismaModel):
    __prisma_model__: ClassVar[Literal['MagicItem']] = 'MagicItem'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.MagicItemActions[_PrismaModelT]':
        from .client import get_client

        return actions.MagicItemActions[_PrismaModelT](client or get_client(), cls)


class BaseMonster(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Monster']] = 'Monster'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.MonsterActions[_PrismaModelT]':
        from .client import get_client

        return actions.MonsterActions[_PrismaModelT](client or get_client(), cls)


class BaseRace(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Race']] = 'Race'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.RaceActions[_PrismaModelT]':
        from .client import get_client

        return actions.RaceActions[_PrismaModelT](client or get_client(), cls)


class BaseSESSION(_PrismaModel):
    __prisma_model__: ClassVar[Literal['SESSION']] = 'SESSION'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.SESSIONActions[_PrismaModelT]':
        from .client import get_client

        return actions.SESSIONActions[_PrismaModelT](client or get_client(), cls)


class BaseSPELLSVECTOR(_PrismaModel):
    __prisma_model__: ClassVar[Literal['SPELLSVECTOR']] = 'SPELLSVECTOR'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.SPELLSVECTORActions[_PrismaModelT]':
        from .client import get_client

        return actions.SPELLSVECTORActions[_PrismaModelT](client or get_client(), cls)


class BaseSpell(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Spell']] = 'Spell'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.SpellActions[_PrismaModelT]':
        from .client import get_client

        return actions.SpellActions[_PrismaModelT](client or get_client(), cls)


class BaseUSERDATA(_PrismaModel):
    __prisma_model__: ClassVar[Literal['USERDATA']] = 'USERDATA'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.USERDATAActions[_PrismaModelT]':
        from .client import get_client

        return actions.USERDATAActions[_PrismaModelT](client or get_client(), cls)


