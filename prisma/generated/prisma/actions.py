# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class CHARACTERVECTORActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.CHARACTERVECTOR]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await CHARACTERVECTOR.prisma().query_raw(
            'SELECT * FROM CHARACTERVECTOR WHERE id = $1',
            1103527590,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.CHARACTERVECTOR
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await CHARACTERVECTOR.prisma().query_first(
            'SELECT * FROM CHARACTERVECTOR WHERE text = $1',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.CHARACTERVECTORCreateInput,
        include: Optional[types.CHARACTERVECTORInclude] = None
    ) -> _PrismaModelT:
        """Create a new CHARACTERVECTOR record.

        Parameters
        ----------
        data
            CHARACTERVECTOR record data
        include
            Specifies which relations should be loaded on the returned CHARACTERVECTOR model

        Returns
        -------
        prisma.models.CHARACTERVECTOR
            The created CHARACTERVECTOR record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a CHARACTERVECTOR record from just the required fields
        charactervector = await CHARACTERVECTOR.prisma().create(
            data={
                # data to create a CHARACTERVECTOR record
                'text': 'ggciceaie',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.CHARACTERVECTORCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple CHARACTERVECTOR records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of CHARACTERVECTOR record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await CHARACTERVECTOR.prisma().create_many(
            data=[
                {
                    # data to create a CHARACTERVECTOR record
                    'text': 'bbehjachib',
                },
                {
                    # data to create a CHARACTERVECTOR record
                    'text': 'cadfabfehe',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.CHARACTERVECTORWhereUniqueInput,
        include: Optional[types.CHARACTERVECTORInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single CHARACTERVECTOR record.

        Parameters
        ----------
        where
            CHARACTERVECTOR filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned CHARACTERVECTOR model

        Returns
        -------
        prisma.models.CHARACTERVECTOR
            The deleted CHARACTERVECTOR record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        charactervector = await CHARACTERVECTOR.prisma().delete(
            where={
                'id': 368800899,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.CHARACTERVECTORWhereUniqueInput,
        include: Optional[types.CHARACTERVECTORInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique CHARACTERVECTOR record.

        Parameters
        ----------
        where
            CHARACTERVECTOR filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned CHARACTERVECTOR model

        Returns
        -------
        prisma.models.CHARACTERVECTOR
            The found CHARACTERVECTOR record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        charactervector = await CHARACTERVECTOR.prisma().find_unique(
            where={
                'id': 1508029952,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.CHARACTERVECTORWhereUniqueInput,
        include: Optional[types.CHARACTERVECTORInclude] = None
    ) -> _PrismaModelT:
        """Find a unique CHARACTERVECTOR record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            CHARACTERVECTOR filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned CHARACTERVECTOR model

        Returns
        -------
        prisma.models.CHARACTERVECTOR
            The found CHARACTERVECTOR record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        charactervector = await CHARACTERVECTOR.prisma().find_unique_or_raise(
            where={
                'id': 486256185,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CHARACTERVECTORWhereInput] = None,
        cursor: Optional[types.CHARACTERVECTORWhereUniqueInput] = None,
        include: Optional[types.CHARACTERVECTORInclude] = None,
        order: Optional[Union[types.CHARACTERVECTOROrderByInput, List[types.CHARACTERVECTOROrderByInput]]] = None,
        distinct: Optional[List[types.CHARACTERVECTORScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple CHARACTERVECTOR records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of CHARACTERVECTOR records returned
        skip
            Ignore the first N results
        where
            CHARACTERVECTOR filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned CHARACTERVECTOR model
        order
            Order the returned CHARACTERVECTOR records by any field
        distinct
            Filter CHARACTERVECTOR records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.CHARACTERVECTOR]
            The list of all CHARACTERVECTOR records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 CHARACTERVECTOR records
        charactervectors = await CHARACTERVECTOR.prisma().find_many(take=10)

        # find the first 5 CHARACTERVECTOR records ordered by the id field
        charactervectors = await CHARACTERVECTOR.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CHARACTERVECTORWhereInput] = None,
        cursor: Optional[types.CHARACTERVECTORWhereUniqueInput] = None,
        include: Optional[types.CHARACTERVECTORInclude] = None,
        order: Optional[Union[types.CHARACTERVECTOROrderByInput, List[types.CHARACTERVECTOROrderByInput]]] = None,
        distinct: Optional[List[types.CHARACTERVECTORScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single CHARACTERVECTOR record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            CHARACTERVECTOR filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned CHARACTERVECTOR model
        order
            Order the returned CHARACTERVECTOR records by any field
        distinct
            Filter CHARACTERVECTOR records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.CHARACTERVECTOR
            The first CHARACTERVECTOR record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second CHARACTERVECTOR record ordered by the text field
        charactervector = await CHARACTERVECTOR.prisma().find_first(
            skip=1,
            order={
                'text': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CHARACTERVECTORWhereInput] = None,
        cursor: Optional[types.CHARACTERVECTORWhereUniqueInput] = None,
        include: Optional[types.CHARACTERVECTORInclude] = None,
        order: Optional[Union[types.CHARACTERVECTOROrderByInput, List[types.CHARACTERVECTOROrderByInput]]] = None,
        distinct: Optional[List[types.CHARACTERVECTORScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single CHARACTERVECTOR record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            CHARACTERVECTOR filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned CHARACTERVECTOR model
        order
            Order the returned CHARACTERVECTOR records by any field
        distinct
            Filter CHARACTERVECTOR records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.CHARACTERVECTOR
            The first CHARACTERVECTOR record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second CHARACTERVECTOR record ordered by the id field
        charactervector = await CHARACTERVECTOR.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.CHARACTERVECTORUpdateInput,
        where: types.CHARACTERVECTORWhereUniqueInput,
        include: Optional[types.CHARACTERVECTORInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single CHARACTERVECTOR record.

        Parameters
        ----------
        data
            CHARACTERVECTOR record data specifying what to update
        where
            CHARACTERVECTOR filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned CHARACTERVECTOR model

        Returns
        -------
        prisma.models.CHARACTERVECTOR
            The updated CHARACTERVECTOR record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        charactervector = await CHARACTERVECTOR.prisma().update(
            where={
                'id': 1062517886,
            },
            data={
                # data to update the CHARACTERVECTOR record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.CHARACTERVECTORWhereUniqueInput,
        data: types.CHARACTERVECTORUpsertInput,
        include: Optional[types.CHARACTERVECTORInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            CHARACTERVECTOR filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned CHARACTERVECTOR model

        Returns
        -------
        prisma.models.CHARACTERVECTOR
            The created or updated CHARACTERVECTOR record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        charactervector = await CHARACTERVECTOR.prisma().upsert(
            where={
                'id': 267834847,
            },
            data={
                'create': {
                    'id': 267834847,
                    'text': 'cadfabfehe',
                },
                'update': {
                    'text': 'cadfabfehe',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.CHARACTERVECTORUpdateManyMutationInput,
        where: types.CHARACTERVECTORWhereInput,
    ) -> int:
        """Update multiple CHARACTERVECTOR records

        Parameters
        ----------
        data
            CHARACTERVECTOR data to update the selected CHARACTERVECTOR records to
        where
            Filter to select the CHARACTERVECTOR records to update

        Returns
        -------
        int
            The total number of CHARACTERVECTOR records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all CHARACTERVECTOR records
        total = await CHARACTERVECTOR.prisma().update_many(
            data={
                'text': 'biabhbdai'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CHARACTERVECTORWhereInput] = None,
        cursor: Optional[types.CHARACTERVECTORWhereUniqueInput] = None,
    ) -> int:
        """Count the number of CHARACTERVECTOR records present in the database

        Parameters
        ----------
        select
            Select the CHARACTERVECTOR fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            CHARACTERVECTOR filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CHARACTERVECTORCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await CHARACTERVECTOR.prisma().count()

        # results: prisma.types.CHARACTERVECTORCountAggregateOutput
        results = await CHARACTERVECTOR.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.CHARACTERVECTORCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CHARACTERVECTORWhereInput] = None,
        cursor: Optional[types.CHARACTERVECTORWhereUniqueInput] = None,
    ) -> types.CHARACTERVECTORCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.CHARACTERVECTORCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CHARACTERVECTORWhereInput] = None,
        cursor: Optional[types.CHARACTERVECTORWhereUniqueInput] = None,
    ) -> Union[int, types.CHARACTERVECTORCountAggregateOutput]:
        """Count the number of CHARACTERVECTOR records present in the database

        Parameters
        ----------
        select
            Select the CHARACTERVECTOR fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            CHARACTERVECTOR filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CHARACTERVECTORCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await CHARACTERVECTOR.prisma().count()

        # results: prisma.types.CHARACTERVECTORCountAggregateOutput
        results = await CHARACTERVECTOR.prisma().count(
            select={
                '_all': True,
                'text': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.CHARACTERVECTORCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.CHARACTERVECTORWhereInput] = None
    ) -> int:
        """Delete multiple CHARACTERVECTOR records.

        Parameters
        ----------
        where
            Optional CHARACTERVECTOR filter to find the records to be deleted

        Returns
        -------
        int
            The total number of CHARACTERVECTOR records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all CHARACTERVECTOR records
        total = await CHARACTERVECTOR.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.CHARACTERVECTORScalarFieldKeys'],
        *,
        where: Optional['types.CHARACTERVECTORWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.CHARACTERVECTORAvgAggregateInput'] = None,
        sum: Optional['types.CHARACTERVECTORSumAggregateInput'] = None,
        min: Optional['types.CHARACTERVECTORMinAggregateInput'] = None,
        max: Optional['types.CHARACTERVECTORMaxAggregateInput'] = None,
        having: Optional['types.CHARACTERVECTORScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.CHARACTERVECTORCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.CHARACTERVECTORScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.CHARACTERVECTORScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.CHARACTERVECTORGroupByOutput']:
        """Group CHARACTERVECTOR records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar CHARACTERVECTOR fields to group records by
        where
            CHARACTERVECTOR filter to select records
        take
            Limit the maximum number of CHARACTERVECTOR records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.CHARACTERVECTORGroupByOutput]
            A list of dictionaries representing the CHARACTERVECTOR record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group CHARACTERVECTOR records by id values
        # and count how many records are in each group
        results = await CHARACTERVECTOR.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ClassesActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Classes]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Classes.prisma().query_raw(
            'SELECT * FROM Classes WHERE id = $1',
            836760821,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Classes
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Classes.prisma().query_first(
            'SELECT * FROM Classes WHERE reg_class = $1',
            'fjfddhigg',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ClassesCreateInput,
        include: Optional[types.ClassesInclude] = None
    ) -> _PrismaModelT:
        """Create a new Classes record.

        Parameters
        ----------
        data
            Classes record data
        include
            Specifies which relations should be loaded on the returned Classes model

        Returns
        -------
        prisma.models.Classes
            The created Classes record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Classes record from just the required fields
        classes = await Classes.prisma().create(
            data={
                # data to create a Classes record
                'reg_class': 'hjaecfifb',
                'subclass': 'cbbbjbfcii',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ClassesCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Classes records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Classes record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Classes.prisma().create_many(
            data=[
                {
                    # data to create a Classes record
                    'reg_class': 'bbejhfidcb',
                    'subclass': 'bgeecijdgg',
                },
                {
                    # data to create a Classes record
                    'reg_class': 'bdiicjafbj',
                    'subclass': 'bgehebiafc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ClassesWhereUniqueInput,
        include: Optional[types.ClassesInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Classes record.

        Parameters
        ----------
        where
            Classes filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Classes model

        Returns
        -------
        prisma.models.Classes
            The deleted Classes record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        classes = await Classes.prisma().delete(
            where={
                'id': 1675546029,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ClassesWhereUniqueInput,
        include: Optional[types.ClassesInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Classes record.

        Parameters
        ----------
        where
            Classes filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Classes model

        Returns
        -------
        prisma.models.Classes
            The found Classes record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        classes = await Classes.prisma().find_unique(
            where={
                'id': 1767274722,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ClassesWhereUniqueInput,
        include: Optional[types.ClassesInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Classes record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Classes filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Classes model

        Returns
        -------
        prisma.models.Classes
            The found Classes record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        classes = await Classes.prisma().find_unique_or_raise(
            where={
                'id': 326272115,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ClassesWhereInput] = None,
        cursor: Optional[types.ClassesWhereUniqueInput] = None,
        include: Optional[types.ClassesInclude] = None,
        order: Optional[Union[types.ClassesOrderByInput, List[types.ClassesOrderByInput]]] = None,
        distinct: Optional[List[types.ClassesScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Classes records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Classes records returned
        skip
            Ignore the first N results
        where
            Classes filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Classes model
        order
            Order the returned Classes records by any field
        distinct
            Filter Classes records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Classes]
            The list of all Classes records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Classes records
        classes = await Classes.prisma().find_many(take=10)

        # find the first 5 Classes records ordered by the subclass field
        classes = await Classes.prisma().find_many(
            take=5,
            order={
                'subclass': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ClassesWhereInput] = None,
        cursor: Optional[types.ClassesWhereUniqueInput] = None,
        include: Optional[types.ClassesInclude] = None,
        order: Optional[Union[types.ClassesOrderByInput, List[types.ClassesOrderByInput]]] = None,
        distinct: Optional[List[types.ClassesScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Classes record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Classes filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Classes model
        order
            Order the returned Classes records by any field
        distinct
            Filter Classes records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Classes
            The first Classes record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Classes record ordered by the source field
        classes = await Classes.prisma().find_first(
            skip=1,
            order={
                'source': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ClassesWhereInput] = None,
        cursor: Optional[types.ClassesWhereUniqueInput] = None,
        include: Optional[types.ClassesInclude] = None,
        order: Optional[Union[types.ClassesOrderByInput, List[types.ClassesOrderByInput]]] = None,
        distinct: Optional[List[types.ClassesScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Classes record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Classes filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Classes model
        order
            Order the returned Classes records by any field
        distinct
            Filter Classes records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Classes
            The first Classes record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Classes record ordered by the notes field
        classes = await Classes.prisma().find_first_or_raise(
            skip=1,
            order={
                'notes': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ClassesUpdateInput,
        where: types.ClassesWhereUniqueInput,
        include: Optional[types.ClassesInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Classes record.

        Parameters
        ----------
        data
            Classes record data specifying what to update
        where
            Classes filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Classes model

        Returns
        -------
        prisma.models.Classes
            The updated Classes record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        classes = await Classes.prisma().update(
            where={
                'id': 1343201072,
            },
            data={
                # data to update the Classes record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ClassesWhereUniqueInput,
        data: types.ClassesUpsertInput,
        include: Optional[types.ClassesInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Classes filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Classes model

        Returns
        -------
        prisma.models.Classes
            The created or updated Classes record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        classes = await Classes.prisma().upsert(
            where={
                'id': 675780521,
            },
            data={
                'create': {
                    'id': 675780521,
                    'reg_class': 'bdiicjafbj',
                    'subclass': 'bgehebiafc',
                },
                'update': {
                    'reg_class': 'bdiicjafbj',
                    'subclass': 'bgehebiafc',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ClassesUpdateManyMutationInput,
        where: types.ClassesWhereInput,
    ) -> int:
        """Update multiple Classes records

        Parameters
        ----------
        data
            Classes data to update the selected Classes records to
        where
            Filter to select the Classes records to update

        Returns
        -------
        int
            The total number of Classes records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Classes records
        total = await Classes.prisma().update_many(
            data={
                'features': 'heejgedji'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ClassesWhereInput] = None,
        cursor: Optional[types.ClassesWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Classes records present in the database

        Parameters
        ----------
        select
            Select the Classes fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Classes filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ClassesCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Classes.prisma().count()

        # results: prisma.types.ClassesCountAggregateOutput
        results = await Classes.prisma().count(
            select={
                '_all': True,
                'level': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ClassesCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ClassesWhereInput] = None,
        cursor: Optional[types.ClassesWhereUniqueInput] = None,
    ) -> types.ClassesCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ClassesCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ClassesWhereInput] = None,
        cursor: Optional[types.ClassesWhereUniqueInput] = None,
    ) -> Union[int, types.ClassesCountAggregateOutput]:
        """Count the number of Classes records present in the database

        Parameters
        ----------
        select
            Select the Classes fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Classes filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ClassesCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Classes.prisma().count()

        # results: prisma.types.ClassesCountAggregateOutput
        results = await Classes.prisma().count(
            select={
                '_all': True,
                'description': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ClassesCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ClassesWhereInput] = None
    ) -> int:
        """Delete multiple Classes records.

        Parameters
        ----------
        where
            Optional Classes filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Classes records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Classes records
        total = await Classes.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ClassesScalarFieldKeys'],
        *,
        where: Optional['types.ClassesWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ClassesAvgAggregateInput'] = None,
        sum: Optional['types.ClassesSumAggregateInput'] = None,
        min: Optional['types.ClassesMinAggregateInput'] = None,
        max: Optional['types.ClassesMaxAggregateInput'] = None,
        having: Optional['types.ClassesScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ClassesCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ClassesScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ClassesScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ClassesGroupByOutput']:
        """Group Classes records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Classes fields to group records by
        where
            Classes filter to select records
        take
            Limit the maximum number of Classes records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ClassesGroupByOutput]
            A list of dictionaries representing the Classes record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Classes records by id values
        # and count how many records are in each group
        results = await Classes.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class GeneralEquipmentActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.GeneralEquipment]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await GeneralEquipment.prisma().query_raw(
            'SELECT * FROM GeneralEquipment WHERE id = $1',
            1969681615,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.GeneralEquipment
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await GeneralEquipment.prisma().query_first(
            'SELECT * FROM GeneralEquipment WHERE name = $1',
            'bbbgbhfjge',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.GeneralEquipmentCreateInput,
        include: Optional[types.GeneralEquipmentInclude] = None
    ) -> _PrismaModelT:
        """Create a new GeneralEquipment record.

        Parameters
        ----------
        data
            GeneralEquipment record data
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model

        Returns
        -------
        prisma.models.GeneralEquipment
            The created GeneralEquipment record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a GeneralEquipment record from just the required fields
        generalequipment = await GeneralEquipment.prisma().create(
            data={
                # data to create a GeneralEquipment record
                'name': 'igbehcbab',
                'cost': 'bdadaadhag',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.GeneralEquipmentCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple GeneralEquipment records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of GeneralEquipment record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await GeneralEquipment.prisma().create_many(
            data=[
                {
                    # data to create a GeneralEquipment record
                    'name': 'bgiggdidbf',
                    'cost': 'caaaedabfc',
                },
                {
                    # data to create a GeneralEquipment record
                    'name': 'bigibebcib',
                    'cost': 'bigaiehgcc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.GeneralEquipmentWhereUniqueInput,
        include: Optional[types.GeneralEquipmentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single GeneralEquipment record.

        Parameters
        ----------
        where
            GeneralEquipment filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model

        Returns
        -------
        prisma.models.GeneralEquipment
            The deleted GeneralEquipment record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        generalequipment = await GeneralEquipment.prisma().delete(
            where={
                'id': 1448521415,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.GeneralEquipmentWhereUniqueInput,
        include: Optional[types.GeneralEquipmentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique GeneralEquipment record.

        Parameters
        ----------
        where
            GeneralEquipment filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model

        Returns
        -------
        prisma.models.GeneralEquipment
            The found GeneralEquipment record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        generalequipment = await GeneralEquipment.prisma().find_unique(
            where={
                'id': 1628650740,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.GeneralEquipmentWhereUniqueInput,
        include: Optional[types.GeneralEquipmentInclude] = None
    ) -> _PrismaModelT:
        """Find a unique GeneralEquipment record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            GeneralEquipment filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model

        Returns
        -------
        prisma.models.GeneralEquipment
            The found GeneralEquipment record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        generalequipment = await GeneralEquipment.prisma().find_unique_or_raise(
            where={
                'id': 1249606685,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GeneralEquipmentWhereInput] = None,
        cursor: Optional[types.GeneralEquipmentWhereUniqueInput] = None,
        include: Optional[types.GeneralEquipmentInclude] = None,
        order: Optional[Union[types.GeneralEquipmentOrderByInput, List[types.GeneralEquipmentOrderByInput]]] = None,
        distinct: Optional[List[types.GeneralEquipmentScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple GeneralEquipment records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of GeneralEquipment records returned
        skip
            Ignore the first N results
        where
            GeneralEquipment filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model
        order
            Order the returned GeneralEquipment records by any field
        distinct
            Filter GeneralEquipment records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.GeneralEquipment]
            The list of all GeneralEquipment records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 GeneralEquipment records
        generalequipments = await GeneralEquipment.prisma().find_many(take=10)

        # find the first 5 GeneralEquipment records ordered by the cost field
        generalequipments = await GeneralEquipment.prisma().find_many(
            take=5,
            order={
                'cost': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GeneralEquipmentWhereInput] = None,
        cursor: Optional[types.GeneralEquipmentWhereUniqueInput] = None,
        include: Optional[types.GeneralEquipmentInclude] = None,
        order: Optional[Union[types.GeneralEquipmentOrderByInput, List[types.GeneralEquipmentOrderByInput]]] = None,
        distinct: Optional[List[types.GeneralEquipmentScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single GeneralEquipment record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            GeneralEquipment filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model
        order
            Order the returned GeneralEquipment records by any field
        distinct
            Filter GeneralEquipment records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.GeneralEquipment
            The first GeneralEquipment record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second GeneralEquipment record ordered by the Weight__lbs_ field
        generalequipment = await GeneralEquipment.prisma().find_first(
            skip=1,
            order={
                'Weight__lbs_': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GeneralEquipmentWhereInput] = None,
        cursor: Optional[types.GeneralEquipmentWhereUniqueInput] = None,
        include: Optional[types.GeneralEquipmentInclude] = None,
        order: Optional[Union[types.GeneralEquipmentOrderByInput, List[types.GeneralEquipmentOrderByInput]]] = None,
        distinct: Optional[List[types.GeneralEquipmentScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single GeneralEquipment record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            GeneralEquipment filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model
        order
            Order the returned GeneralEquipment records by any field
        distinct
            Filter GeneralEquipment records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.GeneralEquipment
            The first GeneralEquipment record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second GeneralEquipment record ordered by the id field
        generalequipment = await GeneralEquipment.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.GeneralEquipmentUpdateInput,
        where: types.GeneralEquipmentWhereUniqueInput,
        include: Optional[types.GeneralEquipmentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single GeneralEquipment record.

        Parameters
        ----------
        data
            GeneralEquipment record data specifying what to update
        where
            GeneralEquipment filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model

        Returns
        -------
        prisma.models.GeneralEquipment
            The updated GeneralEquipment record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        generalequipment = await GeneralEquipment.prisma().update(
            where={
                'id': 835903122,
            },
            data={
                # data to update the GeneralEquipment record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.GeneralEquipmentWhereUniqueInput,
        data: types.GeneralEquipmentUpsertInput,
        include: Optional[types.GeneralEquipmentInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            GeneralEquipment filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model

        Returns
        -------
        prisma.models.GeneralEquipment
            The created or updated GeneralEquipment record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        generalequipment = await GeneralEquipment.prisma().upsert(
            where={
                'id': 763719779,
            },
            data={
                'create': {
                    'id': 763719779,
                    'name': 'bigibebcib',
                    'cost': 'bigaiehgcc',
                },
                'update': {
                    'name': 'bigibebcib',
                    'cost': 'bigaiehgcc',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.GeneralEquipmentUpdateManyMutationInput,
        where: types.GeneralEquipmentWhereInput,
    ) -> int:
        """Update multiple GeneralEquipment records

        Parameters
        ----------
        data
            GeneralEquipment data to update the selected GeneralEquipment records to
        where
            Filter to select the GeneralEquipment records to update

        Returns
        -------
        int
            The total number of GeneralEquipment records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all GeneralEquipment records
        total = await GeneralEquipment.prisma().update_many(
            data={
                'name': 'ecjjjfbae'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GeneralEquipmentWhereInput] = None,
        cursor: Optional[types.GeneralEquipmentWhereUniqueInput] = None,
    ) -> int:
        """Count the number of GeneralEquipment records present in the database

        Parameters
        ----------
        select
            Select the GeneralEquipment fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            GeneralEquipment filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GeneralEquipmentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await GeneralEquipment.prisma().count()

        # results: prisma.types.GeneralEquipmentCountAggregateOutput
        results = await GeneralEquipment.prisma().count(
            select={
                '_all': True,
                'cost': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.GeneralEquipmentCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GeneralEquipmentWhereInput] = None,
        cursor: Optional[types.GeneralEquipmentWhereUniqueInput] = None,
    ) -> types.GeneralEquipmentCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.GeneralEquipmentCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GeneralEquipmentWhereInput] = None,
        cursor: Optional[types.GeneralEquipmentWhereUniqueInput] = None,
    ) -> Union[int, types.GeneralEquipmentCountAggregateOutput]:
        """Count the number of GeneralEquipment records present in the database

        Parameters
        ----------
        select
            Select the GeneralEquipment fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            GeneralEquipment filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GeneralEquipmentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await GeneralEquipment.prisma().count()

        # results: prisma.types.GeneralEquipmentCountAggregateOutput
        results = await GeneralEquipment.prisma().count(
            select={
                '_all': True,
                'Weight__lbs_': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.GeneralEquipmentCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.GeneralEquipmentWhereInput] = None
    ) -> int:
        """Delete multiple GeneralEquipment records.

        Parameters
        ----------
        where
            Optional GeneralEquipment filter to find the records to be deleted

        Returns
        -------
        int
            The total number of GeneralEquipment records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all GeneralEquipment records
        total = await GeneralEquipment.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.GeneralEquipmentScalarFieldKeys'],
        *,
        where: Optional['types.GeneralEquipmentWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.GeneralEquipmentAvgAggregateInput'] = None,
        sum: Optional['types.GeneralEquipmentSumAggregateInput'] = None,
        min: Optional['types.GeneralEquipmentMinAggregateInput'] = None,
        max: Optional['types.GeneralEquipmentMaxAggregateInput'] = None,
        having: Optional['types.GeneralEquipmentScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.GeneralEquipmentCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.GeneralEquipmentScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.GeneralEquipmentScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.GeneralEquipmentGroupByOutput']:
        """Group GeneralEquipment records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar GeneralEquipment fields to group records by
        where
            GeneralEquipment filter to select records
        take
            Limit the maximum number of GeneralEquipment records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.GeneralEquipmentGroupByOutput]
            A list of dictionaries representing the GeneralEquipment record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group GeneralEquipment records by id values
        # and count how many records are in each group
        results = await GeneralEquipment.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ITEMSVECTORActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.ITEMSVECTOR]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await ITEMSVECTOR.prisma().query_raw(
            'SELECT * FROM ITEMSVECTOR WHERE id = $1',
            1775811865,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.ITEMSVECTOR
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await ITEMSVECTOR.prisma().query_first(
            'SELECT * FROM ITEMSVECTOR WHERE text = $1',
            'ijdbeffgg',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ITEMSVECTORCreateInput,
        include: Optional[types.ITEMSVECTORInclude] = None
    ) -> _PrismaModelT:
        """Create a new ITEMSVECTOR record.

        Parameters
        ----------
        data
            ITEMSVECTOR record data
        include
            Specifies which relations should be loaded on the returned ITEMSVECTOR model

        Returns
        -------
        prisma.models.ITEMSVECTOR
            The created ITEMSVECTOR record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a ITEMSVECTOR record from just the required fields
        itemsvector = await ITEMSVECTOR.prisma().create(
            data={
                # data to create a ITEMSVECTOR record
                'text': 'jjfeafhfj',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ITEMSVECTORCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple ITEMSVECTOR records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of ITEMSVECTOR record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await ITEMSVECTOR.prisma().create_many(
            data=[
                {
                    # data to create a ITEMSVECTOR record
                    'text': 'cbachdgfce',
                },
                {
                    # data to create a ITEMSVECTOR record
                    'text': 'chbfcacbd',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ITEMSVECTORWhereUniqueInput,
        include: Optional[types.ITEMSVECTORInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single ITEMSVECTOR record.

        Parameters
        ----------
        where
            ITEMSVECTOR filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned ITEMSVECTOR model

        Returns
        -------
        prisma.models.ITEMSVECTOR
            The deleted ITEMSVECTOR record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        itemsvector = await ITEMSVECTOR.prisma().delete(
            where={
                'id': 456633834,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ITEMSVECTORWhereUniqueInput,
        include: Optional[types.ITEMSVECTORInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique ITEMSVECTOR record.

        Parameters
        ----------
        where
            ITEMSVECTOR filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned ITEMSVECTOR model

        Returns
        -------
        prisma.models.ITEMSVECTOR
            The found ITEMSVECTOR record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        itemsvector = await ITEMSVECTOR.prisma().find_unique(
            where={
                'id': 2058258651,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ITEMSVECTORWhereUniqueInput,
        include: Optional[types.ITEMSVECTORInclude] = None
    ) -> _PrismaModelT:
        """Find a unique ITEMSVECTOR record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            ITEMSVECTOR filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned ITEMSVECTOR model

        Returns
        -------
        prisma.models.ITEMSVECTOR
            The found ITEMSVECTOR record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        itemsvector = await ITEMSVECTOR.prisma().find_unique_or_raise(
            where={
                'id': 1583689592,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ITEMSVECTORWhereInput] = None,
        cursor: Optional[types.ITEMSVECTORWhereUniqueInput] = None,
        include: Optional[types.ITEMSVECTORInclude] = None,
        order: Optional[Union[types.ITEMSVECTOROrderByInput, List[types.ITEMSVECTOROrderByInput]]] = None,
        distinct: Optional[List[types.ITEMSVECTORScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple ITEMSVECTOR records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of ITEMSVECTOR records returned
        skip
            Ignore the first N results
        where
            ITEMSVECTOR filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ITEMSVECTOR model
        order
            Order the returned ITEMSVECTOR records by any field
        distinct
            Filter ITEMSVECTOR records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.ITEMSVECTOR]
            The list of all ITEMSVECTOR records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 ITEMSVECTOR records
        itemsvectors = await ITEMSVECTOR.prisma().find_many(take=10)

        # find the first 5 ITEMSVECTOR records ordered by the id field
        itemsvectors = await ITEMSVECTOR.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ITEMSVECTORWhereInput] = None,
        cursor: Optional[types.ITEMSVECTORWhereUniqueInput] = None,
        include: Optional[types.ITEMSVECTORInclude] = None,
        order: Optional[Union[types.ITEMSVECTOROrderByInput, List[types.ITEMSVECTOROrderByInput]]] = None,
        distinct: Optional[List[types.ITEMSVECTORScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single ITEMSVECTOR record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            ITEMSVECTOR filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ITEMSVECTOR model
        order
            Order the returned ITEMSVECTOR records by any field
        distinct
            Filter ITEMSVECTOR records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.ITEMSVECTOR
            The first ITEMSVECTOR record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second ITEMSVECTOR record ordered by the text field
        itemsvector = await ITEMSVECTOR.prisma().find_first(
            skip=1,
            order={
                'text': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ITEMSVECTORWhereInput] = None,
        cursor: Optional[types.ITEMSVECTORWhereUniqueInput] = None,
        include: Optional[types.ITEMSVECTORInclude] = None,
        order: Optional[Union[types.ITEMSVECTOROrderByInput, List[types.ITEMSVECTOROrderByInput]]] = None,
        distinct: Optional[List[types.ITEMSVECTORScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single ITEMSVECTOR record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            ITEMSVECTOR filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ITEMSVECTOR model
        order
            Order the returned ITEMSVECTOR records by any field
        distinct
            Filter ITEMSVECTOR records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.ITEMSVECTOR
            The first ITEMSVECTOR record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second ITEMSVECTOR record ordered by the id field
        itemsvector = await ITEMSVECTOR.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ITEMSVECTORUpdateInput,
        where: types.ITEMSVECTORWhereUniqueInput,
        include: Optional[types.ITEMSVECTORInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single ITEMSVECTOR record.

        Parameters
        ----------
        data
            ITEMSVECTOR record data specifying what to update
        where
            ITEMSVECTOR filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned ITEMSVECTOR model

        Returns
        -------
        prisma.models.ITEMSVECTOR
            The updated ITEMSVECTOR record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        itemsvector = await ITEMSVECTOR.prisma().update(
            where={
                'id': 878442065,
            },
            data={
                # data to update the ITEMSVECTOR record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ITEMSVECTORWhereUniqueInput,
        data: types.ITEMSVECTORUpsertInput,
        include: Optional[types.ITEMSVECTORInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            ITEMSVECTOR filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned ITEMSVECTOR model

        Returns
        -------
        prisma.models.ITEMSVECTOR
            The created or updated ITEMSVECTOR record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        itemsvector = await ITEMSVECTOR.prisma().upsert(
            where={
                'id': 1675280054,
            },
            data={
                'create': {
                    'id': 1675280054,
                    'text': 'chbfcacbd',
                },
                'update': {
                    'text': 'chbfcacbd',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ITEMSVECTORUpdateManyMutationInput,
        where: types.ITEMSVECTORWhereInput,
    ) -> int:
        """Update multiple ITEMSVECTOR records

        Parameters
        ----------
        data
            ITEMSVECTOR data to update the selected ITEMSVECTOR records to
        where
            Filter to select the ITEMSVECTOR records to update

        Returns
        -------
        int
            The total number of ITEMSVECTOR records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all ITEMSVECTOR records
        total = await ITEMSVECTOR.prisma().update_many(
            data={
                'text': 'bgchfhgceh'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ITEMSVECTORWhereInput] = None,
        cursor: Optional[types.ITEMSVECTORWhereUniqueInput] = None,
    ) -> int:
        """Count the number of ITEMSVECTOR records present in the database

        Parameters
        ----------
        select
            Select the ITEMSVECTOR fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ITEMSVECTOR filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ITEMSVECTORCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await ITEMSVECTOR.prisma().count()

        # results: prisma.types.ITEMSVECTORCountAggregateOutput
        results = await ITEMSVECTOR.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ITEMSVECTORCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ITEMSVECTORWhereInput] = None,
        cursor: Optional[types.ITEMSVECTORWhereUniqueInput] = None,
    ) -> types.ITEMSVECTORCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ITEMSVECTORCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ITEMSVECTORWhereInput] = None,
        cursor: Optional[types.ITEMSVECTORWhereUniqueInput] = None,
    ) -> Union[int, types.ITEMSVECTORCountAggregateOutput]:
        """Count the number of ITEMSVECTOR records present in the database

        Parameters
        ----------
        select
            Select the ITEMSVECTOR fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ITEMSVECTOR filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ITEMSVECTORCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await ITEMSVECTOR.prisma().count()

        # results: prisma.types.ITEMSVECTORCountAggregateOutput
        results = await ITEMSVECTOR.prisma().count(
            select={
                '_all': True,
                'text': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ITEMSVECTORCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ITEMSVECTORWhereInput] = None
    ) -> int:
        """Delete multiple ITEMSVECTOR records.

        Parameters
        ----------
        where
            Optional ITEMSVECTOR filter to find the records to be deleted

        Returns
        -------
        int
            The total number of ITEMSVECTOR records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all ITEMSVECTOR records
        total = await ITEMSVECTOR.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ITEMSVECTORScalarFieldKeys'],
        *,
        where: Optional['types.ITEMSVECTORWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ITEMSVECTORAvgAggregateInput'] = None,
        sum: Optional['types.ITEMSVECTORSumAggregateInput'] = None,
        min: Optional['types.ITEMSVECTORMinAggregateInput'] = None,
        max: Optional['types.ITEMSVECTORMaxAggregateInput'] = None,
        having: Optional['types.ITEMSVECTORScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ITEMSVECTORCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ITEMSVECTORScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ITEMSVECTORScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ITEMSVECTORGroupByOutput']:
        """Group ITEMSVECTOR records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar ITEMSVECTOR fields to group records by
        where
            ITEMSVECTOR filter to select records
        take
            Limit the maximum number of ITEMSVECTOR records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ITEMSVECTORGroupByOutput]
            A list of dictionaries representing the ITEMSVECTOR record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group ITEMSVECTOR records by id values
        # and count how many records are in each group
        results = await ITEMSVECTOR.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class MONSTERVECTORActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.MONSTERVECTOR]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await MONSTERVECTOR.prisma().query_raw(
            'SELECT * FROM MONSTERVECTOR WHERE id = $1',
            2054802212,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.MONSTERVECTOR
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await MONSTERVECTOR.prisma().query_first(
            'SELECT * FROM MONSTERVECTOR WHERE text = $1',
            'gaddfhfh',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.MONSTERVECTORCreateInput,
        include: Optional[types.MONSTERVECTORInclude] = None
    ) -> _PrismaModelT:
        """Create a new MONSTERVECTOR record.

        Parameters
        ----------
        data
            MONSTERVECTOR record data
        include
            Specifies which relations should be loaded on the returned MONSTERVECTOR model

        Returns
        -------
        prisma.models.MONSTERVECTOR
            The created MONSTERVECTOR record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a MONSTERVECTOR record from just the required fields
        monstervector = await MONSTERVECTOR.prisma().create(
            data={
                # data to create a MONSTERVECTOR record
                'text': 'gieegcbeg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.MONSTERVECTORCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple MONSTERVECTOR records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of MONSTERVECTOR record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await MONSTERVECTOR.prisma().create_many(
            data=[
                {
                    # data to create a MONSTERVECTOR record
                    'text': 'bgcffadich',
                },
                {
                    # data to create a MONSTERVECTOR record
                    'text': 'fcbichhci',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.MONSTERVECTORWhereUniqueInput,
        include: Optional[types.MONSTERVECTORInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single MONSTERVECTOR record.

        Parameters
        ----------
        where
            MONSTERVECTOR filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned MONSTERVECTOR model

        Returns
        -------
        prisma.models.MONSTERVECTOR
            The deleted MONSTERVECTOR record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        monstervector = await MONSTERVECTOR.prisma().delete(
            where={
                'id': 1266032265,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.MONSTERVECTORWhereUniqueInput,
        include: Optional[types.MONSTERVECTORInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique MONSTERVECTOR record.

        Parameters
        ----------
        where
            MONSTERVECTOR filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned MONSTERVECTOR model

        Returns
        -------
        prisma.models.MONSTERVECTOR
            The found MONSTERVECTOR record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        monstervector = await MONSTERVECTOR.prisma().find_unique(
            where={
                'id': 93253262,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.MONSTERVECTORWhereUniqueInput,
        include: Optional[types.MONSTERVECTORInclude] = None
    ) -> _PrismaModelT:
        """Find a unique MONSTERVECTOR record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            MONSTERVECTOR filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned MONSTERVECTOR model

        Returns
        -------
        prisma.models.MONSTERVECTOR
            The found MONSTERVECTOR record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        monstervector = await MONSTERVECTOR.prisma().find_unique_or_raise(
            where={
                'id': 2053047983,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MONSTERVECTORWhereInput] = None,
        cursor: Optional[types.MONSTERVECTORWhereUniqueInput] = None,
        include: Optional[types.MONSTERVECTORInclude] = None,
        order: Optional[Union[types.MONSTERVECTOROrderByInput, List[types.MONSTERVECTOROrderByInput]]] = None,
        distinct: Optional[List[types.MONSTERVECTORScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple MONSTERVECTOR records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of MONSTERVECTOR records returned
        skip
            Ignore the first N results
        where
            MONSTERVECTOR filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MONSTERVECTOR model
        order
            Order the returned MONSTERVECTOR records by any field
        distinct
            Filter MONSTERVECTOR records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.MONSTERVECTOR]
            The list of all MONSTERVECTOR records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 MONSTERVECTOR records
        monstervectors = await MONSTERVECTOR.prisma().find_many(take=10)

        # find the first 5 MONSTERVECTOR records ordered by the id field
        monstervectors = await MONSTERVECTOR.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MONSTERVECTORWhereInput] = None,
        cursor: Optional[types.MONSTERVECTORWhereUniqueInput] = None,
        include: Optional[types.MONSTERVECTORInclude] = None,
        order: Optional[Union[types.MONSTERVECTOROrderByInput, List[types.MONSTERVECTOROrderByInput]]] = None,
        distinct: Optional[List[types.MONSTERVECTORScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single MONSTERVECTOR record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            MONSTERVECTOR filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MONSTERVECTOR model
        order
            Order the returned MONSTERVECTOR records by any field
        distinct
            Filter MONSTERVECTOR records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.MONSTERVECTOR
            The first MONSTERVECTOR record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second MONSTERVECTOR record ordered by the text field
        monstervector = await MONSTERVECTOR.prisma().find_first(
            skip=1,
            order={
                'text': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MONSTERVECTORWhereInput] = None,
        cursor: Optional[types.MONSTERVECTORWhereUniqueInput] = None,
        include: Optional[types.MONSTERVECTORInclude] = None,
        order: Optional[Union[types.MONSTERVECTOROrderByInput, List[types.MONSTERVECTOROrderByInput]]] = None,
        distinct: Optional[List[types.MONSTERVECTORScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single MONSTERVECTOR record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            MONSTERVECTOR filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MONSTERVECTOR model
        order
            Order the returned MONSTERVECTOR records by any field
        distinct
            Filter MONSTERVECTOR records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.MONSTERVECTOR
            The first MONSTERVECTOR record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second MONSTERVECTOR record ordered by the id field
        monstervector = await MONSTERVECTOR.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.MONSTERVECTORUpdateInput,
        where: types.MONSTERVECTORWhereUniqueInput,
        include: Optional[types.MONSTERVECTORInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single MONSTERVECTOR record.

        Parameters
        ----------
        data
            MONSTERVECTOR record data specifying what to update
        where
            MONSTERVECTOR filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned MONSTERVECTOR model

        Returns
        -------
        prisma.models.MONSTERVECTOR
            The updated MONSTERVECTOR record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        monstervector = await MONSTERVECTOR.prisma().update(
            where={
                'id': 685333180,
            },
            data={
                # data to update the MONSTERVECTOR record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.MONSTERVECTORWhereUniqueInput,
        data: types.MONSTERVECTORUpsertInput,
        include: Optional[types.MONSTERVECTORInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            MONSTERVECTOR filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned MONSTERVECTOR model

        Returns
        -------
        prisma.models.MONSTERVECTOR
            The created or updated MONSTERVECTOR record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        monstervector = await MONSTERVECTOR.prisma().upsert(
            where={
                'id': 127474245,
            },
            data={
                'create': {
                    'id': 127474245,
                    'text': 'fcbichhci',
                },
                'update': {
                    'text': 'fcbichhci',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.MONSTERVECTORUpdateManyMutationInput,
        where: types.MONSTERVECTORWhereInput,
    ) -> int:
        """Update multiple MONSTERVECTOR records

        Parameters
        ----------
        data
            MONSTERVECTOR data to update the selected MONSTERVECTOR records to
        where
            Filter to select the MONSTERVECTOR records to update

        Returns
        -------
        int
            The total number of MONSTERVECTOR records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all MONSTERVECTOR records
        total = await MONSTERVECTOR.prisma().update_many(
            data={
                'text': 'jeijcbhfe'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MONSTERVECTORWhereInput] = None,
        cursor: Optional[types.MONSTERVECTORWhereUniqueInput] = None,
    ) -> int:
        """Count the number of MONSTERVECTOR records present in the database

        Parameters
        ----------
        select
            Select the MONSTERVECTOR fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            MONSTERVECTOR filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MONSTERVECTORCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await MONSTERVECTOR.prisma().count()

        # results: prisma.types.MONSTERVECTORCountAggregateOutput
        results = await MONSTERVECTOR.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.MONSTERVECTORCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MONSTERVECTORWhereInput] = None,
        cursor: Optional[types.MONSTERVECTORWhereUniqueInput] = None,
    ) -> types.MONSTERVECTORCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.MONSTERVECTORCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MONSTERVECTORWhereInput] = None,
        cursor: Optional[types.MONSTERVECTORWhereUniqueInput] = None,
    ) -> Union[int, types.MONSTERVECTORCountAggregateOutput]:
        """Count the number of MONSTERVECTOR records present in the database

        Parameters
        ----------
        select
            Select the MONSTERVECTOR fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            MONSTERVECTOR filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MONSTERVECTORCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await MONSTERVECTOR.prisma().count()

        # results: prisma.types.MONSTERVECTORCountAggregateOutput
        results = await MONSTERVECTOR.prisma().count(
            select={
                '_all': True,
                'text': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.MONSTERVECTORCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.MONSTERVECTORWhereInput] = None
    ) -> int:
        """Delete multiple MONSTERVECTOR records.

        Parameters
        ----------
        where
            Optional MONSTERVECTOR filter to find the records to be deleted

        Returns
        -------
        int
            The total number of MONSTERVECTOR records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all MONSTERVECTOR records
        total = await MONSTERVECTOR.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.MONSTERVECTORScalarFieldKeys'],
        *,
        where: Optional['types.MONSTERVECTORWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.MONSTERVECTORAvgAggregateInput'] = None,
        sum: Optional['types.MONSTERVECTORSumAggregateInput'] = None,
        min: Optional['types.MONSTERVECTORMinAggregateInput'] = None,
        max: Optional['types.MONSTERVECTORMaxAggregateInput'] = None,
        having: Optional['types.MONSTERVECTORScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.MONSTERVECTORCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.MONSTERVECTORScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.MONSTERVECTORScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.MONSTERVECTORGroupByOutput']:
        """Group MONSTERVECTOR records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar MONSTERVECTOR fields to group records by
        where
            MONSTERVECTOR filter to select records
        take
            Limit the maximum number of MONSTERVECTOR records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.MONSTERVECTORGroupByOutput]
            A list of dictionaries representing the MONSTERVECTOR record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group MONSTERVECTOR records by id values
        # and count how many records are in each group
        results = await MONSTERVECTOR.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class MagicItemActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.MagicItem]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await MagicItem.prisma().query_raw(
            'SELECT * FROM MagicItem WHERE id = $1',
            1964990155,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.MagicItem
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await MagicItem.prisma().query_first(
            'SELECT * FROM MagicItem WHERE name = $1',
            'bcciijbibg',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.MagicItemCreateInput,
        include: Optional[types.MagicItemInclude] = None
    ) -> _PrismaModelT:
        """Create a new MagicItem record.

        Parameters
        ----------
        data
            MagicItem record data
        include
            Specifies which relations should be loaded on the returned MagicItem model

        Returns
        -------
        prisma.models.MagicItem
            The created MagicItem record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a MagicItem record from just the required fields
        magicitem = await MagicItem.prisma().create(
            data={
                # data to create a MagicItem record
                'name': 'cffcachfd',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.MagicItemCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple MagicItem records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of MagicItem record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await MagicItem.prisma().create_many(
            data=[
                {
                    # data to create a MagicItem record
                    'name': 'bccdfhdigc',
                },
                {
                    # data to create a MagicItem record
                    'name': 'febcgjbfj',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.MagicItemWhereUniqueInput,
        include: Optional[types.MagicItemInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single MagicItem record.

        Parameters
        ----------
        where
            MagicItem filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned MagicItem model

        Returns
        -------
        prisma.models.MagicItem
            The deleted MagicItem record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        magicitem = await MagicItem.prisma().delete(
            where={
                'id': 1064846676,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.MagicItemWhereUniqueInput,
        include: Optional[types.MagicItemInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique MagicItem record.

        Parameters
        ----------
        where
            MagicItem filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned MagicItem model

        Returns
        -------
        prisma.models.MagicItem
            The found MagicItem record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        magicitem = await MagicItem.prisma().find_unique(
            where={
                'id': 508382461,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.MagicItemWhereUniqueInput,
        include: Optional[types.MagicItemInclude] = None
    ) -> _PrismaModelT:
        """Find a unique MagicItem record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            MagicItem filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned MagicItem model

        Returns
        -------
        prisma.models.MagicItem
            The found MagicItem record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        magicitem = await MagicItem.prisma().find_unique_or_raise(
            where={
                'id': 1024265714,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MagicItemWhereInput] = None,
        cursor: Optional[types.MagicItemWhereUniqueInput] = None,
        include: Optional[types.MagicItemInclude] = None,
        order: Optional[Union[types.MagicItemOrderByInput, List[types.MagicItemOrderByInput]]] = None,
        distinct: Optional[List[types.MagicItemScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple MagicItem records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of MagicItem records returned
        skip
            Ignore the first N results
        where
            MagicItem filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MagicItem model
        order
            Order the returned MagicItem records by any field
        distinct
            Filter MagicItem records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.MagicItem]
            The list of all MagicItem records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 MagicItem records
        magicitems = await MagicItem.prisma().find_many(take=10)

        # find the first 5 MagicItem records ordered by the rarity field
        magicitems = await MagicItem.prisma().find_many(
            take=5,
            order={
                'rarity': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MagicItemWhereInput] = None,
        cursor: Optional[types.MagicItemWhereUniqueInput] = None,
        include: Optional[types.MagicItemInclude] = None,
        order: Optional[Union[types.MagicItemOrderByInput, List[types.MagicItemOrderByInput]]] = None,
        distinct: Optional[List[types.MagicItemScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single MagicItem record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            MagicItem filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MagicItem model
        order
            Order the returned MagicItem records by any field
        distinct
            Filter MagicItem records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.MagicItem
            The first MagicItem record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second MagicItem record ordered by the attunement field
        magicitem = await MagicItem.prisma().find_first(
            skip=1,
            order={
                'attunement': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MagicItemWhereInput] = None,
        cursor: Optional[types.MagicItemWhereUniqueInput] = None,
        include: Optional[types.MagicItemInclude] = None,
        order: Optional[Union[types.MagicItemOrderByInput, List[types.MagicItemOrderByInput]]] = None,
        distinct: Optional[List[types.MagicItemScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single MagicItem record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            MagicItem filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MagicItem model
        order
            Order the returned MagicItem records by any field
        distinct
            Filter MagicItem records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.MagicItem
            The first MagicItem record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second MagicItem record ordered by the Cost__gp_ field
        magicitem = await MagicItem.prisma().find_first_or_raise(
            skip=1,
            order={
                'Cost__gp_': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.MagicItemUpdateInput,
        where: types.MagicItemWhereUniqueInput,
        include: Optional[types.MagicItemInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single MagicItem record.

        Parameters
        ----------
        data
            MagicItem record data specifying what to update
        where
            MagicItem filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned MagicItem model

        Returns
        -------
        prisma.models.MagicItem
            The updated MagicItem record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        magicitem = await MagicItem.prisma().update(
            where={
                'id': 872078403,
            },
            data={
                # data to update the MagicItem record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.MagicItemWhereUniqueInput,
        data: types.MagicItemUpsertInput,
        include: Optional[types.MagicItemInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            MagicItem filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned MagicItem model

        Returns
        -------
        prisma.models.MagicItem
            The created or updated MagicItem record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        magicitem = await MagicItem.prisma().upsert(
            where={
                'id': 1874748096,
            },
            data={
                'create': {
                    'id': 1874748096,
                    'name': 'febcgjbfj',
                },
                'update': {
                    'name': 'febcgjbfj',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.MagicItemUpdateManyMutationInput,
        where: types.MagicItemWhereInput,
    ) -> int:
        """Update multiple MagicItem records

        Parameters
        ----------
        data
            MagicItem data to update the selected MagicItem records to
        where
            Filter to select the MagicItem records to update

        Returns
        -------
        int
            The total number of MagicItem records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all MagicItem records
        total = await MagicItem.prisma().update_many(
            data={
                'note': 'jbgijghgb'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MagicItemWhereInput] = None,
        cursor: Optional[types.MagicItemWhereUniqueInput] = None,
    ) -> int:
        """Count the number of MagicItem records present in the database

        Parameters
        ----------
        select
            Select the MagicItem fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            MagicItem filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MagicItemCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await MagicItem.prisma().count()

        # results: prisma.types.MagicItemCountAggregateOutput
        results = await MagicItem.prisma().count(
            select={
                '_all': True,
                'Armor_Cost': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.MagicItemCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MagicItemWhereInput] = None,
        cursor: Optional[types.MagicItemWhereUniqueInput] = None,
    ) -> types.MagicItemCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.MagicItemCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MagicItemWhereInput] = None,
        cursor: Optional[types.MagicItemWhereUniqueInput] = None,
    ) -> Union[int, types.MagicItemCountAggregateOutput]:
        """Count the number of MagicItem records present in the database

        Parameters
        ----------
        select
            Select the MagicItem fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            MagicItem filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MagicItemCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await MagicItem.prisma().count()

        # results: prisma.types.MagicItemCountAggregateOutput
        results = await MagicItem.prisma().count(
            select={
                '_all': True,
                'Rare_Material': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.MagicItemCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.MagicItemWhereInput] = None
    ) -> int:
        """Delete multiple MagicItem records.

        Parameters
        ----------
        where
            Optional MagicItem filter to find the records to be deleted

        Returns
        -------
        int
            The total number of MagicItem records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all MagicItem records
        total = await MagicItem.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.MagicItemScalarFieldKeys'],
        *,
        where: Optional['types.MagicItemWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.MagicItemAvgAggregateInput'] = None,
        sum: Optional['types.MagicItemSumAggregateInput'] = None,
        min: Optional['types.MagicItemMinAggregateInput'] = None,
        max: Optional['types.MagicItemMaxAggregateInput'] = None,
        having: Optional['types.MagicItemScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.MagicItemCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.MagicItemScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.MagicItemScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.MagicItemGroupByOutput']:
        """Group MagicItem records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar MagicItem fields to group records by
        where
            MagicItem filter to select records
        take
            Limit the maximum number of MagicItem records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.MagicItemGroupByOutput]
            A list of dictionaries representing the MagicItem record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group MagicItem records by AC_Bonus values
        # and count how many records are in each group
        results = await MagicItem.prisma().group_by(
            ['AC_Bonus'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class MonsterActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Monster]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Monster.prisma().query_raw(
            'SELECT * FROM Monster WHERE id = $1',
            'hgjcghfbi',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Monster
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Monster.prisma().query_first(
            'SELECT * FROM Monster WHERE name = $1',
            'icadbcehj',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.MonsterCreateInput,
        include: Optional[types.MonsterInclude] = None
    ) -> _PrismaModelT:
        """Create a new Monster record.

        Parameters
        ----------
        data
            Monster record data
        include
            Specifies which relations should be loaded on the returned Monster model

        Returns
        -------
        prisma.models.Monster
            The created Monster record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Monster record from just the required fields
        monster = await Monster.prisma().create(
            data={
                # data to create a Monster record
                'id': 'jchciaee',
                'name': 'deeificjd',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.MonsterCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Monster records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Monster record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Monster.prisma().create_many(
            data=[
                {
                    # data to create a Monster record
                    'id': 'bbcbhebbda',
                    'name': 'bejfijgcfb',
                },
                {
                    # data to create a Monster record
                    'id': 'caifcbgii',
                    'name': 'igaibbfgj',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.MonsterWhereUniqueInput,
        include: Optional[types.MonsterInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Monster record.

        Parameters
        ----------
        where
            Monster filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Monster model

        Returns
        -------
        prisma.models.Monster
            The deleted Monster record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        monster = await Monster.prisma().delete(
            where={
                'id': 'bggajdcbbi',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.MonsterWhereUniqueInput,
        include: Optional[types.MonsterInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Monster record.

        Parameters
        ----------
        where
            Monster filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Monster model

        Returns
        -------
        prisma.models.Monster
            The found Monster record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        monster = await Monster.prisma().find_unique(
            where={
                'id': 'fcfhgbjed',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.MonsterWhereUniqueInput,
        include: Optional[types.MonsterInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Monster record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Monster filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Monster model

        Returns
        -------
        prisma.models.Monster
            The found Monster record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        monster = await Monster.prisma().find_unique_or_raise(
            where={
                'id': 'hdgcajhjg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MonsterWhereInput] = None,
        cursor: Optional[types.MonsterWhereUniqueInput] = None,
        include: Optional[types.MonsterInclude] = None,
        order: Optional[Union[types.MonsterOrderByInput, List[types.MonsterOrderByInput]]] = None,
        distinct: Optional[List[types.MonsterScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Monster records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Monster records returned
        skip
            Ignore the first N results
        where
            Monster filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Monster model
        order
            Order the returned Monster records by any field
        distinct
            Filter Monster records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Monster]
            The list of all Monster records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Monster records
        monsters = await Monster.prisma().find_many(take=10)

        # find the first 5 Monster records ordered by the size field
        monsters = await Monster.prisma().find_many(
            take=5,
            order={
                'size': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MonsterWhereInput] = None,
        cursor: Optional[types.MonsterWhereUniqueInput] = None,
        include: Optional[types.MonsterInclude] = None,
        order: Optional[Union[types.MonsterOrderByInput, List[types.MonsterOrderByInput]]] = None,
        distinct: Optional[List[types.MonsterScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Monster record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Monster filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Monster model
        order
            Order the returned Monster records by any field
        distinct
            Filter Monster records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Monster
            The first Monster record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Monster record ordered by the type field
        monster = await Monster.prisma().find_first(
            skip=1,
            order={
                'type': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MonsterWhereInput] = None,
        cursor: Optional[types.MonsterWhereUniqueInput] = None,
        include: Optional[types.MonsterInclude] = None,
        order: Optional[Union[types.MonsterOrderByInput, List[types.MonsterOrderByInput]]] = None,
        distinct: Optional[List[types.MonsterScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Monster record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Monster filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Monster model
        order
            Order the returned Monster records by any field
        distinct
            Filter Monster records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Monster
            The first Monster record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Monster record ordered by the alignment field
        monster = await Monster.prisma().find_first_or_raise(
            skip=1,
            order={
                'alignment': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.MonsterUpdateInput,
        where: types.MonsterWhereUniqueInput,
        include: Optional[types.MonsterInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Monster record.

        Parameters
        ----------
        data
            Monster record data specifying what to update
        where
            Monster filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Monster model

        Returns
        -------
        prisma.models.Monster
            The updated Monster record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        monster = await Monster.prisma().update(
            where={
                'id': 'ejdjahicb',
            },
            data={
                # data to update the Monster record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.MonsterWhereUniqueInput,
        data: types.MonsterUpsertInput,
        include: Optional[types.MonsterInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Monster filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Monster model

        Returns
        -------
        prisma.models.Monster
            The created or updated Monster record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        monster = await Monster.prisma().upsert(
            where={
                'id': 'gdjgigfgc',
            },
            data={
                'create': {
                    'id': 'gdjgigfgc',
                    'name': 'igaibbfgj',
                },
                'update': {
                    'name': 'igaibbfgj',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.MonsterUpdateManyMutationInput,
        where: types.MonsterWhereInput,
    ) -> int:
        """Update multiple Monster records

        Parameters
        ----------
        data
            Monster data to update the selected Monster records to
        where
            Filter to select the Monster records to update

        Returns
        -------
        int
            The total number of Monster records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Monster records
        total = await Monster.prisma().update_many(
            data={
                'habitat': 'gfeaahdeh'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MonsterWhereInput] = None,
        cursor: Optional[types.MonsterWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Monster records present in the database

        Parameters
        ----------
        select
            Select the Monster fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Monster filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MonsterCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Monster.prisma().count()

        # results: prisma.types.MonsterCountAggregateOutput
        results = await Monster.prisma().count(
            select={
                '_all': True,
                'mainHabitat': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.MonsterCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MonsterWhereInput] = None,
        cursor: Optional[types.MonsterWhereUniqueInput] = None,
    ) -> types.MonsterCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.MonsterCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MonsterWhereInput] = None,
        cursor: Optional[types.MonsterWhereUniqueInput] = None,
    ) -> Union[int, types.MonsterCountAggregateOutput]:
        """Count the number of Monster records present in the database

        Parameters
        ----------
        select
            Select the Monster fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Monster filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MonsterCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Monster.prisma().count()

        # results: prisma.types.MonsterCountAggregateOutput
        results = await Monster.prisma().count(
            select={
                '_all': True,
                'otherHabitat': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.MonsterCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.MonsterWhereInput] = None
    ) -> int:
        """Delete multiple Monster records.

        Parameters
        ----------
        where
            Optional Monster filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Monster records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Monster records
        total = await Monster.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.MonsterScalarFieldKeys'],
        *,
        where: Optional['types.MonsterWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.MonsterAvgAggregateInput'] = None,
        sum: Optional['types.MonsterSumAggregateInput'] = None,
        min: Optional['types.MonsterMinAggregateInput'] = None,
        max: Optional['types.MonsterMaxAggregateInput'] = None,
        having: Optional['types.MonsterScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.MonsterCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.MonsterScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.MonsterScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.MonsterGroupByOutput']:
        """Group Monster records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Monster fields to group records by
        where
            Monster filter to select records
        take
            Limit the maximum number of Monster records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.MonsterGroupByOutput]
            A list of dictionaries representing the Monster record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Monster records by treasure values
        # and count how many records are in each group
        results = await Monster.prisma().group_by(
            ['treasure'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class RaceActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Race]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Race.prisma().query_raw(
            'SELECT * FROM Race WHERE id = $1',
            1905261552,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Race
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Race.prisma().query_first(
            'SELECT * FROM Race WHERE race = $1',
            'hihegjif',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.RaceCreateInput,
        include: Optional[types.RaceInclude] = None
    ) -> _PrismaModelT:
        """Create a new Race record.

        Parameters
        ----------
        data
            Race record data
        include
            Specifies which relations should be loaded on the returned Race model

        Returns
        -------
        prisma.models.Race
            The created Race record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Race record from just the required fields
        race = await Race.prisma().create(
            data={
                # data to create a Race record
                'race': 'bdjidcidac',
                'source': 'ifgaaagff',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.RaceCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Race records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Race record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Race.prisma().create_many(
            data=[
                {
                    # data to create a Race record
                    'race': 'befcddgjce',
                    'source': 'bfhdbjjgfd',
                },
                {
                    # data to create a Race record
                    'race': 'cabdjadaji',
                    'source': 'faajgfadf',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.RaceWhereUniqueInput,
        include: Optional[types.RaceInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Race record.

        Parameters
        ----------
        where
            Race filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Race model

        Returns
        -------
        prisma.models.Race
            The deleted Race record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        race = await Race.prisma().delete(
            where={
                'id': 1800624392,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.RaceWhereUniqueInput,
        include: Optional[types.RaceInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Race record.

        Parameters
        ----------
        where
            Race filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Race model

        Returns
        -------
        prisma.models.Race
            The found Race record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        race = await Race.prisma().find_unique(
            where={
                'id': 2077067425,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.RaceWhereUniqueInput,
        include: Optional[types.RaceInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Race record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Race filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Race model

        Returns
        -------
        prisma.models.Race
            The found Race record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        race = await Race.prisma().find_unique_or_raise(
            where={
                'id': 1672112838,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RaceWhereInput] = None,
        cursor: Optional[types.RaceWhereUniqueInput] = None,
        include: Optional[types.RaceInclude] = None,
        order: Optional[Union[types.RaceOrderByInput, List[types.RaceOrderByInput]]] = None,
        distinct: Optional[List[types.RaceScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Race records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Race records returned
        skip
            Ignore the first N results
        where
            Race filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Race model
        order
            Order the returned Race records by any field
        distinct
            Filter Race records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Race]
            The list of all Race records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Race records
        races = await Race.prisma().find_many(take=10)

        # find the first 5 Race records ordered by the str field
        races = await Race.prisma().find_many(
            take=5,
            order={
                'str': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RaceWhereInput] = None,
        cursor: Optional[types.RaceWhereUniqueInput] = None,
        include: Optional[types.RaceInclude] = None,
        order: Optional[Union[types.RaceOrderByInput, List[types.RaceOrderByInput]]] = None,
        distinct: Optional[List[types.RaceScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Race record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Race filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Race model
        order
            Order the returned Race records by any field
        distinct
            Filter Race records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Race
            The first Race record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Race record ordered by the dex field
        race = await Race.prisma().find_first(
            skip=1,
            order={
                'dex': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RaceWhereInput] = None,
        cursor: Optional[types.RaceWhereUniqueInput] = None,
        include: Optional[types.RaceInclude] = None,
        order: Optional[Union[types.RaceOrderByInput, List[types.RaceOrderByInput]]] = None,
        distinct: Optional[List[types.RaceScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Race record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Race filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Race model
        order
            Order the returned Race records by any field
        distinct
            Filter Race records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Race
            The first Race record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Race record ordered by the con field
        race = await Race.prisma().find_first_or_raise(
            skip=1,
            order={
                'con': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.RaceUpdateInput,
        where: types.RaceWhereUniqueInput,
        include: Optional[types.RaceInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Race record.

        Parameters
        ----------
        data
            Race record data specifying what to update
        where
            Race filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Race model

        Returns
        -------
        prisma.models.Race
            The updated Race record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        race = await Race.prisma().update(
            where={
                'id': 926677639,
            },
            data={
                # data to update the Race record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.RaceWhereUniqueInput,
        data: types.RaceUpsertInput,
        include: Optional[types.RaceInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Race filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Race model

        Returns
        -------
        prisma.models.Race
            The created or updated Race record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        race = await Race.prisma().upsert(
            where={
                'id': 1447624116,
            },
            data={
                'create': {
                    'id': 1447624116,
                    'race': 'cabdjadaji',
                    'source': 'faajgfadf',
                },
                'update': {
                    'race': 'cabdjadaji',
                    'source': 'faajgfadf',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.RaceUpdateManyMutationInput,
        where: types.RaceWhereInput,
    ) -> int:
        """Update multiple Race records

        Parameters
        ----------
        data
            Race data to update the selected Race records to
        where
            Filter to select the Race records to update

        Returns
        -------
        int
            The total number of Race records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Race records
        total = await Race.prisma().update_many(
            data={
                'int': 'bhdiaidiaf'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RaceWhereInput] = None,
        cursor: Optional[types.RaceWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Race records present in the database

        Parameters
        ----------
        select
            Select the Race fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Race filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RaceCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Race.prisma().count()

        # results: prisma.types.RaceCountAggregateOutput
        results = await Race.prisma().count(
            select={
                '_all': True,
                'wis': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.RaceCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RaceWhereInput] = None,
        cursor: Optional[types.RaceWhereUniqueInput] = None,
    ) -> types.RaceCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.RaceCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RaceWhereInput] = None,
        cursor: Optional[types.RaceWhereUniqueInput] = None,
    ) -> Union[int, types.RaceCountAggregateOutput]:
        """Count the number of Race records present in the database

        Parameters
        ----------
        select
            Select the Race fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Race filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RaceCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Race.prisma().count()

        # results: prisma.types.RaceCountAggregateOutput
        results = await Race.prisma().count(
            select={
                '_all': True,
                'cha': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.RaceCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.RaceWhereInput] = None
    ) -> int:
        """Delete multiple Race records.

        Parameters
        ----------
        where
            Optional Race filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Race records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Race records
        total = await Race.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.RaceScalarFieldKeys'],
        *,
        where: Optional['types.RaceWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.RaceAvgAggregateInput'] = None,
        sum: Optional['types.RaceSumAggregateInput'] = None,
        min: Optional['types.RaceMinAggregateInput'] = None,
        max: Optional['types.RaceMaxAggregateInput'] = None,
        having: Optional['types.RaceScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.RaceCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.RaceScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.RaceScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.RaceGroupByOutput']:
        """Group Race records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Race fields to group records by
        where
            Race filter to select records
        take
            Limit the maximum number of Race records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.RaceGroupByOutput]
            A list of dictionaries representing the Race record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Race records by special values
        # and count how many records are in each group
        results = await Race.prisma().group_by(
            ['special'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class SESSIONActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.SESSION]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await SESSION.prisma().query_raw(
            'SELECT * FROM SESSION WHERE id = $1',
            340946258,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.SESSION
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await SESSION.prisma().query_first(
            'SELECT * FROM SESSION WHERE sessionID = $1',
            601077795,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.SESSIONCreateInput,
        include: Optional[types.SESSIONInclude] = None
    ) -> _PrismaModelT:
        """Create a new SESSION record.

        Parameters
        ----------
        data
            SESSION record data
        include
            Specifies which relations should be loaded on the returned SESSION model

        Returns
        -------
        prisma.models.SESSION
            The created SESSION record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a SESSION record from just the required fields
        session = await SESSION.prisma().create(
            data={
                # data to create a SESSION record
                'sessionID': 290603296,
                'text': 'bifficggej',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.SESSIONCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple SESSION records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of SESSION record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await SESSION.prisma().create_many(
            data=[
                {
                    # data to create a SESSION record
                    'sessionID': 1611009182,
                    'text': 'eegghdhjb',
                },
                {
                    # data to create a SESSION record
                    'sessionID': 300568396,
                    'text': 'gdcgcgagj',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.SESSIONWhereUniqueInput,
        include: Optional[types.SESSIONInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single SESSION record.

        Parameters
        ----------
        where
            SESSION filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned SESSION model

        Returns
        -------
        prisma.models.SESSION
            The deleted SESSION record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        session = await SESSION.prisma().delete(
            where={
                'id': 1724011690,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.SESSIONWhereUniqueInput,
        include: Optional[types.SESSIONInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique SESSION record.

        Parameters
        ----------
        where
            SESSION filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned SESSION model

        Returns
        -------
        prisma.models.SESSION
            The found SESSION record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        session = await SESSION.prisma().find_unique(
            where={
                'id': 470157467,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.SESSIONWhereUniqueInput,
        include: Optional[types.SESSIONInclude] = None
    ) -> _PrismaModelT:
        """Find a unique SESSION record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            SESSION filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned SESSION model

        Returns
        -------
        prisma.models.SESSION
            The found SESSION record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        session = await SESSION.prisma().find_unique_or_raise(
            where={
                'id': 1209209912,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SESSIONWhereInput] = None,
        cursor: Optional[types.SESSIONWhereUniqueInput] = None,
        include: Optional[types.SESSIONInclude] = None,
        order: Optional[Union[types.SESSIONOrderByInput, List[types.SESSIONOrderByInput]]] = None,
        distinct: Optional[List[types.SESSIONScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple SESSION records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of SESSION records returned
        skip
            Ignore the first N results
        where
            SESSION filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned SESSION model
        order
            Order the returned SESSION records by any field
        distinct
            Filter SESSION records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.SESSION]
            The list of all SESSION records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 SESSION records
        sessions = await SESSION.prisma().find_many(take=10)

        # find the first 5 SESSION records ordered by the text field
        sessions = await SESSION.prisma().find_many(
            take=5,
            order={
                'text': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SESSIONWhereInput] = None,
        cursor: Optional[types.SESSIONWhereUniqueInput] = None,
        include: Optional[types.SESSIONInclude] = None,
        order: Optional[Union[types.SESSIONOrderByInput, List[types.SESSIONOrderByInput]]] = None,
        distinct: Optional[List[types.SESSIONScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single SESSION record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            SESSION filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned SESSION model
        order
            Order the returned SESSION records by any field
        distinct
            Filter SESSION records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.SESSION
            The first SESSION record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second SESSION record ordered by the id field
        session = await SESSION.prisma().find_first(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SESSIONWhereInput] = None,
        cursor: Optional[types.SESSIONWhereUniqueInput] = None,
        include: Optional[types.SESSIONInclude] = None,
        order: Optional[Union[types.SESSIONOrderByInput, List[types.SESSIONOrderByInput]]] = None,
        distinct: Optional[List[types.SESSIONScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single SESSION record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            SESSION filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned SESSION model
        order
            Order the returned SESSION records by any field
        distinct
            Filter SESSION records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.SESSION
            The first SESSION record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second SESSION record ordered by the sessionID field
        session = await SESSION.prisma().find_first_or_raise(
            skip=1,
            order={
                'sessionID': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.SESSIONUpdateInput,
        where: types.SESSIONWhereUniqueInput,
        include: Optional[types.SESSIONInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single SESSION record.

        Parameters
        ----------
        data
            SESSION record data specifying what to update
        where
            SESSION filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned SESSION model

        Returns
        -------
        prisma.models.SESSION
            The updated SESSION record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        session = await SESSION.prisma().update(
            where={
                'id': 1536744465,
            },
            data={
                # data to update the SESSION record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.SESSIONWhereUniqueInput,
        data: types.SESSIONUpsertInput,
        include: Optional[types.SESSIONInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            SESSION filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned SESSION model

        Returns
        -------
        prisma.models.SESSION
            The created or updated SESSION record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        session = await SESSION.prisma().upsert(
            where={
                'id': 424218998,
            },
            data={
                'create': {
                    'id': 424218998,
                    'sessionID': 300568396,
                    'text': 'gdcgcgagj',
                },
                'update': {
                    'sessionID': 300568396,
                    'text': 'gdcgcgagj',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.SESSIONUpdateManyMutationInput,
        where: types.SESSIONWhereInput,
    ) -> int:
        """Update multiple SESSION records

        Parameters
        ----------
        data
            SESSION data to update the selected SESSION records to
        where
            Filter to select the SESSION records to update

        Returns
        -------
        int
            The total number of SESSION records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all SESSION records
        total = await SESSION.prisma().update_many(
            data={
                'text': 'cbcfgdcdhf'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SESSIONWhereInput] = None,
        cursor: Optional[types.SESSIONWhereUniqueInput] = None,
    ) -> int:
        """Count the number of SESSION records present in the database

        Parameters
        ----------
        select
            Select the SESSION fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            SESSION filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SESSIONCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await SESSION.prisma().count()

        # results: prisma.types.SESSIONCountAggregateOutput
        results = await SESSION.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.SESSIONCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SESSIONWhereInput] = None,
        cursor: Optional[types.SESSIONWhereUniqueInput] = None,
    ) -> types.SESSIONCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.SESSIONCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SESSIONWhereInput] = None,
        cursor: Optional[types.SESSIONWhereUniqueInput] = None,
    ) -> Union[int, types.SESSIONCountAggregateOutput]:
        """Count the number of SESSION records present in the database

        Parameters
        ----------
        select
            Select the SESSION fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            SESSION filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SESSIONCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await SESSION.prisma().count()

        # results: prisma.types.SESSIONCountAggregateOutput
        results = await SESSION.prisma().count(
            select={
                '_all': True,
                'sessionID': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.SESSIONCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.SESSIONWhereInput] = None
    ) -> int:
        """Delete multiple SESSION records.

        Parameters
        ----------
        where
            Optional SESSION filter to find the records to be deleted

        Returns
        -------
        int
            The total number of SESSION records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all SESSION records
        total = await SESSION.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.SESSIONScalarFieldKeys'],
        *,
        where: Optional['types.SESSIONWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.SESSIONAvgAggregateInput'] = None,
        sum: Optional['types.SESSIONSumAggregateInput'] = None,
        min: Optional['types.SESSIONMinAggregateInput'] = None,
        max: Optional['types.SESSIONMaxAggregateInput'] = None,
        having: Optional['types.SESSIONScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.SESSIONCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.SESSIONScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.SESSIONScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.SESSIONGroupByOutput']:
        """Group SESSION records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar SESSION fields to group records by
        where
            SESSION filter to select records
        take
            Limit the maximum number of SESSION records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.SESSIONGroupByOutput]
            A list of dictionaries representing the SESSION record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group SESSION records by text values
        # and count how many records are in each group
        results = await SESSION.prisma().group_by(
            ['text'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class SPELLSVECTORActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.SPELLSVECTOR]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await SPELLSVECTOR.prisma().query_raw(
            'SELECT * FROM SPELLSVECTOR WHERE id = $1',
            536951780,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.SPELLSVECTOR
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await SPELLSVECTOR.prisma().query_first(
            'SELECT * FROM SPELLSVECTOR WHERE text = $1',
            'jcehcdchh',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.SPELLSVECTORCreateInput,
        include: Optional[types.SPELLSVECTORInclude] = None
    ) -> _PrismaModelT:
        """Create a new SPELLSVECTOR record.

        Parameters
        ----------
        data
            SPELLSVECTOR record data
        include
            Specifies which relations should be loaded on the returned SPELLSVECTOR model

        Returns
        -------
        prisma.models.SPELLSVECTOR
            The created SPELLSVECTOR record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a SPELLSVECTOR record from just the required fields
        spellsvector = await SPELLSVECTOR.prisma().create(
            data={
                # data to create a SPELLSVECTOR record
                'text': 'bgcbjdhjcc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.SPELLSVECTORCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple SPELLSVECTOR records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of SPELLSVECTOR record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await SPELLSVECTOR.prisma().create_many(
            data=[
                {
                    # data to create a SPELLSVECTOR record
                    'text': 'bieiidcabj',
                },
                {
                    # data to create a SPELLSVECTOR record
                    'text': 'bjcbfcieaa',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.SPELLSVECTORWhereUniqueInput,
        include: Optional[types.SPELLSVECTORInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single SPELLSVECTOR record.

        Parameters
        ----------
        where
            SPELLSVECTOR filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned SPELLSVECTOR model

        Returns
        -------
        prisma.models.SPELLSVECTOR
            The deleted SPELLSVECTOR record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        spellsvector = await SPELLSVECTOR.prisma().delete(
            where={
                'id': 2100427849,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.SPELLSVECTORWhereUniqueInput,
        include: Optional[types.SPELLSVECTORInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique SPELLSVECTOR record.

        Parameters
        ----------
        where
            SPELLSVECTOR filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned SPELLSVECTOR model

        Returns
        -------
        prisma.models.SPELLSVECTOR
            The found SPELLSVECTOR record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        spellsvector = await SPELLSVECTOR.prisma().find_unique(
            where={
                'id': 849140046,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.SPELLSVECTORWhereUniqueInput,
        include: Optional[types.SPELLSVECTORInclude] = None
    ) -> _PrismaModelT:
        """Find a unique SPELLSVECTOR record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            SPELLSVECTOR filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned SPELLSVECTOR model

        Returns
        -------
        prisma.models.SPELLSVECTOR
            The found SPELLSVECTOR record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        spellsvector = await SPELLSVECTOR.prisma().find_unique_or_raise(
            where={
                'id': 928152175,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SPELLSVECTORWhereInput] = None,
        cursor: Optional[types.SPELLSVECTORWhereUniqueInput] = None,
        include: Optional[types.SPELLSVECTORInclude] = None,
        order: Optional[Union[types.SPELLSVECTOROrderByInput, List[types.SPELLSVECTOROrderByInput]]] = None,
        distinct: Optional[List[types.SPELLSVECTORScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple SPELLSVECTOR records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of SPELLSVECTOR records returned
        skip
            Ignore the first N results
        where
            SPELLSVECTOR filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned SPELLSVECTOR model
        order
            Order the returned SPELLSVECTOR records by any field
        distinct
            Filter SPELLSVECTOR records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.SPELLSVECTOR]
            The list of all SPELLSVECTOR records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 SPELLSVECTOR records
        spellsvectors = await SPELLSVECTOR.prisma().find_many(take=10)

        # find the first 5 SPELLSVECTOR records ordered by the id field
        spellsvectors = await SPELLSVECTOR.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SPELLSVECTORWhereInput] = None,
        cursor: Optional[types.SPELLSVECTORWhereUniqueInput] = None,
        include: Optional[types.SPELLSVECTORInclude] = None,
        order: Optional[Union[types.SPELLSVECTOROrderByInput, List[types.SPELLSVECTOROrderByInput]]] = None,
        distinct: Optional[List[types.SPELLSVECTORScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single SPELLSVECTOR record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            SPELLSVECTOR filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned SPELLSVECTOR model
        order
            Order the returned SPELLSVECTOR records by any field
        distinct
            Filter SPELLSVECTOR records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.SPELLSVECTOR
            The first SPELLSVECTOR record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second SPELLSVECTOR record ordered by the text field
        spellsvector = await SPELLSVECTOR.prisma().find_first(
            skip=1,
            order={
                'text': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SPELLSVECTORWhereInput] = None,
        cursor: Optional[types.SPELLSVECTORWhereUniqueInput] = None,
        include: Optional[types.SPELLSVECTORInclude] = None,
        order: Optional[Union[types.SPELLSVECTOROrderByInput, List[types.SPELLSVECTOROrderByInput]]] = None,
        distinct: Optional[List[types.SPELLSVECTORScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single SPELLSVECTOR record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            SPELLSVECTOR filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned SPELLSVECTOR model
        order
            Order the returned SPELLSVECTOR records by any field
        distinct
            Filter SPELLSVECTOR records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.SPELLSVECTOR
            The first SPELLSVECTOR record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second SPELLSVECTOR record ordered by the id field
        spellsvector = await SPELLSVECTOR.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.SPELLSVECTORUpdateInput,
        where: types.SPELLSVECTORWhereUniqueInput,
        include: Optional[types.SPELLSVECTORInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single SPELLSVECTOR record.

        Parameters
        ----------
        data
            SPELLSVECTOR record data specifying what to update
        where
            SPELLSVECTOR filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned SPELLSVECTOR model

        Returns
        -------
        prisma.models.SPELLSVECTOR
            The updated SPELLSVECTOR record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        spellsvector = await SPELLSVECTOR.prisma().update(
            where={
                'id': 273032060,
            },
            data={
                # data to update the SPELLSVECTOR record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.SPELLSVECTORWhereUniqueInput,
        data: types.SPELLSVECTORUpsertInput,
        include: Optional[types.SPELLSVECTORInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            SPELLSVECTOR filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned SPELLSVECTOR model

        Returns
        -------
        prisma.models.SPELLSVECTOR
            The created or updated SPELLSVECTOR record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        spellsvector = await SPELLSVECTOR.prisma().upsert(
            where={
                'id': 982848517,
            },
            data={
                'create': {
                    'id': 982848517,
                    'text': 'bjcbfcieaa',
                },
                'update': {
                    'text': 'bjcbfcieaa',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.SPELLSVECTORUpdateManyMutationInput,
        where: types.SPELLSVECTORWhereInput,
    ) -> int:
        """Update multiple SPELLSVECTOR records

        Parameters
        ----------
        data
            SPELLSVECTOR data to update the selected SPELLSVECTOR records to
        where
            Filter to select the SPELLSVECTOR records to update

        Returns
        -------
        int
            The total number of SPELLSVECTOR records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all SPELLSVECTOR records
        total = await SPELLSVECTOR.prisma().update_many(
            data={
                'text': 'fbahdheji'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SPELLSVECTORWhereInput] = None,
        cursor: Optional[types.SPELLSVECTORWhereUniqueInput] = None,
    ) -> int:
        """Count the number of SPELLSVECTOR records present in the database

        Parameters
        ----------
        select
            Select the SPELLSVECTOR fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            SPELLSVECTOR filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SPELLSVECTORCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await SPELLSVECTOR.prisma().count()

        # results: prisma.types.SPELLSVECTORCountAggregateOutput
        results = await SPELLSVECTOR.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.SPELLSVECTORCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SPELLSVECTORWhereInput] = None,
        cursor: Optional[types.SPELLSVECTORWhereUniqueInput] = None,
    ) -> types.SPELLSVECTORCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.SPELLSVECTORCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SPELLSVECTORWhereInput] = None,
        cursor: Optional[types.SPELLSVECTORWhereUniqueInput] = None,
    ) -> Union[int, types.SPELLSVECTORCountAggregateOutput]:
        """Count the number of SPELLSVECTOR records present in the database

        Parameters
        ----------
        select
            Select the SPELLSVECTOR fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            SPELLSVECTOR filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SPELLSVECTORCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await SPELLSVECTOR.prisma().count()

        # results: prisma.types.SPELLSVECTORCountAggregateOutput
        results = await SPELLSVECTOR.prisma().count(
            select={
                '_all': True,
                'text': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.SPELLSVECTORCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.SPELLSVECTORWhereInput] = None
    ) -> int:
        """Delete multiple SPELLSVECTOR records.

        Parameters
        ----------
        where
            Optional SPELLSVECTOR filter to find the records to be deleted

        Returns
        -------
        int
            The total number of SPELLSVECTOR records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all SPELLSVECTOR records
        total = await SPELLSVECTOR.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.SPELLSVECTORScalarFieldKeys'],
        *,
        where: Optional['types.SPELLSVECTORWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.SPELLSVECTORAvgAggregateInput'] = None,
        sum: Optional['types.SPELLSVECTORSumAggregateInput'] = None,
        min: Optional['types.SPELLSVECTORMinAggregateInput'] = None,
        max: Optional['types.SPELLSVECTORMaxAggregateInput'] = None,
        having: Optional['types.SPELLSVECTORScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.SPELLSVECTORCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.SPELLSVECTORScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.SPELLSVECTORScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.SPELLSVECTORGroupByOutput']:
        """Group SPELLSVECTOR records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar SPELLSVECTOR fields to group records by
        where
            SPELLSVECTOR filter to select records
        take
            Limit the maximum number of SPELLSVECTOR records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.SPELLSVECTORGroupByOutput]
            A list of dictionaries representing the SPELLSVECTOR record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group SPELLSVECTOR records by id values
        # and count how many records are in each group
        results = await SPELLSVECTOR.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class SpellActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Spell]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Spell.prisma().query_raw(
            'SELECT * FROM Spell WHERE id = $1',
            2117488267,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Spell
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Spell.prisma().query_first(
            'SELECT * FROM Spell WHERE name = $1',
            'beabjeejdg',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.SpellCreateInput,
        include: Optional[types.SpellInclude] = None
    ) -> _PrismaModelT:
        """Create a new Spell record.

        Parameters
        ----------
        data
            Spell record data
        include
            Specifies which relations should be loaded on the returned Spell model

        Returns
        -------
        prisma.models.Spell
            The created Spell record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Spell record from just the required fields
        spell = await Spell.prisma().create(
            data={
                # data to create a Spell record
                'name': 'bcjhgahffd',
                'level': 'fbjeiiffa',
                'school': 'jhgidcgbf',
                'castingTime': 'bgjgecfejc',
                'duration': 'bgjcgchib',
                'range': 'bacdaibgfa',
                'damageEffect': 'dchgibach',
                'source': 'fchheijjc',
                'details': 'cacjdfhejh',
                'link': 'bdbifjhbbi',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.SpellCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Spell records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Spell record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Spell.prisma().create_many(
            data=[
                {
                    # data to create a Spell record
                    'name': 'cbccbbcdfb',
                    'level': 'bacejedaca',
                    'school': 'bhbhdahfaj',
                    'castingTime': 'bfjibceaec',
                    'duration': 'ibhgcdbgd',
                    'range': 'badaffhddg',
                    'damageEffect': 'bbdbfcfihd',
                    'source': 'cbagggbji',
                    'details': 'bchgafhjed',
                    'link': 'heffgjdei',
                },
                {
                    # data to create a Spell record
                    'name': 'dahihgbeb',
                    'level': 'bgheaejbcc',
                    'school': 'bfcgifeged',
                    'castingTime': 'jfiahhbae',
                    'duration': 'bfbdafajcb',
                    'range': 'caeghehde',
                    'damageEffect': 'caghgfbggd',
                    'source': 'bbidjbbjaa',
                    'details': 'bfijhaejdd',
                    'link': 'bcedehfiji',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.SpellWhereUniqueInput,
        include: Optional[types.SpellInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Spell record.

        Parameters
        ----------
        where
            Spell filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Spell model

        Returns
        -------
        prisma.models.Spell
            The deleted Spell record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        spell = await Spell.prisma().delete(
            where={
                'id': 1369828971,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.SpellWhereUniqueInput,
        include: Optional[types.SpellInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Spell record.

        Parameters
        ----------
        where
            Spell filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Spell model

        Returns
        -------
        prisma.models.Spell
            The found Spell record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        spell = await Spell.prisma().find_unique(
            where={
                'id': 1678593480,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.SpellWhereUniqueInput,
        include: Optional[types.SpellInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Spell record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Spell filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Spell model

        Returns
        -------
        prisma.models.Spell
            The found Spell record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        spell = await Spell.prisma().find_unique_or_raise(
            where={
                'id': 403521121,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SpellWhereInput] = None,
        cursor: Optional[types.SpellWhereUniqueInput] = None,
        include: Optional[types.SpellInclude] = None,
        order: Optional[Union[types.SpellOrderByInput, List[types.SpellOrderByInput]]] = None,
        distinct: Optional[List[types.SpellScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Spell records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Spell records returned
        skip
            Ignore the first N results
        where
            Spell filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Spell model
        order
            Order the returned Spell records by any field
        distinct
            Filter Spell records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Spell]
            The list of all Spell records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Spell records
        spells = await Spell.prisma().find_many(take=10)

        # find the first 5 Spell records ordered by the level field
        spells = await Spell.prisma().find_many(
            take=5,
            order={
                'level': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SpellWhereInput] = None,
        cursor: Optional[types.SpellWhereUniqueInput] = None,
        include: Optional[types.SpellInclude] = None,
        order: Optional[Union[types.SpellOrderByInput, List[types.SpellOrderByInput]]] = None,
        distinct: Optional[List[types.SpellScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Spell record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Spell filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Spell model
        order
            Order the returned Spell records by any field
        distinct
            Filter Spell records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Spell
            The first Spell record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Spell record ordered by the school field
        spell = await Spell.prisma().find_first(
            skip=1,
            order={
                'school': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SpellWhereInput] = None,
        cursor: Optional[types.SpellWhereUniqueInput] = None,
        include: Optional[types.SpellInclude] = None,
        order: Optional[Union[types.SpellOrderByInput, List[types.SpellOrderByInput]]] = None,
        distinct: Optional[List[types.SpellScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Spell record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Spell filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Spell model
        order
            Order the returned Spell records by any field
        distinct
            Filter Spell records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Spell
            The first Spell record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Spell record ordered by the castingTime field
        spell = await Spell.prisma().find_first_or_raise(
            skip=1,
            order={
                'castingTime': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.SpellUpdateInput,
        where: types.SpellWhereUniqueInput,
        include: Optional[types.SpellInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Spell record.

        Parameters
        ----------
        data
            Spell record data specifying what to update
        where
            Spell filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Spell model

        Returns
        -------
        prisma.models.Spell
            The updated Spell record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        spell = await Spell.prisma().update(
            where={
                'id': 648760710,
            },
            data={
                # data to update the Spell record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.SpellWhereUniqueInput,
        data: types.SpellUpsertInput,
        include: Optional[types.SpellInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Spell filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Spell model

        Returns
        -------
        prisma.models.Spell
            The created or updated Spell record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        spell = await Spell.prisma().upsert(
            where={
                'id': 607323719,
            },
            data={
                'create': {
                    'id': 607323719,
                    'name': 'dahihgbeb',
                    'level': 'bgheaejbcc',
                    'school': 'bfcgifeged',
                    'castingTime': 'jfiahhbae',
                    'duration': 'bfbdafajcb',
                    'range': 'caeghehde',
                    'damageEffect': 'caghgfbggd',
                    'source': 'bbidjbbjaa',
                    'details': 'bfijhaejdd',
                    'link': 'bcedehfiji',
                },
                'update': {
                    'name': 'dahihgbeb',
                    'level': 'bgheaejbcc',
                    'school': 'bfcgifeged',
                    'castingTime': 'jfiahhbae',
                    'duration': 'bfbdafajcb',
                    'range': 'caeghehde',
                    'damageEffect': 'caghgfbggd',
                    'source': 'bbidjbbjaa',
                    'details': 'bfijhaejdd',
                    'link': 'bcedehfiji',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.SpellUpdateManyMutationInput,
        where: types.SpellWhereInput,
    ) -> int:
        """Update multiple Spell records

        Parameters
        ----------
        data
            Spell data to update the selected Spell records to
        where
            Filter to select the Spell records to update

        Returns
        -------
        int
            The total number of Spell records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Spell records
        total = await Spell.prisma().update_many(
            data={
                'duration': 'begiijahea'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SpellWhereInput] = None,
        cursor: Optional[types.SpellWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Spell records present in the database

        Parameters
        ----------
        select
            Select the Spell fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Spell filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SpellCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Spell.prisma().count()

        # results: prisma.types.SpellCountAggregateOutput
        results = await Spell.prisma().count(
            select={
                '_all': True,
                'range': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.SpellCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SpellWhereInput] = None,
        cursor: Optional[types.SpellWhereUniqueInput] = None,
    ) -> types.SpellCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.SpellCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SpellWhereInput] = None,
        cursor: Optional[types.SpellWhereUniqueInput] = None,
    ) -> Union[int, types.SpellCountAggregateOutput]:
        """Count the number of Spell records present in the database

        Parameters
        ----------
        select
            Select the Spell fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Spell filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SpellCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Spell.prisma().count()

        # results: prisma.types.SpellCountAggregateOutput
        results = await Spell.prisma().count(
            select={
                '_all': True,
                'area': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.SpellCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.SpellWhereInput] = None
    ) -> int:
        """Delete multiple Spell records.

        Parameters
        ----------
        where
            Optional Spell filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Spell records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Spell records
        total = await Spell.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.SpellScalarFieldKeys'],
        *,
        where: Optional['types.SpellWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.SpellAvgAggregateInput'] = None,
        sum: Optional['types.SpellSumAggregateInput'] = None,
        min: Optional['types.SpellMinAggregateInput'] = None,
        max: Optional['types.SpellMaxAggregateInput'] = None,
        having: Optional['types.SpellScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.SpellCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.SpellScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.SpellScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.SpellGroupByOutput']:
        """Group Spell records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Spell fields to group records by
        where
            Spell filter to select records
        take
            Limit the maximum number of Spell records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.SpellGroupByOutput]
            A list of dictionaries representing the Spell record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Spell records by attack values
        # and count how many records are in each group
        results = await Spell.prisma().group_by(
            ['attack'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class USERDATAActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.USERDATA]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await USERDATA.prisma().query_raw(
            'SELECT * FROM USERDATA WHERE id = $1',
            629039005,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.USERDATA
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await USERDATA.prisma().query_first(
            'SELECT * FROM USERDATA WHERE name = $1',
            'bcbebgiaic',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.USERDATACreateInput,
        include: Optional[types.USERDATAInclude] = None
    ) -> _PrismaModelT:
        """Create a new USERDATA record.

        Parameters
        ----------
        data
            USERDATA record data
        include
            Specifies which relations should be loaded on the returned USERDATA model

        Returns
        -------
        prisma.models.USERDATA
            The created USERDATA record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a USERDATA record from just the required fields
        userdata = await USERDATA.prisma().create(
            data={
                # data to create a USERDATA record
                'name': 'ijigbdcbj',
                'username': 'gfidhicai',
                'password': 'jfegcaafh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.USERDATACreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple USERDATA records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of USERDATA record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await USERDATA.prisma().create_many(
            data=[
                {
                    # data to create a USERDATA record
                    'name': 'bcbeiajjfa',
                    'username': 'baehicaajf',
                    'password': 'bdachdeiga',
                },
                {
                    # data to create a USERDATA record
                    'name': 'ijdafccef',
                    'username': 'ciaaiddag',
                    'password': 'fejggijff',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.USERDATAWhereUniqueInput,
        include: Optional[types.USERDATAInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single USERDATA record.

        Parameters
        ----------
        where
            USERDATA filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned USERDATA model

        Returns
        -------
        prisma.models.USERDATA
            The deleted USERDATA record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userdata = await USERDATA.prisma().delete(
            where={
                'id': 76790008,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.USERDATAWhereUniqueInput,
        include: Optional[types.USERDATAInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique USERDATA record.

        Parameters
        ----------
        where
            USERDATA filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned USERDATA model

        Returns
        -------
        prisma.models.USERDATA
            The found USERDATA record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userdata = await USERDATA.prisma().find_unique(
            where={
                'id': 2098299345,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.USERDATAWhereUniqueInput,
        include: Optional[types.USERDATAInclude] = None
    ) -> _PrismaModelT:
        """Find a unique USERDATA record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            USERDATA filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned USERDATA model

        Returns
        -------
        prisma.models.USERDATA
            The found USERDATA record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userdata = await USERDATA.prisma().find_unique_or_raise(
            where={
                'id': 245900342,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.USERDATAWhereInput] = None,
        cursor: Optional[types.USERDATAWhereUniqueInput] = None,
        include: Optional[types.USERDATAInclude] = None,
        order: Optional[Union[types.USERDATAOrderByInput, List[types.USERDATAOrderByInput]]] = None,
        distinct: Optional[List[types.USERDATAScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple USERDATA records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of USERDATA records returned
        skip
            Ignore the first N results
        where
            USERDATA filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned USERDATA model
        order
            Order the returned USERDATA records by any field
        distinct
            Filter USERDATA records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.USERDATA]
            The list of all USERDATA records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 USERDATA records
        userdatas = await USERDATA.prisma().find_many(take=10)

        # find the first 5 USERDATA records ordered by the username field
        userdatas = await USERDATA.prisma().find_many(
            take=5,
            order={
                'username': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.USERDATAWhereInput] = None,
        cursor: Optional[types.USERDATAWhereUniqueInput] = None,
        include: Optional[types.USERDATAInclude] = None,
        order: Optional[Union[types.USERDATAOrderByInput, List[types.USERDATAOrderByInput]]] = None,
        distinct: Optional[List[types.USERDATAScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single USERDATA record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            USERDATA filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned USERDATA model
        order
            Order the returned USERDATA records by any field
        distinct
            Filter USERDATA records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.USERDATA
            The first USERDATA record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second USERDATA record ordered by the password field
        userdata = await USERDATA.prisma().find_first(
            skip=1,
            order={
                'password': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.USERDATAWhereInput] = None,
        cursor: Optional[types.USERDATAWhereUniqueInput] = None,
        include: Optional[types.USERDATAInclude] = None,
        order: Optional[Union[types.USERDATAOrderByInput, List[types.USERDATAOrderByInput]]] = None,
        distinct: Optional[List[types.USERDATAScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single USERDATA record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            USERDATA filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned USERDATA model
        order
            Order the returned USERDATA records by any field
        distinct
            Filter USERDATA records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.USERDATA
            The first USERDATA record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second USERDATA record ordered by the id field
        userdata = await USERDATA.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.USERDATAUpdateInput,
        where: types.USERDATAWhereUniqueInput,
        include: Optional[types.USERDATAInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single USERDATA record.

        Parameters
        ----------
        data
            USERDATA record data specifying what to update
        where
            USERDATA filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned USERDATA model

        Returns
        -------
        prisma.models.USERDATA
            The updated USERDATA record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        userdata = await USERDATA.prisma().update(
            where={
                'id': 811863863,
            },
            data={
                # data to update the USERDATA record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.USERDATAWhereUniqueInput,
        data: types.USERDATAUpsertInput,
        include: Optional[types.USERDATAInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            USERDATA filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned USERDATA model

        Returns
        -------
        prisma.models.USERDATA
            The created or updated USERDATA record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userdata = await USERDATA.prisma().upsert(
            where={
                'id': 1388801188,
            },
            data={
                'create': {
                    'id': 1388801188,
                    'name': 'ijdafccef',
                    'username': 'ciaaiddag',
                    'password': 'fejggijff',
                },
                'update': {
                    'name': 'ijdafccef',
                    'username': 'ciaaiddag',
                    'password': 'fejggijff',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.USERDATAUpdateManyMutationInput,
        where: types.USERDATAWhereInput,
    ) -> int:
        """Update multiple USERDATA records

        Parameters
        ----------
        data
            USERDATA data to update the selected USERDATA records to
        where
            Filter to select the USERDATA records to update

        Returns
        -------
        int
            The total number of USERDATA records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all USERDATA records
        total = await USERDATA.prisma().update_many(
            data={
                'name': 'hfcfhhadh'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.USERDATAWhereInput] = None,
        cursor: Optional[types.USERDATAWhereUniqueInput] = None,
    ) -> int:
        """Count the number of USERDATA records present in the database

        Parameters
        ----------
        select
            Select the USERDATA fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            USERDATA filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.USERDATACountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await USERDATA.prisma().count()

        # results: prisma.types.USERDATACountAggregateOutput
        results = await USERDATA.prisma().count(
            select={
                '_all': True,
                'username': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.USERDATACountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.USERDATAWhereInput] = None,
        cursor: Optional[types.USERDATAWhereUniqueInput] = None,
    ) -> types.USERDATACountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.USERDATACountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.USERDATAWhereInput] = None,
        cursor: Optional[types.USERDATAWhereUniqueInput] = None,
    ) -> Union[int, types.USERDATACountAggregateOutput]:
        """Count the number of USERDATA records present in the database

        Parameters
        ----------
        select
            Select the USERDATA fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            USERDATA filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.USERDATACountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await USERDATA.prisma().count()

        # results: prisma.types.USERDATACountAggregateOutput
        results = await USERDATA.prisma().count(
            select={
                '_all': True,
                'password': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.USERDATACountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.USERDATAWhereInput] = None
    ) -> int:
        """Delete multiple USERDATA records.

        Parameters
        ----------
        where
            Optional USERDATA filter to find the records to be deleted

        Returns
        -------
        int
            The total number of USERDATA records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all USERDATA records
        total = await USERDATA.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.USERDATAScalarFieldKeys'],
        *,
        where: Optional['types.USERDATAWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.USERDATAAvgAggregateInput'] = None,
        sum: Optional['types.USERDATASumAggregateInput'] = None,
        min: Optional['types.USERDATAMinAggregateInput'] = None,
        max: Optional['types.USERDATAMaxAggregateInput'] = None,
        having: Optional['types.USERDATAScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.USERDATACountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.USERDATAScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.USERDATAScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.USERDATAGroupByOutput']:
        """Group USERDATA records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar USERDATA fields to group records by
        where
            USERDATA filter to select records
        take
            Limit the maximum number of USERDATA records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.USERDATAGroupByOutput]
            A list of dictionaries representing the USERDATA record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group USERDATA records by id values
        # and count how many records are in each group
        results = await USERDATA.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models