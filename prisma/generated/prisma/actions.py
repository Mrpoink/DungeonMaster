# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class MonsterActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Monster]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Monster.prisma().query_raw(
            'SELECT * FROM Monster WHERE id = $1',
            'bbadfchfja',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Monster
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Monster.prisma().query_first(
            'SELECT * FROM Monster WHERE name = $1',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.MonsterCreateInput,
        include: Optional[types.MonsterInclude] = None
    ) -> _PrismaModelT:
        """Create a new Monster record.

        Parameters
        ----------
        data
            Monster record data
        include
            Specifies which relations should be loaded on the returned Monster model

        Returns
        -------
        prisma.models.Monster
            The created Monster record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Monster record from just the required fields
        monster = await Monster.prisma().create(
            data={
                # data to create a Monster record
                'name': 'ggciceaie',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.MonsterCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Monster records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Monster record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Monster.prisma().create_many(
            data=[
                {
                    # data to create a Monster record
                    'name': 'bbehjachib',
                },
                {
                    # data to create a Monster record
                    'name': 'cadfabfehe',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.MonsterWhereUniqueInput,
        include: Optional[types.MonsterInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Monster record.

        Parameters
        ----------
        where
            Monster filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Monster model

        Returns
        -------
        prisma.models.Monster
            The deleted Monster record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        monster = await Monster.prisma().delete(
            where={
                'id': 'dgiiaaijj',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.MonsterWhereUniqueInput,
        include: Optional[types.MonsterInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Monster record.

        Parameters
        ----------
        where
            Monster filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Monster model

        Returns
        -------
        prisma.models.Monster
            The found Monster record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        monster = await Monster.prisma().find_unique(
            where={
                'id': 'bfaiacjjfc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.MonsterWhereUniqueInput,
        include: Optional[types.MonsterInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Monster record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Monster filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Monster model

        Returns
        -------
        prisma.models.Monster
            The found Monster record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        monster = await Monster.prisma().find_unique_or_raise(
            where={
                'id': 'eigcfgbif',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MonsterWhereInput] = None,
        cursor: Optional[types.MonsterWhereUniqueInput] = None,
        include: Optional[types.MonsterInclude] = None,
        order: Optional[Union[types.MonsterOrderByInput, List[types.MonsterOrderByInput]]] = None,
        distinct: Optional[List[types.MonsterScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Monster records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Monster records returned
        skip
            Ignore the first N results
        where
            Monster filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Monster model
        order
            Order the returned Monster records by any field
        distinct
            Filter Monster records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Monster]
            The list of all Monster records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Monster records
        monsters = await Monster.prisma().find_many(take=10)

        # find the first 5 Monster records ordered by the size field
        monsters = await Monster.prisma().find_many(
            take=5,
            order={
                'size': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MonsterWhereInput] = None,
        cursor: Optional[types.MonsterWhereUniqueInput] = None,
        include: Optional[types.MonsterInclude] = None,
        order: Optional[Union[types.MonsterOrderByInput, List[types.MonsterOrderByInput]]] = None,
        distinct: Optional[List[types.MonsterScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Monster record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Monster filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Monster model
        order
            Order the returned Monster records by any field
        distinct
            Filter Monster records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Monster
            The first Monster record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Monster record ordered by the type field
        monster = await Monster.prisma().find_first(
            skip=1,
            order={
                'type': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MonsterWhereInput] = None,
        cursor: Optional[types.MonsterWhereUniqueInput] = None,
        include: Optional[types.MonsterInclude] = None,
        order: Optional[Union[types.MonsterOrderByInput, List[types.MonsterOrderByInput]]] = None,
        distinct: Optional[List[types.MonsterScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Monster record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Monster filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Monster model
        order
            Order the returned Monster records by any field
        distinct
            Filter Monster records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Monster
            The first Monster record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Monster record ordered by the alignment field
        monster = await Monster.prisma().find_first_or_raise(
            skip=1,
            order={
                'alignment': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.MonsterUpdateInput,
        where: types.MonsterWhereUniqueInput,
        include: Optional[types.MonsterInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Monster record.

        Parameters
        ----------
        data
            Monster record data specifying what to update
        where
            Monster filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Monster model

        Returns
        -------
        prisma.models.Monster
            The updated Monster record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        monster = await Monster.prisma().update(
            where={
                'id': 'bagcfbhiig',
            },
            data={
                # data to update the Monster record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.MonsterWhereUniqueInput,
        data: types.MonsterUpsertInput,
        include: Optional[types.MonsterInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Monster filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Monster model

        Returns
        -------
        prisma.models.Monster
            The created or updated Monster record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        monster = await Monster.prisma().upsert(
            where={
                'id': 'cghideieh',
            },
            data={
                'create': {
                    'id': 'cghideieh',
                    'name': 'cadfabfehe',
                },
                'update': {
                    'name': 'cadfabfehe',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.MonsterUpdateManyMutationInput,
        where: types.MonsterWhereInput,
    ) -> int:
        """Update multiple Monster records

        Parameters
        ----------
        data
            Monster data to update the selected Monster records to
        where
            Filter to select the Monster records to update

        Returns
        -------
        int
            The total number of Monster records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Monster records
        total = await Monster.prisma().update_many(
            data={
                'habitat': 'biabhbdai'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MonsterWhereInput] = None,
        cursor: Optional[types.MonsterWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Monster records present in the database

        Parameters
        ----------
        select
            Select the Monster fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Monster filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MonsterCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Monster.prisma().count()

        # results: prisma.types.MonsterCountAggregateOutput
        results = await Monster.prisma().count(
            select={
                '_all': True,
                'mainHabitat': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.MonsterCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MonsterWhereInput] = None,
        cursor: Optional[types.MonsterWhereUniqueInput] = None,
    ) -> types.MonsterCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.MonsterCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MonsterWhereInput] = None,
        cursor: Optional[types.MonsterWhereUniqueInput] = None,
    ) -> Union[int, types.MonsterCountAggregateOutput]:
        """Count the number of Monster records present in the database

        Parameters
        ----------
        select
            Select the Monster fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Monster filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MonsterCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Monster.prisma().count()

        # results: prisma.types.MonsterCountAggregateOutput
        results = await Monster.prisma().count(
            select={
                '_all': True,
                'otherHabitat': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.MonsterCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.MonsterWhereInput] = None
    ) -> int:
        """Delete multiple Monster records.

        Parameters
        ----------
        where
            Optional Monster filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Monster records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Monster records
        total = await Monster.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.MonsterScalarFieldKeys'],
        *,
        where: Optional['types.MonsterWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.MonsterAvgAggregateInput'] = None,
        sum: Optional['types.MonsterSumAggregateInput'] = None,
        min: Optional['types.MonsterMinAggregateInput'] = None,
        max: Optional['types.MonsterMaxAggregateInput'] = None,
        having: Optional['types.MonsterScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.MonsterCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.MonsterScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.MonsterScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.MonsterGroupByOutput']:
        """Group Monster records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Monster fields to group records by
        where
            Monster filter to select records
        take
            Limit the maximum number of Monster records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.MonsterGroupByOutput]
            A list of dictionaries representing the Monster record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Monster records by treasure values
        # and count how many records are in each group
        results = await Monster.prisma().group_by(
            ['treasure'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class RaceActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Race]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Race.prisma().query_raw(
            'SELECT * FROM Race WHERE id = $1',
            836760821,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Race
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Race.prisma().query_first(
            'SELECT * FROM Race WHERE race = $1',
            'fjfddhigg',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.RaceCreateInput,
        include: Optional[types.RaceInclude] = None
    ) -> _PrismaModelT:
        """Create a new Race record.

        Parameters
        ----------
        data
            Race record data
        include
            Specifies which relations should be loaded on the returned Race model

        Returns
        -------
        prisma.models.Race
            The created Race record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Race record from just the required fields
        race = await Race.prisma().create(
            data={
                # data to create a Race record
                'race': 'hjaecfifb',
                'source': 'cbbbjbfcii',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.RaceCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Race records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Race record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Race.prisma().create_many(
            data=[
                {
                    # data to create a Race record
                    'race': 'bbejhfidcb',
                    'source': 'bgeecijdgg',
                },
                {
                    # data to create a Race record
                    'race': 'bdiicjafbj',
                    'source': 'bgehebiafc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.RaceWhereUniqueInput,
        include: Optional[types.RaceInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Race record.

        Parameters
        ----------
        where
            Race filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Race model

        Returns
        -------
        prisma.models.Race
            The deleted Race record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        race = await Race.prisma().delete(
            where={
                'id': 1675546029,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.RaceWhereUniqueInput,
        include: Optional[types.RaceInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Race record.

        Parameters
        ----------
        where
            Race filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Race model

        Returns
        -------
        prisma.models.Race
            The found Race record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        race = await Race.prisma().find_unique(
            where={
                'id': 1767274722,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.RaceWhereUniqueInput,
        include: Optional[types.RaceInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Race record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Race filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Race model

        Returns
        -------
        prisma.models.Race
            The found Race record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        race = await Race.prisma().find_unique_or_raise(
            where={
                'id': 326272115,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RaceWhereInput] = None,
        cursor: Optional[types.RaceWhereUniqueInput] = None,
        include: Optional[types.RaceInclude] = None,
        order: Optional[Union[types.RaceOrderByInput, List[types.RaceOrderByInput]]] = None,
        distinct: Optional[List[types.RaceScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Race records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Race records returned
        skip
            Ignore the first N results
        where
            Race filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Race model
        order
            Order the returned Race records by any field
        distinct
            Filter Race records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Race]
            The list of all Race records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Race records
        races = await Race.prisma().find_many(take=10)

        # find the first 5 Race records ordered by the str field
        races = await Race.prisma().find_many(
            take=5,
            order={
                'str': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RaceWhereInput] = None,
        cursor: Optional[types.RaceWhereUniqueInput] = None,
        include: Optional[types.RaceInclude] = None,
        order: Optional[Union[types.RaceOrderByInput, List[types.RaceOrderByInput]]] = None,
        distinct: Optional[List[types.RaceScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Race record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Race filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Race model
        order
            Order the returned Race records by any field
        distinct
            Filter Race records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Race
            The first Race record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Race record ordered by the dex field
        race = await Race.prisma().find_first(
            skip=1,
            order={
                'dex': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RaceWhereInput] = None,
        cursor: Optional[types.RaceWhereUniqueInput] = None,
        include: Optional[types.RaceInclude] = None,
        order: Optional[Union[types.RaceOrderByInput, List[types.RaceOrderByInput]]] = None,
        distinct: Optional[List[types.RaceScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Race record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Race filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Race model
        order
            Order the returned Race records by any field
        distinct
            Filter Race records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Race
            The first Race record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Race record ordered by the con field
        race = await Race.prisma().find_first_or_raise(
            skip=1,
            order={
                'con': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.RaceUpdateInput,
        where: types.RaceWhereUniqueInput,
        include: Optional[types.RaceInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Race record.

        Parameters
        ----------
        data
            Race record data specifying what to update
        where
            Race filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Race model

        Returns
        -------
        prisma.models.Race
            The updated Race record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        race = await Race.prisma().update(
            where={
                'id': 1343201072,
            },
            data={
                # data to update the Race record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.RaceWhereUniqueInput,
        data: types.RaceUpsertInput,
        include: Optional[types.RaceInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Race filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Race model

        Returns
        -------
        prisma.models.Race
            The created or updated Race record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        race = await Race.prisma().upsert(
            where={
                'id': 675780521,
            },
            data={
                'create': {
                    'id': 675780521,
                    'race': 'bdiicjafbj',
                    'source': 'bgehebiafc',
                },
                'update': {
                    'race': 'bdiicjafbj',
                    'source': 'bgehebiafc',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.RaceUpdateManyMutationInput,
        where: types.RaceWhereInput,
    ) -> int:
        """Update multiple Race records

        Parameters
        ----------
        data
            Race data to update the selected Race records to
        where
            Filter to select the Race records to update

        Returns
        -------
        int
            The total number of Race records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Race records
        total = await Race.prisma().update_many(
            data={
                'int': 'heejgedji'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RaceWhereInput] = None,
        cursor: Optional[types.RaceWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Race records present in the database

        Parameters
        ----------
        select
            Select the Race fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Race filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RaceCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Race.prisma().count()

        # results: prisma.types.RaceCountAggregateOutput
        results = await Race.prisma().count(
            select={
                '_all': True,
                'wis': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.RaceCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RaceWhereInput] = None,
        cursor: Optional[types.RaceWhereUniqueInput] = None,
    ) -> types.RaceCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.RaceCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RaceWhereInput] = None,
        cursor: Optional[types.RaceWhereUniqueInput] = None,
    ) -> Union[int, types.RaceCountAggregateOutput]:
        """Count the number of Race records present in the database

        Parameters
        ----------
        select
            Select the Race fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Race filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RaceCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Race.prisma().count()

        # results: prisma.types.RaceCountAggregateOutput
        results = await Race.prisma().count(
            select={
                '_all': True,
                'cha': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.RaceCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.RaceWhereInput] = None
    ) -> int:
        """Delete multiple Race records.

        Parameters
        ----------
        where
            Optional Race filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Race records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Race records
        total = await Race.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.RaceScalarFieldKeys'],
        *,
        where: Optional['types.RaceWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.RaceAvgAggregateInput'] = None,
        sum: Optional['types.RaceSumAggregateInput'] = None,
        min: Optional['types.RaceMinAggregateInput'] = None,
        max: Optional['types.RaceMaxAggregateInput'] = None,
        having: Optional['types.RaceScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.RaceCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.RaceScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.RaceScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.RaceGroupByOutput']:
        """Group Race records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Race fields to group records by
        where
            Race filter to select records
        take
            Limit the maximum number of Race records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.RaceGroupByOutput]
            A list of dictionaries representing the Race record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Race records by special values
        # and count how many records are in each group
        results = await Race.prisma().group_by(
            ['special'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class SpellActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Spell]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Spell.prisma().query_raw(
            'SELECT * FROM Spell WHERE id = $1',
            1969681615,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Spell
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Spell.prisma().query_first(
            'SELECT * FROM Spell WHERE name = $1',
            'bbbgbhfjge',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.SpellCreateInput,
        include: Optional[types.SpellInclude] = None
    ) -> _PrismaModelT:
        """Create a new Spell record.

        Parameters
        ----------
        data
            Spell record data
        include
            Specifies which relations should be loaded on the returned Spell model

        Returns
        -------
        prisma.models.Spell
            The created Spell record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Spell record from just the required fields
        spell = await Spell.prisma().create(
            data={
                # data to create a Spell record
                'name': 'igbehcbab',
                'level': 'bdadaadhag',
                'school': 'bgiggdidbf',
                'castingTime': 'caaaedabfc',
                'duration': 'bigibebcib',
                'range': 'bigaiehgcc',
                'damageEffect': 'beeifcbebf',
                'source': 'bgcigfahea',
                'details': 'bcejgaggif',
                'link': 'idfjadbcc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.SpellCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Spell records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Spell record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Spell.prisma().create_many(
            data=[
                {
                    # data to create a Spell record
                    'name': 'hgdhbjhhj',
                    'level': 'ecjjjfbae',
                    'school': 'bhhfibbigf',
                    'castingTime': 'ijdbeffgg',
                    'duration': 'jjfeafhfj',
                    'range': 'cbachdgfce',
                    'damageEffect': 'chbfcacbd',
                    'source': 'efggddide',
                    'details': 'caficfigfb',
                    'link': 'bfidgijfjc',
                },
                {
                    # data to create a Spell record
                    'name': 'ihieecagf',
                    'level': 'bghfciaafe',
                    'school': 'bgchfhgceh',
                    'castingTime': 'cafeiaccbc',
                    'duration': 'gaddfhfh',
                    'range': 'gieegcbeg',
                    'damageEffect': 'bgcffadich',
                    'source': 'fcbichhci',
                    'details': 'bcggadccgf',
                    'link': 'jdcfdcgc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.SpellWhereUniqueInput,
        include: Optional[types.SpellInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Spell record.

        Parameters
        ----------
        where
            Spell filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Spell model

        Returns
        -------
        prisma.models.Spell
            The deleted Spell record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        spell = await Spell.prisma().delete(
            where={
                'id': 2053047983,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.SpellWhereUniqueInput,
        include: Optional[types.SpellInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Spell record.

        Parameters
        ----------
        where
            Spell filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Spell model

        Returns
        -------
        prisma.models.Spell
            The found Spell record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        spell = await Spell.prisma().find_unique(
            where={
                'id': 685333180,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.SpellWhereUniqueInput,
        include: Optional[types.SpellInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Spell record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Spell filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Spell model

        Returns
        -------
        prisma.models.Spell
            The found Spell record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        spell = await Spell.prisma().find_unique_or_raise(
            where={
                'id': 127474245,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SpellWhereInput] = None,
        cursor: Optional[types.SpellWhereUniqueInput] = None,
        include: Optional[types.SpellInclude] = None,
        order: Optional[Union[types.SpellOrderByInput, List[types.SpellOrderByInput]]] = None,
        distinct: Optional[List[types.SpellScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Spell records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Spell records returned
        skip
            Ignore the first N results
        where
            Spell filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Spell model
        order
            Order the returned Spell records by any field
        distinct
            Filter Spell records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Spell]
            The list of all Spell records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Spell records
        spells = await Spell.prisma().find_many(take=10)

        # find the first 5 Spell records ordered by the level field
        spells = await Spell.prisma().find_many(
            take=5,
            order={
                'level': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SpellWhereInput] = None,
        cursor: Optional[types.SpellWhereUniqueInput] = None,
        include: Optional[types.SpellInclude] = None,
        order: Optional[Union[types.SpellOrderByInput, List[types.SpellOrderByInput]]] = None,
        distinct: Optional[List[types.SpellScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Spell record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Spell filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Spell model
        order
            Order the returned Spell records by any field
        distinct
            Filter Spell records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Spell
            The first Spell record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Spell record ordered by the school field
        spell = await Spell.prisma().find_first(
            skip=1,
            order={
                'school': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SpellWhereInput] = None,
        cursor: Optional[types.SpellWhereUniqueInput] = None,
        include: Optional[types.SpellInclude] = None,
        order: Optional[Union[types.SpellOrderByInput, List[types.SpellOrderByInput]]] = None,
        distinct: Optional[List[types.SpellScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Spell record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Spell filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Spell model
        order
            Order the returned Spell records by any field
        distinct
            Filter Spell records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Spell
            The first Spell record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Spell record ordered by the castingTime field
        spell = await Spell.prisma().find_first_or_raise(
            skip=1,
            order={
                'castingTime': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.SpellUpdateInput,
        where: types.SpellWhereUniqueInput,
        include: Optional[types.SpellInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Spell record.

        Parameters
        ----------
        data
            Spell record data specifying what to update
        where
            Spell filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Spell model

        Returns
        -------
        prisma.models.Spell
            The updated Spell record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        spell = await Spell.prisma().update(
            where={
                'id': 948921754,
            },
            data={
                # data to update the Spell record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.SpellWhereUniqueInput,
        data: types.SpellUpsertInput,
        include: Optional[types.SpellInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Spell filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Spell model

        Returns
        -------
        prisma.models.Spell
            The created or updated Spell record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        spell = await Spell.prisma().upsert(
            where={
                'id': 1964990155,
            },
            data={
                'create': {
                    'id': 1964990155,
                    'name': 'ihieecagf',
                    'level': 'bghfciaafe',
                    'school': 'bgchfhgceh',
                    'castingTime': 'cafeiaccbc',
                    'duration': 'gaddfhfh',
                    'range': 'gieegcbeg',
                    'damageEffect': 'bgcffadich',
                    'source': 'fcbichhci',
                    'details': 'bcggadccgf',
                    'link': 'jdcfdcgc',
                },
                'update': {
                    'name': 'ihieecagf',
                    'level': 'bghfciaafe',
                    'school': 'bgchfhgceh',
                    'castingTime': 'cafeiaccbc',
                    'duration': 'gaddfhfh',
                    'range': 'gieegcbeg',
                    'damageEffect': 'bgcffadich',
                    'source': 'fcbichhci',
                    'details': 'bcggadccgf',
                    'link': 'jdcfdcgc',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.SpellUpdateManyMutationInput,
        where: types.SpellWhereInput,
    ) -> int:
        """Update multiple Spell records

        Parameters
        ----------
        data
            Spell data to update the selected Spell records to
        where
            Filter to select the Spell records to update

        Returns
        -------
        int
            The total number of Spell records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Spell records
        total = await Spell.prisma().update_many(
            data={
                'duration': 'bcciijbibg'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SpellWhereInput] = None,
        cursor: Optional[types.SpellWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Spell records present in the database

        Parameters
        ----------
        select
            Select the Spell fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Spell filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SpellCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Spell.prisma().count()

        # results: prisma.types.SpellCountAggregateOutput
        results = await Spell.prisma().count(
            select={
                '_all': True,
                'range': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.SpellCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SpellWhereInput] = None,
        cursor: Optional[types.SpellWhereUniqueInput] = None,
    ) -> types.SpellCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.SpellCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SpellWhereInput] = None,
        cursor: Optional[types.SpellWhereUniqueInput] = None,
    ) -> Union[int, types.SpellCountAggregateOutput]:
        """Count the number of Spell records present in the database

        Parameters
        ----------
        select
            Select the Spell fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Spell filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SpellCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Spell.prisma().count()

        # results: prisma.types.SpellCountAggregateOutput
        results = await Spell.prisma().count(
            select={
                '_all': True,
                'area': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.SpellCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.SpellWhereInput] = None
    ) -> int:
        """Delete multiple Spell records.

        Parameters
        ----------
        where
            Optional Spell filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Spell records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Spell records
        total = await Spell.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.SpellScalarFieldKeys'],
        *,
        where: Optional['types.SpellWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.SpellAvgAggregateInput'] = None,
        sum: Optional['types.SpellSumAggregateInput'] = None,
        min: Optional['types.SpellMinAggregateInput'] = None,
        max: Optional['types.SpellMaxAggregateInput'] = None,
        having: Optional['types.SpellScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.SpellCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.SpellScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.SpellScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.SpellGroupByOutput']:
        """Group Spell records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Spell fields to group records by
        where
            Spell filter to select records
        take
            Limit the maximum number of Spell records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.SpellGroupByOutput]
            A list of dictionaries representing the Spell record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Spell records by attack values
        # and count how many records are in each group
        results = await Spell.prisma().group_by(
            ['attack'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class PlayerClassActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.PlayerClass]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await PlayerClass.prisma().query_raw(
            'SELECT * FROM PlayerClass WHERE id = $1',
            255202753,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.PlayerClass
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await PlayerClass.prisma().query_first(
            'SELECT * FROM PlayerClass WHERE Playerclass = $1',
            'bccdfhdigc',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.PlayerClassCreateInput,
        include: Optional[types.PlayerClassInclude] = None
    ) -> _PrismaModelT:
        """Create a new PlayerClass record.

        Parameters
        ----------
        data
            PlayerClass record data
        include
            Specifies which relations should be loaded on the returned PlayerClass model

        Returns
        -------
        prisma.models.PlayerClass
            The created PlayerClass record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a PlayerClass record from just the required fields
        playerclass = await PlayerClass.prisma().create(
            data={
                # data to create a PlayerClass record
                'Playerclass': 'febcgjbfj',
                'subclass': 'bageiegghg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.PlayerClassCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple PlayerClass records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of PlayerClass record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await PlayerClass.prisma().create_many(
            data=[
                {
                    # data to create a PlayerClass record
                    'Playerclass': 'faidicegb',
                    'subclass': 'bacecgfhbe',
                },
                {
                    # data to create a PlayerClass record
                    'Playerclass': 'ihcahiead',
                    'subclass': 'biheheiajg',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.PlayerClassWhereUniqueInput,
        include: Optional[types.PlayerClassInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single PlayerClass record.

        Parameters
        ----------
        where
            PlayerClass filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned PlayerClass model

        Returns
        -------
        prisma.models.PlayerClass
            The deleted PlayerClass record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        playerclass = await PlayerClass.prisma().delete(
            where={
                'id': 916896761,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.PlayerClassWhereUniqueInput,
        include: Optional[types.PlayerClassInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique PlayerClass record.

        Parameters
        ----------
        where
            PlayerClass filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned PlayerClass model

        Returns
        -------
        prisma.models.PlayerClass
            The found PlayerClass record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        playerclass = await PlayerClass.prisma().find_unique(
            where={
                'id': 769267518,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.PlayerClassWhereUniqueInput,
        include: Optional[types.PlayerClassInclude] = None
    ) -> _PrismaModelT:
        """Find a unique PlayerClass record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            PlayerClass filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned PlayerClass model

        Returns
        -------
        prisma.models.PlayerClass
            The found PlayerClass record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        playerclass = await PlayerClass.prisma().find_unique_or_raise(
            where={
                'id': 820312479,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PlayerClassWhereInput] = None,
        cursor: Optional[types.PlayerClassWhereUniqueInput] = None,
        include: Optional[types.PlayerClassInclude] = None,
        order: Optional[Union[types.PlayerClassOrderByInput, List[types.PlayerClassOrderByInput]]] = None,
        distinct: Optional[List[types.PlayerClassScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple PlayerClass records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of PlayerClass records returned
        skip
            Ignore the first N results
        where
            PlayerClass filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PlayerClass model
        order
            Order the returned PlayerClass records by any field
        distinct
            Filter PlayerClass records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.PlayerClass]
            The list of all PlayerClass records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 PlayerClass records
        playerclass = await PlayerClass.prisma().find_many(take=10)

        # find the first 5 PlayerClass records ordered by the subclass field
        playerclass = await PlayerClass.prisma().find_many(
            take=5,
            order={
                'subclass': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PlayerClassWhereInput] = None,
        cursor: Optional[types.PlayerClassWhereUniqueInput] = None,
        include: Optional[types.PlayerClassInclude] = None,
        order: Optional[Union[types.PlayerClassOrderByInput, List[types.PlayerClassOrderByInput]]] = None,
        distinct: Optional[List[types.PlayerClassScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single PlayerClass record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            PlayerClass filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PlayerClass model
        order
            Order the returned PlayerClass records by any field
        distinct
            Filter PlayerClass records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.PlayerClass
            The first PlayerClass record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second PlayerClass record ordered by the source field
        playerclass = await PlayerClass.prisma().find_first(
            skip=1,
            order={
                'source': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PlayerClassWhereInput] = None,
        cursor: Optional[types.PlayerClassWhereUniqueInput] = None,
        include: Optional[types.PlayerClassInclude] = None,
        order: Optional[Union[types.PlayerClassOrderByInput, List[types.PlayerClassOrderByInput]]] = None,
        distinct: Optional[List[types.PlayerClassScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single PlayerClass record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            PlayerClass filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PlayerClass model
        order
            Order the returned PlayerClass records by any field
        distinct
            Filter PlayerClass records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.PlayerClass
            The first PlayerClass record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second PlayerClass record ordered by the notes field
        playerclass = await PlayerClass.prisma().find_first_or_raise(
            skip=1,
            order={
                'notes': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.PlayerClassUpdateInput,
        where: types.PlayerClassWhereUniqueInput,
        include: Optional[types.PlayerClassInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single PlayerClass record.

        Parameters
        ----------
        data
            PlayerClass record data specifying what to update
        where
            PlayerClass filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned PlayerClass model

        Returns
        -------
        prisma.models.PlayerClass
            The updated PlayerClass record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        playerclass = await PlayerClass.prisma().update(
            where={
                'id': 92728044,
            },
            data={
                # data to update the PlayerClass record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.PlayerClassWhereUniqueInput,
        data: types.PlayerClassUpsertInput,
        include: Optional[types.PlayerClassInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            PlayerClass filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned PlayerClass model

        Returns
        -------
        prisma.models.PlayerClass
            The created or updated PlayerClass record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        playerclass = await PlayerClass.prisma().upsert(
            where={
                'id': 344858293,
            },
            data={
                'create': {
                    'id': 344858293,
                    'Playerclass': 'ihcahiead',
                    'subclass': 'biheheiajg',
                },
                'update': {
                    'Playerclass': 'ihcahiead',
                    'subclass': 'biheheiajg',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.PlayerClassUpdateManyMutationInput,
        where: types.PlayerClassWhereInput,
    ) -> int:
        """Update multiple PlayerClass records

        Parameters
        ----------
        data
            PlayerClass data to update the selected PlayerClass records to
        where
            Filter to select the PlayerClass records to update

        Returns
        -------
        int
            The total number of PlayerClass records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all PlayerClass records
        total = await PlayerClass.prisma().update_many(
            data={
                'features': 'bbcbhebbda'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PlayerClassWhereInput] = None,
        cursor: Optional[types.PlayerClassWhereUniqueInput] = None,
    ) -> int:
        """Count the number of PlayerClass records present in the database

        Parameters
        ----------
        select
            Select the PlayerClass fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            PlayerClass filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PlayerClassCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await PlayerClass.prisma().count()

        # results: prisma.types.PlayerClassCountAggregateOutput
        results = await PlayerClass.prisma().count(
            select={
                '_all': True,
                'level': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.PlayerClassCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PlayerClassWhereInput] = None,
        cursor: Optional[types.PlayerClassWhereUniqueInput] = None,
    ) -> types.PlayerClassCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.PlayerClassCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PlayerClassWhereInput] = None,
        cursor: Optional[types.PlayerClassWhereUniqueInput] = None,
    ) -> Union[int, types.PlayerClassCountAggregateOutput]:
        """Count the number of PlayerClass records present in the database

        Parameters
        ----------
        select
            Select the PlayerClass fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            PlayerClass filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PlayerClassCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await PlayerClass.prisma().count()

        # results: prisma.types.PlayerClassCountAggregateOutput
        results = await PlayerClass.prisma().count(
            select={
                '_all': True,
                'description': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.PlayerClassCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.PlayerClassWhereInput] = None
    ) -> int:
        """Delete multiple PlayerClass records.

        Parameters
        ----------
        where
            Optional PlayerClass filter to find the records to be deleted

        Returns
        -------
        int
            The total number of PlayerClass records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all PlayerClass records
        total = await PlayerClass.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.PlayerClassScalarFieldKeys'],
        *,
        where: Optional['types.PlayerClassWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.PlayerClassAvgAggregateInput'] = None,
        sum: Optional['types.PlayerClassSumAggregateInput'] = None,
        min: Optional['types.PlayerClassMinAggregateInput'] = None,
        max: Optional['types.PlayerClassMaxAggregateInput'] = None,
        having: Optional['types.PlayerClassScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.PlayerClassCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.PlayerClassScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.PlayerClassScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.PlayerClassGroupByOutput']:
        """Group PlayerClass records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar PlayerClass fields to group records by
        where
            PlayerClass filter to select records
        take
            Limit the maximum number of PlayerClass records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.PlayerClassGroupByOutput]
            A list of dictionaries representing the PlayerClass record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group PlayerClass records by id values
        # and count how many records are in each group
        results = await PlayerClass.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class MagicItemActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.MagicItem]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await MagicItem.prisma().query_raw(
            'SELECT * FROM MagicItem WHERE id = $1',
            1495896251,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.MagicItem
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await MagicItem.prisma().query_first(
            'SELECT * FROM MagicItem WHERE name = $1',
            'caifcbgii',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.MagicItemCreateInput,
        include: Optional[types.MagicItemInclude] = None
    ) -> _PrismaModelT:
        """Create a new MagicItem record.

        Parameters
        ----------
        data
            MagicItem record data
        include
            Specifies which relations should be loaded on the returned MagicItem model

        Returns
        -------
        prisma.models.MagicItem
            The created MagicItem record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a MagicItem record from just the required fields
        magicitem = await MagicItem.prisma().create(
            data={
                # data to create a MagicItem record
                'name': 'igaibbfgj',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.MagicItemCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple MagicItem records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of MagicItem record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await MagicItem.prisma().create_many(
            data=[
                {
                    # data to create a MagicItem record
                    'name': 'bggajdcbbi',
                },
                {
                    # data to create a MagicItem record
                    'name': 'fcfhgbjed',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.MagicItemWhereUniqueInput,
        include: Optional[types.MagicItemInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single MagicItem record.

        Parameters
        ----------
        where
            MagicItem filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned MagicItem model

        Returns
        -------
        prisma.models.MagicItem
            The deleted MagicItem record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        magicitem = await MagicItem.prisma().delete(
            where={
                'id': 736209796,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.MagicItemWhereUniqueInput,
        include: Optional[types.MagicItemInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique MagicItem record.

        Parameters
        ----------
        where
            MagicItem filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned MagicItem model

        Returns
        -------
        prisma.models.MagicItem
            The found MagicItem record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        magicitem = await MagicItem.prisma().find_unique(
            where={
                'id': 493907821,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.MagicItemWhereUniqueInput,
        include: Optional[types.MagicItemInclude] = None
    ) -> _PrismaModelT:
        """Find a unique MagicItem record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            MagicItem filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned MagicItem model

        Returns
        -------
        prisma.models.MagicItem
            The found MagicItem record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        magicitem = await MagicItem.prisma().find_unique_or_raise(
            where={
                'id': 639686562,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MagicItemWhereInput] = None,
        cursor: Optional[types.MagicItemWhereUniqueInput] = None,
        include: Optional[types.MagicItemInclude] = None,
        order: Optional[Union[types.MagicItemOrderByInput, List[types.MagicItemOrderByInput]]] = None,
        distinct: Optional[List[types.MagicItemScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple MagicItem records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of MagicItem records returned
        skip
            Ignore the first N results
        where
            MagicItem filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MagicItem model
        order
            Order the returned MagicItem records by any field
        distinct
            Filter MagicItem records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.MagicItem]
            The list of all MagicItem records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 MagicItem records
        magicitems = await MagicItem.prisma().find_many(take=10)

        # find the first 5 MagicItem records ordered by the rarity field
        magicitems = await MagicItem.prisma().find_many(
            take=5,
            order={
                'rarity': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MagicItemWhereInput] = None,
        cursor: Optional[types.MagicItemWhereUniqueInput] = None,
        include: Optional[types.MagicItemInclude] = None,
        order: Optional[Union[types.MagicItemOrderByInput, List[types.MagicItemOrderByInput]]] = None,
        distinct: Optional[List[types.MagicItemScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single MagicItem record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            MagicItem filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MagicItem model
        order
            Order the returned MagicItem records by any field
        distinct
            Filter MagicItem records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.MagicItem
            The first MagicItem record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second MagicItem record ordered by the attunement field
        magicitem = await MagicItem.prisma().find_first(
            skip=1,
            order={
                'attunement': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MagicItemWhereInput] = None,
        cursor: Optional[types.MagicItemWhereUniqueInput] = None,
        include: Optional[types.MagicItemInclude] = None,
        order: Optional[Union[types.MagicItemOrderByInput, List[types.MagicItemOrderByInput]]] = None,
        distinct: Optional[List[types.MagicItemScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single MagicItem record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            MagicItem filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MagicItem model
        order
            Order the returned MagicItem records by any field
        distinct
            Filter MagicItem records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.MagicItem
            The first MagicItem record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second MagicItem record ordered by the costGp field
        magicitem = await MagicItem.prisma().find_first_or_raise(
            skip=1,
            order={
                'costGp': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.MagicItemUpdateInput,
        where: types.MagicItemWhereUniqueInput,
        include: Optional[types.MagicItemInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single MagicItem record.

        Parameters
        ----------
        data
            MagicItem record data specifying what to update
        where
            MagicItem filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned MagicItem model

        Returns
        -------
        prisma.models.MagicItem
            The updated MagicItem record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        magicitem = await MagicItem.prisma().update(
            where={
                'id': 654007347,
            },
            data={
                # data to update the MagicItem record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.MagicItemWhereUniqueInput,
        data: types.MagicItemUpsertInput,
        include: Optional[types.MagicItemInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            MagicItem filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned MagicItem model

        Returns
        -------
        prisma.models.MagicItem
            The created or updated MagicItem record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        magicitem = await MagicItem.prisma().upsert(
            where={
                'id': 1905261552,
            },
            data={
                'create': {
                    'id': 1905261552,
                    'name': 'fcfhgbjed',
                },
                'update': {
                    'name': 'fcfhgbjed',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.MagicItemUpdateManyMutationInput,
        where: types.MagicItemWhereInput,
    ) -> int:
        """Update multiple MagicItem records

        Parameters
        ----------
        data
            MagicItem data to update the selected MagicItem records to
        where
            Filter to select the MagicItem records to update

        Returns
        -------
        int
            The total number of MagicItem records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all MagicItem records
        total = await MagicItem.prisma().update_many(
            data={
                'note': 'hihegjif'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MagicItemWhereInput] = None,
        cursor: Optional[types.MagicItemWhereUniqueInput] = None,
    ) -> int:
        """Count the number of MagicItem records present in the database

        Parameters
        ----------
        select
            Select the MagicItem fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            MagicItem filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MagicItemCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await MagicItem.prisma().count()

        # results: prisma.types.MagicItemCountAggregateOutput
        results = await MagicItem.prisma().count(
            select={
                '_all': True,
                'armorCost': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.MagicItemCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MagicItemWhereInput] = None,
        cursor: Optional[types.MagicItemWhereUniqueInput] = None,
    ) -> types.MagicItemCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.MagicItemCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MagicItemWhereInput] = None,
        cursor: Optional[types.MagicItemWhereUniqueInput] = None,
    ) -> Union[int, types.MagicItemCountAggregateOutput]:
        """Count the number of MagicItem records present in the database

        Parameters
        ----------
        select
            Select the MagicItem fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            MagicItem filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MagicItemCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await MagicItem.prisma().count()

        # results: prisma.types.MagicItemCountAggregateOutput
        results = await MagicItem.prisma().count(
            select={
                '_all': True,
                'rareMaterial': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.MagicItemCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.MagicItemWhereInput] = None
    ) -> int:
        """Delete multiple MagicItem records.

        Parameters
        ----------
        where
            Optional MagicItem filter to find the records to be deleted

        Returns
        -------
        int
            The total number of MagicItem records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all MagicItem records
        total = await MagicItem.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.MagicItemScalarFieldKeys'],
        *,
        where: Optional['types.MagicItemWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.MagicItemAvgAggregateInput'] = None,
        sum: Optional['types.MagicItemSumAggregateInput'] = None,
        min: Optional['types.MagicItemMinAggregateInput'] = None,
        max: Optional['types.MagicItemMaxAggregateInput'] = None,
        having: Optional['types.MagicItemScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.MagicItemCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.MagicItemScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.MagicItemScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.MagicItemGroupByOutput']:
        """Group MagicItem records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar MagicItem fields to group records by
        where
            MagicItem filter to select records
        take
            Limit the maximum number of MagicItem records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.MagicItemGroupByOutput]
            A list of dictionaries representing the MagicItem record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group MagicItem records by acBonus values
        # and count how many records are in each group
        results = await MagicItem.prisma().group_by(
            ['acBonus'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class GeneralEquipmentActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.GeneralEquipment]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await GeneralEquipment.prisma().query_raw(
            'SELECT * FROM GeneralEquipment WHERE id = $1',
            1398328302,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.GeneralEquipment
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await GeneralEquipment.prisma().query_first(
            'SELECT * FROM GeneralEquipment WHERE name = $1',
            'ifgaaagff',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.GeneralEquipmentCreateInput,
        include: Optional[types.GeneralEquipmentInclude] = None
    ) -> _PrismaModelT:
        """Create a new GeneralEquipment record.

        Parameters
        ----------
        data
            GeneralEquipment record data
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model

        Returns
        -------
        prisma.models.GeneralEquipment
            The created GeneralEquipment record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a GeneralEquipment record from just the required fields
        generalequipment = await GeneralEquipment.prisma().create(
            data={
                # data to create a GeneralEquipment record
                'name': 'befcddgjce',
                'cost': 'bfhdbjjgfd',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.GeneralEquipmentCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple GeneralEquipment records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of GeneralEquipment record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await GeneralEquipment.prisma().create_many(
            data=[
                {
                    # data to create a GeneralEquipment record
                    'name': 'cabdjadaji',
                    'cost': 'faajgfadf',
                },
                {
                    # data to create a GeneralEquipment record
                    'name': 'biaagcedjc',
                    'cost': 'cahhaghecf',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.GeneralEquipmentWhereUniqueInput,
        include: Optional[types.GeneralEquipmentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single GeneralEquipment record.

        Parameters
        ----------
        where
            GeneralEquipment filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model

        Returns
        -------
        prisma.models.GeneralEquipment
            The deleted GeneralEquipment record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        generalequipment = await GeneralEquipment.prisma().delete(
            where={
                'id': 1672112838,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.GeneralEquipmentWhereUniqueInput,
        include: Optional[types.GeneralEquipmentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique GeneralEquipment record.

        Parameters
        ----------
        where
            GeneralEquipment filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model

        Returns
        -------
        prisma.models.GeneralEquipment
            The found GeneralEquipment record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        generalequipment = await GeneralEquipment.prisma().find_unique(
            where={
                'id': 926677639,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.GeneralEquipmentWhereUniqueInput,
        include: Optional[types.GeneralEquipmentInclude] = None
    ) -> _PrismaModelT:
        """Find a unique GeneralEquipment record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            GeneralEquipment filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model

        Returns
        -------
        prisma.models.GeneralEquipment
            The found GeneralEquipment record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        generalequipment = await GeneralEquipment.prisma().find_unique_or_raise(
            where={
                'id': 1447624116,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GeneralEquipmentWhereInput] = None,
        cursor: Optional[types.GeneralEquipmentWhereUniqueInput] = None,
        include: Optional[types.GeneralEquipmentInclude] = None,
        order: Optional[Union[types.GeneralEquipmentOrderByInput, List[types.GeneralEquipmentOrderByInput]]] = None,
        distinct: Optional[List[types.GeneralEquipmentScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple GeneralEquipment records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of GeneralEquipment records returned
        skip
            Ignore the first N results
        where
            GeneralEquipment filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model
        order
            Order the returned GeneralEquipment records by any field
        distinct
            Filter GeneralEquipment records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.GeneralEquipment]
            The list of all GeneralEquipment records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 GeneralEquipment records
        generalequipments = await GeneralEquipment.prisma().find_many(take=10)

        # find the first 5 GeneralEquipment records ordered by the cost field
        generalequipments = await GeneralEquipment.prisma().find_many(
            take=5,
            order={
                'cost': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GeneralEquipmentWhereInput] = None,
        cursor: Optional[types.GeneralEquipmentWhereUniqueInput] = None,
        include: Optional[types.GeneralEquipmentInclude] = None,
        order: Optional[Union[types.GeneralEquipmentOrderByInput, List[types.GeneralEquipmentOrderByInput]]] = None,
        distinct: Optional[List[types.GeneralEquipmentScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single GeneralEquipment record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            GeneralEquipment filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model
        order
            Order the returned GeneralEquipment records by any field
        distinct
            Filter GeneralEquipment records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.GeneralEquipment
            The first GeneralEquipment record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second GeneralEquipment record ordered by the weightLbs field
        generalequipment = await GeneralEquipment.prisma().find_first(
            skip=1,
            order={
                'weightLbs': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GeneralEquipmentWhereInput] = None,
        cursor: Optional[types.GeneralEquipmentWhereUniqueInput] = None,
        include: Optional[types.GeneralEquipmentInclude] = None,
        order: Optional[Union[types.GeneralEquipmentOrderByInput, List[types.GeneralEquipmentOrderByInput]]] = None,
        distinct: Optional[List[types.GeneralEquipmentScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single GeneralEquipment record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            GeneralEquipment filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model
        order
            Order the returned GeneralEquipment records by any field
        distinct
            Filter GeneralEquipment records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.GeneralEquipment
            The first GeneralEquipment record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second GeneralEquipment record ordered by the id field
        generalequipment = await GeneralEquipment.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.GeneralEquipmentUpdateInput,
        where: types.GeneralEquipmentWhereUniqueInput,
        include: Optional[types.GeneralEquipmentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single GeneralEquipment record.

        Parameters
        ----------
        data
            GeneralEquipment record data specifying what to update
        where
            GeneralEquipment filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model

        Returns
        -------
        prisma.models.GeneralEquipment
            The updated GeneralEquipment record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        generalequipment = await GeneralEquipment.prisma().update(
            where={
                'id': 1738083805,
            },
            data={
                # data to update the GeneralEquipment record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.GeneralEquipmentWhereUniqueInput,
        data: types.GeneralEquipmentUpsertInput,
        include: Optional[types.GeneralEquipmentInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            GeneralEquipment filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned GeneralEquipment model

        Returns
        -------
        prisma.models.GeneralEquipment
            The created or updated GeneralEquipment record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        generalequipment = await GeneralEquipment.prisma().upsert(
            where={
                'id': 340946258,
            },
            data={
                'create': {
                    'id': 340946258,
                    'name': 'biaagcedjc',
                    'cost': 'cahhaghecf',
                },
                'update': {
                    'name': 'biaagcedjc',
                    'cost': 'cahhaghecf',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.GeneralEquipmentUpdateManyMutationInput,
        where: types.GeneralEquipmentWhereInput,
    ) -> int:
        """Update multiple GeneralEquipment records

        Parameters
        ----------
        data
            GeneralEquipment data to update the selected GeneralEquipment records to
        where
            Filter to select the GeneralEquipment records to update

        Returns
        -------
        int
            The total number of GeneralEquipment records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all GeneralEquipment records
        total = await GeneralEquipment.prisma().update_many(
            data={
                'name': 'gabahhhjf'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GeneralEquipmentWhereInput] = None,
        cursor: Optional[types.GeneralEquipmentWhereUniqueInput] = None,
    ) -> int:
        """Count the number of GeneralEquipment records present in the database

        Parameters
        ----------
        select
            Select the GeneralEquipment fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            GeneralEquipment filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GeneralEquipmentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await GeneralEquipment.prisma().count()

        # results: prisma.types.GeneralEquipmentCountAggregateOutput
        results = await GeneralEquipment.prisma().count(
            select={
                '_all': True,
                'cost': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.GeneralEquipmentCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GeneralEquipmentWhereInput] = None,
        cursor: Optional[types.GeneralEquipmentWhereUniqueInput] = None,
    ) -> types.GeneralEquipmentCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.GeneralEquipmentCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GeneralEquipmentWhereInput] = None,
        cursor: Optional[types.GeneralEquipmentWhereUniqueInput] = None,
    ) -> Union[int, types.GeneralEquipmentCountAggregateOutput]:
        """Count the number of GeneralEquipment records present in the database

        Parameters
        ----------
        select
            Select the GeneralEquipment fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            GeneralEquipment filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GeneralEquipmentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await GeneralEquipment.prisma().count()

        # results: prisma.types.GeneralEquipmentCountAggregateOutput
        results = await GeneralEquipment.prisma().count(
            select={
                '_all': True,
                'weightLbs': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.GeneralEquipmentCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.GeneralEquipmentWhereInput] = None
    ) -> int:
        """Delete multiple GeneralEquipment records.

        Parameters
        ----------
        where
            Optional GeneralEquipment filter to find the records to be deleted

        Returns
        -------
        int
            The total number of GeneralEquipment records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all GeneralEquipment records
        total = await GeneralEquipment.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.GeneralEquipmentScalarFieldKeys'],
        *,
        where: Optional['types.GeneralEquipmentWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.GeneralEquipmentAvgAggregateInput'] = None,
        sum: Optional['types.GeneralEquipmentSumAggregateInput'] = None,
        min: Optional['types.GeneralEquipmentMinAggregateInput'] = None,
        max: Optional['types.GeneralEquipmentMaxAggregateInput'] = None,
        having: Optional['types.GeneralEquipmentScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.GeneralEquipmentCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.GeneralEquipmentScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.GeneralEquipmentScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.GeneralEquipmentGroupByOutput']:
        """Group GeneralEquipment records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar GeneralEquipment fields to group records by
        where
            GeneralEquipment filter to select records
        take
            Limit the maximum number of GeneralEquipment records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.GeneralEquipmentGroupByOutput]
            A list of dictionaries representing the GeneralEquipment record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group GeneralEquipment records by id values
        # and count how many records are in each group
        results = await GeneralEquipment.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models